let baseGet,baseSet,castPath;_9ff‍.x([["default",()=>_9ff‍.o]]);_9ff‍.w("./baseGet.js",[["default",["baseGet"],function(v){baseGet=v}]]);_9ff‍.w("./baseSet.js",[["default",["baseSet"],function(v){baseSet=v}]]);_9ff‍.w("./castPath.js",[["default",["castPath"],function(v){castPath=v}]]);



/**
 * The base implementation of `pickBy`.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  let index = -1
  const length = paths.length
  const result = {}

  while (++index < length) {
    const path = paths[index]
    const value = baseGet(object, path)
    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value)
    }
  }
  return result
}

_9ff‍.d(basePickBy);
