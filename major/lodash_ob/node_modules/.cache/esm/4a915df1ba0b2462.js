let assert,lodashStable,uniqueId;_ba0‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_ba0‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_ba0‍.w("../uniqueId.js",[["default",["uniqueId"],function(v){uniqueId=v}]]);



describe('uniqueId', function() {
  it('should generate unique ids', function() {
    var actual = lodashStable.times(1000, function() {
      return uniqueId();
    });

    assert.strictEqual(lodashStable.uniq(actual).length, actual.length);
  });

  it('should return a string value when not providing a `prefix`', function() {
    assert.strictEqual(typeof uniqueId(), 'string');
  });

  it('should coerce the prefix argument to a string', function() {
    var actual = [uniqueId(3), uniqueId(2), uniqueId(1)];
    assert.ok(/3\d+,2\d+,1\d+/.test(actual));
  });
});
