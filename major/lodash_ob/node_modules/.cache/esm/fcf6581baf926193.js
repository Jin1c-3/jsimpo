let assert,lodashStable,LARGE_ARRAY_SIZE,stubOne,differenceWith;_af9‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_af9‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_af9‍.w("./utils.js",[["LARGE_ARRAY_SIZE",["LARGE_ARRAY_SIZE"],function(v){LARGE_ARRAY_SIZE=v}],["stubOne",["stubOne"],function(v){stubOne=v}]]);_af9‍.w("../differenceWith.js",[["default",["differenceWith"],function(v){differenceWith=v}]]);




describe('differenceWith', function() {
  it('should work with a `comparator`', function() {
    var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }],
        actual = differenceWith(objects, [{ 'x': 1, 'y': 2 }], lodashStable.isEqual);

    assert.deepStrictEqual(actual, [objects[1]]);
  });

  it('should preserve the sign of `0`', function() {
    var array = [-0, 1],
        largeArray = lodashStable.times(LARGE_ARRAY_SIZE, stubOne),
        others = [[1], largeArray],
        expected = lodashStable.map(others, lodashStable.constant(['-0']));

    var actual = lodashStable.map(others, function(other) {
      return lodashStable.map(differenceWith(array, other, lodashStable.eq), lodashStable.toString);
    });

    assert.deepStrictEqual(actual, expected);
  });
});
