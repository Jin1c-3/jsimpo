let assert,lodashStable,LARGE_ARRAY_SIZE,isEven,uniqWith;_ba0‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_ba0‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_ba0‍.w("./utils.js",[["LARGE_ARRAY_SIZE",["LARGE_ARRAY_SIZE"],function(v){LARGE_ARRAY_SIZE=v}],["isEven",["isEven"],function(v){isEven=v}]]);_ba0‍.w("../uniqWith.js",[["default",["uniqWith"],function(v){uniqWith=v}]]);




describe('uniqWith', function() {
  it('should work with a `comparator`', function() {
    var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }],
        actual = uniqWith(objects, lodashStable.isEqual);

    assert.deepStrictEqual(actual, [objects[0], objects[1]]);
  });

  it('should preserve the sign of `0`', function() {
    var largeArray = lodashStable.times(LARGE_ARRAY_SIZE, function(index) {
      return isEven(index) ? -0 : 0;
    });

    var arrays = [[-0, 0], largeArray],
        expected = lodashStable.map(arrays, lodashStable.constant(['-0']));

    var actual = lodashStable.map(arrays, function(array) {
      return lodashStable.map(uniqWith(array, lodashStable.eq), lodashStable.toString);
    });

    assert.deepStrictEqual(actual, expected);
  });
});
