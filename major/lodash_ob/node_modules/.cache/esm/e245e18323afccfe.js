let assert,lodashStable,falsey,castArray;_23a‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_23a‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_23a‍.w("./utils.js",[["falsey",["falsey"],function(v){falsey=v}]]);_23a‍.w("../castArray.js",[["default",["castArray"],function(v){castArray=v}]]);




describe('castArray', function() {
  it('should wrap non-array items in an array', function() {
    var values = falsey.concat(true, 1, 'a', { 'a': 1 }),
        expected = lodashStable.map(values, function(value) { return [value]; }),
        actual = lodashStable.map(values, castArray);

    assert.deepStrictEqual(actual, expected);
  });

  it('should return array values by reference', function() {
    var array = [1];
    assert.strictEqual(castArray(array), array);
  });

  it('should return an empty array when no arguments are given', function() {
    assert.deepStrictEqual(castArray(), []);
  });
});
