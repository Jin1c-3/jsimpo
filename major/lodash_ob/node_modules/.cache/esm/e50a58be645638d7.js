let assert,lodashStable,stubString,escapeRegExp;_645‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_645‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_645‍.w("./utils.js",[["stubString",["stubString"],function(v){stubString=v}]]);_645‍.w("../escapeRegExp.js",[["default",["escapeRegExp"],function(v){escapeRegExp=v}]]);




describe('escapeRegExp', function() {
  var escaped = '\\^\\$\\.\\*\\+\\?\\(\\)\\[\\]\\{\\}\\|\\\\',
      unescaped = '^$.*+?()[]{}|\\';

  it('should escape values', function() {
    assert.strictEqual(escapeRegExp(unescaped + unescaped), escaped + escaped);
  });

  it('should handle strings with nothing to escape', function() {
    assert.strictEqual(escapeRegExp('abc'), 'abc');
  });

  it('should return an empty string for empty values', function() {
    var values = [, null, undefined, ''],
        expected = lodashStable.map(values, stubString);

    var actual = lodashStable.map(values, function(value, index) {
      return index ? escapeRegExp(value) : escapeRegExp();
    });

    assert.deepStrictEqual(actual, expected);
  });
});
