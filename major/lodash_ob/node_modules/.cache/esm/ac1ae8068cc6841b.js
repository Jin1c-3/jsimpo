let isArrayLike,isIndex,isObject,eq;_8cc‍.x([["default",()=>_8cc‍.o]]);_8cc‍.w("../isArrayLike.js",[["default",["isArrayLike"],function(v){isArrayLike=v}]]);_8cc‍.w("./isIndex.js",[["default",["isIndex"],function(v){isIndex=v}]]);_8cc‍.w("../isObject.js",[["default",["isObject"],function(v){isObject=v}]]);_8cc‍.w("../eq.js",[["default",["eq"],function(v){eq=v}]]);




/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */

function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false
  }
  const type = typeof index
  if (type === 'number'
    ? (isArrayLike(object) && isIndex(index, object.length))
    : (type === 'string' && index in object)
  ) {
    return eq(object[index], value)
  }
  return false
}

_8cc‍.d(isIterateeCall);
