let assert,lodashStable,identity,MAX_MEMOIZE_SIZE,_memoizeCapped;_c27‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_c27‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_c27‍.w("./utils.js",[["identity",["identity"],function(v){identity=v}],["MAX_MEMOIZE_SIZE",["MAX_MEMOIZE_SIZE"],function(v){MAX_MEMOIZE_SIZE=v}]]);_c27‍.w("../.internal/memoizeCapped.js",[["default",["_memoizeCapped"],function(v){_memoizeCapped=v}]]);




describe('memoizeCapped', function() {
  var func = _memoizeCapped;

  it('should enforce a max cache size of `MAX_MEMOIZE_SIZE`', function() {
    if (func) {
      var memoized = func(identity),
          cache = memoized.cache;

      lodashStable.times(MAX_MEMOIZE_SIZE, memoized);
      assert.strictEqual(cache.size, MAX_MEMOIZE_SIZE);

      memoized(MAX_MEMOIZE_SIZE);
      assert.strictEqual(cache.size, 1);
    }
  });
});
