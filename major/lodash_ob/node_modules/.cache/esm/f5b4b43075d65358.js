let assert,lodashStable,falsey,args,slice,symbol,realm,isString;_75d‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_75d‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_75d‍.w("./utils.js",[["falsey",["falsey"],function(v){falsey=v}],["args",["args"],function(v){args=v}],["slice",["slice"],function(v){slice=v}],["symbol",["symbol"],function(v){symbol=v}],["realm",["realm"],function(v){realm=v}]]);_75d‍.w("../isString.js",[["default",["isString"],function(v){isString=v}]]);




describe('isString', function() {
  it('should return `true` for strings', function() {
    assert.strictEqual(isString('a'), true);
    assert.strictEqual(isString(Object('a')), true);
  });

  it('should return `false` for non-strings', function() {
    var expected = lodashStable.map(falsey, function(value) {
      return value === '';
    });

    var actual = lodashStable.map(falsey, function(value, index) {
      return index ? isString(value) : isString();
    });

    assert.deepStrictEqual(actual, expected);

    assert.strictEqual(isString(args), false);
    assert.strictEqual(isString([1, 2, 3]), false);
    assert.strictEqual(isString(true), false);
    assert.strictEqual(isString(new Date), false);
    assert.strictEqual(isString(new Error), false);
    assert.strictEqual(isString(_), false);
    assert.strictEqual(isString(slice), false);
    assert.strictEqual(isString({ '0': 1, 'length': 1 }), false);
    assert.strictEqual(isString(1), false);
    assert.strictEqual(isString(/x/), false);
    assert.strictEqual(isString(symbol), false);
  });

  it('should work with strings from another realm', function() {
    if (realm.string) {
      assert.strictEqual(isString(realm.string), true);
    }
  });
});
