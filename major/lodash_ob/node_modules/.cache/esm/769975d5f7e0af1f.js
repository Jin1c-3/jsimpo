let assert,lodashStable,weakSet,falsey,stubFalse,args,slice,set,symbol,realm,isWeakSet;_f7e‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_f7e‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_f7e‍.w("./utils.js",[["weakSet",["weakSet"],function(v){weakSet=v}],["falsey",["falsey"],function(v){falsey=v}],["stubFalse",["stubFalse"],function(v){stubFalse=v}],["args",["args"],function(v){args=v}],["slice",["slice"],function(v){slice=v}],["set",["set"],function(v){set=v}],["symbol",["symbol"],function(v){symbol=v}],["realm",["realm"],function(v){realm=v}]]);_f7e‍.w("../isWeakSet.js",[["default",["isWeakSet"],function(v){isWeakSet=v}]]);




describe('isWeakSet', function() {
  it('should return `true` for weak sets', function() {
    if (WeakSet) {
      assert.strictEqual(isWeakSet(weakSet), true);
    }
  });

  it('should return `false` for non weak sets', function() {
    var expected = lodashStable.map(falsey, stubFalse);

    var actual = lodashStable.map(falsey, function(value, index) {
      return index ? isWeakSet(value) : isWeakSet();
    });

    assert.deepStrictEqual(actual, expected);

    assert.strictEqual(isWeakSet(args), false);
    assert.strictEqual(isWeakSet([1, 2, 3]), false);
    assert.strictEqual(isWeakSet(true), false);
    assert.strictEqual(isWeakSet(new Date), false);
    assert.strictEqual(isWeakSet(new Error), false);
    assert.strictEqual(isWeakSet(_), false);
    assert.strictEqual(isWeakSet(slice), false);
    assert.strictEqual(isWeakSet({ 'a': 1 }), false);
    assert.strictEqual(isWeakSet(1), false);
    assert.strictEqual(isWeakSet(/x/), false);
    assert.strictEqual(isWeakSet('a'), false);
    assert.strictEqual(isWeakSet(set), false);
    assert.strictEqual(isWeakSet(symbol), false);
  });

  it('should work with weak sets from another realm', function() {
    if (realm.weakSet) {
      assert.strictEqual(isWeakSet(realm.weakSet), true);
    }
  });
});
