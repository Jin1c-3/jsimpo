let assert,lodashStable,args,falsey,slice,symbol,stubFalse,realm,isObjectLike;_91e‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_91e‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_91e‍.w("./utils.js",[["args",["args"],function(v){args=v}],["falsey",["falsey"],function(v){falsey=v}],["slice",["slice"],function(v){slice=v}],["symbol",["symbol"],function(v){symbol=v}],["stubFalse",["stubFalse"],function(v){stubFalse=v}],["realm",["realm"],function(v){realm=v}]]);_91e‍.w("../isObjectLike.js",[["default",["isObjectLike"],function(v){isObjectLike=v}]]);




describe('isObjectLike', function() {
  it('should return `true` for objects', function() {
    assert.strictEqual(isObjectLike(args), true);
    assert.strictEqual(isObjectLike([1, 2, 3]), true);
    assert.strictEqual(isObjectLike(Object(false)), true);
    assert.strictEqual(isObjectLike(new Date), true);
    assert.strictEqual(isObjectLike(new Error), true);
    assert.strictEqual(isObjectLike({ 'a': 1 }), true);
    assert.strictEqual(isObjectLike(Object(0)), true);
    assert.strictEqual(isObjectLike(/x/), true);
    assert.strictEqual(isObjectLike(Object('a')), true);
  });

  it('should return `false` for non-objects', function() {
    var values = falsey.concat(true, _, slice, 1, 'a', symbol),
        expected = lodashStable.map(values, stubFalse);

    var actual = lodashStable.map(values, function(value, index) {
      return index ? isObjectLike(value) : isObjectLike();
    });

    assert.deepStrictEqual(actual, expected);
  });

  it('should work with objects from another realm', function() {
    if (realm.object) {
      assert.strictEqual(isObjectLike(realm.boolean), true);
      assert.strictEqual(isObjectLike(realm.date), true);
      assert.strictEqual(isObjectLike(realm.number), true);
      assert.strictEqual(isObjectLike(realm.object), true);
      assert.strictEqual(isObjectLike(realm.regexp), true);
      assert.strictEqual(isObjectLike(realm.string), true);
    }
  });
});
