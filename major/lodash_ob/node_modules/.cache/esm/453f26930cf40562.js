let assert,MAX_INTEGER,MAX_ARRAY_LENGTH,toLength;_0cf‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_0cf‍.w("./utils.js",[["MAX_INTEGER",["MAX_INTEGER"],function(v){MAX_INTEGER=v}],["MAX_ARRAY_LENGTH",["MAX_ARRAY_LENGTH"],function(v){MAX_ARRAY_LENGTH=v}]]);_0cf‍.w("../toLength.js",[["default",["toLength"],function(v){toLength=v}]]);



describe('toLength', function() {
  it('should return a valid length', function() {
    assert.strictEqual(toLength(-1), 0);
    assert.strictEqual(toLength('1'), 1);
    assert.strictEqual(toLength(1.1), 1);
    assert.strictEqual(toLength(MAX_INTEGER), MAX_ARRAY_LENGTH);
  });

  it('should return `value` if a valid length', function() {
    assert.strictEqual(toLength(0), 0);
    assert.strictEqual(toLength(3), 3);
    assert.strictEqual(toLength(MAX_ARRAY_LENGTH), MAX_ARRAY_LENGTH);
  });

  it('should convert `-0` to `0`', function() {
    assert.strictEqual(1 / toLength(-0), Infinity);
  });
});
