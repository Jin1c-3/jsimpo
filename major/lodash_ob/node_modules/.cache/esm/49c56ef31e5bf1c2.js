let castSlice,hasUnicode,stringToArray;_1e5‍.x([["default",()=>_1e5‍.o]]);_1e5‍.w("./castSlice.js",[["default",["castSlice"],function(v){castSlice=v}]]);_1e5‍.w("./hasUnicode.js",[["default",["hasUnicode"],function(v){hasUnicode=v}]]);_1e5‍.w("./stringToArray.js",[["default",["stringToArray"],function(v){stringToArray=v}]]);



/**
 * Creates a function like `lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return (string) => {
    if (!string) {
      return ''
    }

    const strSymbols = hasUnicode(string)
      ? stringToArray(string)
      : undefined

    const chr = strSymbols
      ? strSymbols[0]
      : string[0]

    const trailing = strSymbols
      ? castSlice(strSymbols, 1).join('')
      : string.slice(1)

    return chr[methodName]() + trailing
  }
}

_1e5‍.d(createCaseFirst);
