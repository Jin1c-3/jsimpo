let assert,lodashStable,MAX_SAFE_INTEGER,stubTrue,stubFalse,isLength;_783‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_783‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_783‍.w("./utils.js",[["MAX_SAFE_INTEGER",["MAX_SAFE_INTEGER"],function(v){MAX_SAFE_INTEGER=v}],["stubTrue",["stubTrue"],function(v){stubTrue=v}],["stubFalse",["stubFalse"],function(v){stubFalse=v}]]);_783‍.w("../isLength.js",[["default",["isLength"],function(v){isLength=v}]]);




describe('isLength', function() {
  it('should return `true` for lengths', function() {
    var values = [0, 3, MAX_SAFE_INTEGER],
        expected = lodashStable.map(values, stubTrue),
        actual = lodashStable.map(values, isLength);

    assert.deepStrictEqual(actual, expected);
  });

  it('should return `false` for non-lengths', function() {
    var values = [-1, '1', 1.1, MAX_SAFE_INTEGER + 1],
        expected = lodashStable.map(values, stubFalse),
        actual = lodashStable.map(values, isLength);

    assert.deepStrictEqual(actual, expected);
  });
});
