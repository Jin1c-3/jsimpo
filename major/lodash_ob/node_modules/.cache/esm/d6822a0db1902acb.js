let assert,identity,noop,functions;_b19‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_b19‍.w("./utils.js",[["identity",["identity"],function(v){identity=v}],["noop",["noop"],function(v){noop=v}]]);_b19‍.w("../functions.js",[["default",["functions"],function(v){functions=v}]]);



describe('functions', function() {
  it('should return the function names of an object', function() {
    var object = { 'a': 'a', 'b': identity, 'c': /x/, 'd': noop },
        actual = functions(object).sort();

    assert.deepStrictEqual(actual, ['b', 'd']);
  });

  it('should not include inherited functions', function() {
    function Foo() {
      this.a = identity;
      this.b = 'b';
    }
    Foo.prototype.c = noop;

    assert.deepStrictEqual(functions(new Foo), ['a']);
  });
});
