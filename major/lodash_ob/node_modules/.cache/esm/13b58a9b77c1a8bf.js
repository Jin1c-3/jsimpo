let Stack,assignMergeValue,baseFor,baseMergeDeep,isObject,keysIn;_77c‍.x([["default",()=>_77c‍.o]]);_77c‍.w("./Stack.js",[["default",["Stack"],function(v){Stack=v}]]);_77c‍.w("./assignMergeValue.js",[["default",["assignMergeValue"],function(v){assignMergeValue=v}]]);_77c‍.w("./baseFor.js",[["default",["baseFor"],function(v){baseFor=v}]]);_77c‍.w("./baseMergeDeep.js",[["default",["baseMergeDeep"],function(v){baseMergeDeep=v}]]);_77c‍.w("../isObject.js",[["default",["isObject"],function(v){isObject=v}]]);_77c‍.w("../keysIn.js",[["default",["keysIn"],function(v){keysIn=v}]]);






/**
 * The base implementation of `merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return
  }
  baseFor(source, (srcValue, key) => {
    if (isObject(srcValue)) {
      stack || (stack = new Stack)
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack)
    }
    else {
      let newValue = customizer
        ? customizer(object[key], srcValue, `${key}`, object, source, stack)
        : undefined

      if (newValue === undefined) {
        newValue = srcValue
      }
      assignMergeValue(object, key, newValue)
    }
  }, keysIn)
}

_77c‍.d(baseMerge);
