let assert,lodashStable,arrayBuffer,falsey,stubFalse,args,slice,symbol,realm,isArrayBuffer;_d69‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_d69‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_d69‍.w("./utils.js",[["arrayBuffer",["arrayBuffer"],function(v){arrayBuffer=v}],["falsey",["falsey"],function(v){falsey=v}],["stubFalse",["stubFalse"],function(v){stubFalse=v}],["args",["args"],function(v){args=v}],["slice",["slice"],function(v){slice=v}],["symbol",["symbol"],function(v){symbol=v}],["realm",["realm"],function(v){realm=v}]]);_d69‍.w("../isArrayBuffer.js",[["default",["isArrayBuffer"],function(v){isArrayBuffer=v}]]);




describe('isArrayBuffer', function() {
  it('should return `true` for array buffers', function() {
    if (ArrayBuffer) {
      assert.strictEqual(isArrayBuffer(arrayBuffer), true);
    }
  });

  it('should return `false` for non array buffers', function() {
    var expected = lodashStable.map(falsey, stubFalse);

    var actual = lodashStable.map(falsey, function(value, index) {
      return index ? isArrayBuffer(value) : isArrayBuffer();
    });

    assert.deepStrictEqual(actual, expected);

    assert.strictEqual(isArrayBuffer(args), false);
    assert.strictEqual(isArrayBuffer([1]), false);
    assert.strictEqual(isArrayBuffer(true), false);
    assert.strictEqual(isArrayBuffer(new Date), false);
    assert.strictEqual(isArrayBuffer(new Error), false);
    assert.strictEqual(isArrayBuffer(_), false);
    assert.strictEqual(isArrayBuffer(slice), false);
    assert.strictEqual(isArrayBuffer({ 'a': 1 }), false);
    assert.strictEqual(isArrayBuffer(1), false);
    assert.strictEqual(isArrayBuffer(/x/), false);
    assert.strictEqual(isArrayBuffer('a'), false);
    assert.strictEqual(isArrayBuffer(symbol), false);
  });

  it('should work with array buffers from another realm', function() {
    if (realm.arrayBuffer) {
      assert.strictEqual(isArrayBuffer(realm.arrayBuffer), true);
    }
  });
});
