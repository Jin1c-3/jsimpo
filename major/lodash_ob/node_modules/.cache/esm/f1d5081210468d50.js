let assert,lodashStable,stubString,camelCase,capitalize,escape,kebabCase,lowerCase,lowerFirst,pad,padEnd,padStart,repeat,snakeCase,trim,trimStart,trimEnd,truncate,unescape,upperCase,upperFirst;_104‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_104‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_104‍.w("./utils.js",[["stubString",["stubString"],function(v){stubString=v}]]);_104‍.w("../camelCase.js",[["default",["camelCase"],function(v){camelCase=v}]]);_104‍.w("../capitalize.js",[["default",["capitalize"],function(v){capitalize=v}]]);_104‍.w("../escape.js",[["default",["escape"],function(v){escape=v}]]);_104‍.w("../kebabCase.js",[["default",["kebabCase"],function(v){kebabCase=v}]]);_104‍.w("../lowerCase.js",[["default",["lowerCase"],function(v){lowerCase=v}]]);_104‍.w("../lowerFirst.js",[["default",["lowerFirst"],function(v){lowerFirst=v}]]);_104‍.w("../pad.js",[["default",["pad"],function(v){pad=v}]]);_104‍.w("../padEnd.js",[["default",["padEnd"],function(v){padEnd=v}]]);_104‍.w("../padStart.js",[["default",["padStart"],function(v){padStart=v}]]);_104‍.w("../repeat.js",[["default",["repeat"],function(v){repeat=v}]]);_104‍.w("../snakeCase.js",[["default",["snakeCase"],function(v){snakeCase=v}]]);_104‍.w("../trim.js",[["default",["trim"],function(v){trim=v}]]);_104‍.w("../trimStart.js",[["default",["trimStart"],function(v){trimStart=v}]]);_104‍.w("../trimEnd.js",[["default",["trimEnd"],function(v){trimEnd=v}]]);_104‍.w("../truncate.js",[["default",["truncate"],function(v){truncate=v}]]);_104‍.w("../unescape.js",[["default",["unescape"],function(v){unescape=v}]]);_104‍.w("../upperCase.js",[["default",["upperCase"],function(v){upperCase=v}]]);_104‍.w("../upperFirst",[["default",["upperFirst"],function(v){upperFirst=v}]]);























const methods = {
  camelCase,
  capitalize,
  escape,
  kebabCase,
  lowerCase,
  lowerFirst,
  pad,
  padEnd,
  padStart,
  repeat,
  snakeCase,
  trim,
  trimStart,
  trimEnd,
  truncate,
  unescape,
  upperCase,
  upperFirst
}


describe('"Strings" category methods', function() {
  var stringMethods = [
    'camelCase',
    'capitalize',
    'escape',
    'kebabCase',
    'lowerCase',
    'lowerFirst',
    'pad',
    'padEnd',
    'padStart',
    'repeat',
    'snakeCase',    
    'trim',
    'trimEnd',
    'trimStart',
    'truncate',
    'unescape',
    'upperCase',
    'upperFirst'
  ];

  lodashStable.each(stringMethods, function(methodName) {
    var func = methods[methodName];

    it('`_.' + methodName + '` should return an empty string for empty values', function() {
      var values = [, null, undefined, ''],
          expected = lodashStable.map(values, stubString);

      var actual = lodashStable.map(values, function(value, index) {
        return index ? func(value) : func();
      });

      assert.deepStrictEqual(actual, expected);
    });
  });
});
