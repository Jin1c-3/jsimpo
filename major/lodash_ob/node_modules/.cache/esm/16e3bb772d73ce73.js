let assert,lodashStable,falsey,args,slice,symbol,realm,isBoolean;_2d7‍.w("assert",[["default",["assert"],function(v){assert=v}]]);_2d7‍.w("lodash",[["default",["lodashStable"],function(v){lodashStable=v}]]);_2d7‍.w("./utils.js",[["falsey",["falsey"],function(v){falsey=v}],["args",["args"],function(v){args=v}],["slice",["slice"],function(v){slice=v}],["symbol",["symbol"],function(v){symbol=v}],["realm",["realm"],function(v){realm=v}]]);_2d7‍.w("../isBoolean.js",[["default",["isBoolean"],function(v){isBoolean=v}]]);




describe('isBoolean', function() {
  it('should return `true` for booleans', function() {
    assert.strictEqual(isBoolean(true), true);
    assert.strictEqual(isBoolean(false), true);
    assert.strictEqual(isBoolean(Object(true)), true);
    assert.strictEqual(isBoolean(Object(false)), true);
  });

  it('should return `false` for non-booleans', function() {
    var expected = lodashStable.map(falsey, function(value) {
      return value === false;
    });

    var actual = lodashStable.map(falsey, function(value, index) {
      return index ? isBoolean(value) : isBoolean();
    });

    assert.deepStrictEqual(actual, expected);

    assert.strictEqual(isBoolean(args), false);
    assert.strictEqual(isBoolean([1, 2, 3]), false);
    assert.strictEqual(isBoolean(new Date), false);
    assert.strictEqual(isBoolean(new Error), false);
    assert.strictEqual(isBoolean(_), false);
    assert.strictEqual(isBoolean(slice), false);
    assert.strictEqual(isBoolean({ 'a': 1 }), false);
    assert.strictEqual(isBoolean(1), false);
    assert.strictEqual(isBoolean(/x/), false);
    assert.strictEqual(isBoolean('a'), false);
    assert.strictEqual(isBoolean(symbol), false);
  });

  it('should work with a boolean from another realm', function() {
    if (realm.boolean) {
      assert.strictEqual(isBoolean(realm.boolean), true);
    }
  });
});
