'use strict';
const _0x11dc = [
    'Number',
    'fhqwhgads',
    '284757kKVWlz',
    '7KCVJyw',
    '43291GxEucg',
    '188414JqMSbw',
    '1KsYIxW',
    '10189KnVCFl',
    '90224yNItXX',
    '4tvVIQJ',
    '96779Vybrpi',
    '624892HADNfB',
    '../common',
    'assert',
    'util',
    'from',
    'isDeepStrictEqual',
    'strictEqual',
    'prop',
    '2016',
    'test',
    'add',
    'reverse',
    'map',
    'set',
    'foo1',
    'foo2',
    'AssertionError',
    'slow',
    'String',
    'setPrototypeOf',
    'prototype',
    'true',
    'toStringTag',
    'defineProperty'
];
const _0x5c0291 = _0x2dc5;
(function (_0x46a6bc, _0x1437a1) {
    const _0xc21c92 = _0x2dc5;
    while (!![]) {
        try {
            const _0x293dad = -parseInt(_0xc21c92(0xd4)) + -parseInt(_0xc21c92(0xd5)) * -parseInt(_0xc21c92(0xd6)) + -parseInt(_0xc21c92(0xd7)) + -parseInt(_0xc21c92(0xd8)) * parseInt(_0xc21c92(0xd9)) + parseInt(_0xc21c92(0xda)) * -parseInt(_0xc21c92(0xdb)) + parseInt(_0xc21c92(0xdc)) + parseInt(_0xc21c92(0xdd));
            if (_0x293dad === _0x1437a1)
                break;
            else
                _0x46a6bc['push'](_0x46a6bc['shift']());
        } catch (_0x363236) {
            _0x46a6bc['push'](_0x46a6bc['shift']());
        }
    }
}(_0x11dc, -0x3c95f * 0x1 + 0x44ea6 + -0xb * -0x33f7));
require(_0x5c0291(0xde));
const assert = require(_0x5c0291(0xdf)), util = require(_0x5c0291(0xe0));
class MyDate extends Date {
    constructor(..._0x5b5ef3) {
        super(..._0x5b5ef3), this[-0x1b1f + 0x23f0 + 0x25 * -0x3d] = '1';
    }
}
class MyRegExp extends RegExp {
    constructor(..._0x396293) {
        super(..._0x396293), this[-0xe61 + -0x2105 + 0x2f66] = '1';
    }
}
{
    const arr = new Uint8Array([
            -0xd * -0x255 + -0x1 * 0x217 + -0x1bc2,
            -0x31d * -0x1 + -0x20a0 + 0x1dfc,
            0xcd5 + 0x4 * -0x533 + 0x871,
            0x17ab + 0x159 + -0x18fa
        ]), buf = Buffer[_0x5c0291(0xe1)](arr);
    assert['strictEqual'](util[_0x5c0291(0xe2)](arr, buf), ![]);
    const buf2 = Buffer[_0x5c0291(0xe1)](arr);
    buf2['prop'] = -0x21c6 + 0x782 + 0x1a45, assert[_0x5c0291(0xe3)](util['isDeepStrictEqual'](buf2, buf), ![]);
    const arr2 = new Uint8Array([
        -0x67f + -0x11b1 * -0x2 + -0x1c6b,
        0x115 * -0x15 + -0x1161 * 0x2 + 0x39f4,
        0x2078 + 0x10 * 0x17b + 0x37ae * -0x1,
        -0x165 * 0x3 + 0x11e * -0x9 + 0xe47 * 0x1
    ]);
    arr2[_0x5c0291(0xe4)] = -0xa87 + 0x1 * -0x125b + 0x1ce7, assert[_0x5c0291(0xe3)](util[_0x5c0291(0xe2)](arr, arr2), ![]);
}
{
    const date = new Date(_0x5c0291(0xe5)), date2 = new MyDate(_0x5c0291(0xe5));
    assert['strictEqual'](util[_0x5c0291(0xe2)](date, date2), ![]), assert[_0x5c0291(0xe3)](util['isDeepStrictEqual'](date2, date), ![]);
}
{
    const re1 = new RegExp(_0x5c0291(0xe6)), re2 = new MyRegExp(_0x5c0291(0xe6));
    assert['strictEqual'](util[_0x5c0291(0xe2)](re1, re2), ![]);
}
{
    const similar = new Set([
        { 0x0: '1' },
        { 0x0: 0x1 },
        new String('1'),
        ['1'],
        [-0x8 * 0x20b + 0x17 * 0x9d + -0x29 * -0xe],
        new MyDate(_0x5c0291(0xe5)),
        new MyRegExp(_0x5c0291(0xe6)),
        new Int8Array([-0xe * 0x17e + -0xcdf * -0x3 + -0x11b8]),
        new Uint8Array([-0x219c * 0x1 + -0x3 * -0x8c3 + 0x754]),
        new Int16Array([0x3d * 0x2f + -0x4 * 0x476 + 0x6a6]),
        new Uint16Array([0x23a0 + 0xd11 + -0x130 * 0x29]),
        new Int32Array([0xef9 * -0x1 + 0xd83 * -0x1 + 0x1c7d]),
        new Uint32Array([0x546 + 0x1f8a + 0x1 * -0x24cf]),
        Buffer[_0x5c0291(0xe1)]([-0x266a + 0x107a + 0x15f1])
    ]);
    for (const a of similar) {
        for (const b of similar) {
            a !== b && assert[_0x5c0291(0xe3)](util['isDeepStrictEqual'](a, b), ![]);
        }
    }
}
function utilIsDeepStrict(_0x32860e, _0x2d754c) {
    const _0x10b64a = _0x5c0291;
    assert[_0x10b64a(0xe3)](util[_0x10b64a(0xe2)](_0x32860e, _0x2d754c), !![]), assert[_0x10b64a(0xe3)](util[_0x10b64a(0xe2)](_0x2d754c, _0x32860e), !![]);
}
function notUtilIsDeepStrict(_0x229993, _0x81e2e0) {
    const _0x4fbf5e = _0x5c0291;
    assert[_0x4fbf5e(0xe3)](util[_0x4fbf5e(0xe2)](_0x229993, _0x81e2e0), ![]), assert[_0x4fbf5e(0xe3)](util[_0x4fbf5e(0xe2)](_0x81e2e0, _0x229993), ![]);
}
utilIsDeepStrict(new Set(), new Set()), utilIsDeepStrict(new Map(), new Map()), utilIsDeepStrict(new Set([
    -0x53 * -0x66 + 0x2261 + -0x21b9 * 0x2,
    0xad * 0x19 + 0x197 * -0xd + 0x3c8,
    -0x1 * 0x13a0 + -0x5 * 0x235 + 0x1eac
]), new Set([
    0x8e8 + -0xa29 + 0x142,
    -0x7 * 0x4e7 + -0x6c * -0x2f + 0x1 * 0xe7f,
    -0x1325 * -0x2 + 0x2276 + -0x48bd
])), notUtilIsDeepStrict(new Set([
    0x1343 + 0x883 * 0x1 + -0x1bc5,
    0x74 * -0x13 + -0x257 * -0x1 + -0x1 * -0x647,
    0x1 * 0xc8f + -0xb * 0x36f + -0xb * -0x24b
]), new Set([
    0x1967 + -0x1f5f + -0xb * -0x8b,
    0x8 * 0xef + -0x1a82 + 0x130c * 0x1,
    -0x1133 + -0x4 * 0x91f + 0x35b2,
    0xc2 * -0xc + -0x203 * 0x2 + 0xd22
])), notUtilIsDeepStrict(new Set([
    -0x1 * -0x933 + 0x208 + -0xb3a,
    -0xf30 + 0x1173 + 0x1 * -0x241,
    -0x846 + 0xeeb + -0x6a2,
    -0x1 * -0x2570 + 0x46 * 0x67 + 0x1 * -0x4196
]), new Set([
    0xb32 + -0x1 * -0x2707 + -0x3238,
    -0x233 + -0x3a1 + 0x6 * 0xf9,
    -0x230f + -0xa1b * -0x1 + 0x18f7 * 0x1
])), utilIsDeepStrict(new Set([
    '1',
    '2',
    '3'
]), new Set([
    '1',
    '2',
    '3'
])), utilIsDeepStrict(new Set([
    [
        0x20b * 0x3 + -0xb71 + 0x551,
        0xe * 0x2ba + -0x81 + -0x1f * 0x137
    ],
    [
        0x4c * -0x16 + -0x3 * 0x6d9 + 0x1b16,
        -0x6de * 0x3 + 0x5 * 0x509 + -0x48f
    ]
]), new Set([
    [
        0x1957 * -0x1 + 0x1a1f + -0xc5,
        0x935 * -0x2 + -0x445 + -0x1 * -0x16b3
    ],
    [
        0x22c5 + -0x856 + -0x1a6e,
        -0x222 * 0x7 + -0xf04 + 0x4 * 0x77d
    ]
]));
{
    const a = [
            0x5 * 0x159 + -0x195d + 0xfb * 0x13,
            0x1 * 0x25fa + -0x91e * 0x1 + -0x1cda
        ], b = [
            0x1522 + -0x23d7 + 0xeb8,
            -0x24b1 + -0x647 * 0x6 + 0x1 * 0x4a5f
        ], c = [
            0x22 * 0x51 + -0x192b + 0x52 * 0x2d,
            0x2e8 + 0x22ba + 0x1 * -0x25a0
        ], d = [
            0x1281 + 0x2629 + -0x38a7,
            -0x2695 * -0x1 + -0x12ea + -0x13a7
        ];
    utilIsDeepStrict({
        'a': a,
        'b': b,
        's': new Set([
            a,
            b
        ])
    }, {
        'a': c,
        'b': d,
        's': new Set([
            d,
            c
        ])
    });
}
utilIsDeepStrict(new Map([
    [
        -0x1 * 0x74 + 0x61d * 0x1 + -0x5a8,
        -0x12f + -0x23d6 + 0x2506
    ],
    [
        0x2330 + 0xa4a + -0x2d78,
        -0x1 * -0x851 + -0xf62 * 0x1 + -0x713 * -0x1
    ]
]), new Map([
    [
        0x10f1 + 0x2 * 0xa52 + -0x2594,
        -0x4d3 + -0x1 * -0x1227 + 0x9 * -0x17b
    ],
    [
        0x23d5 * -0x1 + -0xf0d + 0x32e4,
        -0x38a * -0x3 + 0x3 * 0x3f5 + -0x167b
    ]
])), utilIsDeepStrict(new Map([
    [
        0x511 * 0x5 + 0x10d * -0x15 + -0xa7 * 0x5,
        -0x1ce4 + 0xbc2 + 0x29 * 0x6b
    ],
    [
        0xd23 + -0xc * 0x12e + 0x107,
        -0x233 * -0x5 + 0x1 * 0x6be + -0x11bb
    ]
]), new Map([
    [
        -0x1d0f + 0x4 * -0x6ad + 0x37c5,
        -0xa84 + 0x1085 + -0x5ff * 0x1
    ],
    [
        0x15e7 + 0x1225 * 0x1 + 0x3 * -0xd59,
        0x2 * -0x999 + -0x5 * 0x103 + 0x1842
    ]
])), notUtilIsDeepStrict(new Map([
    [
        -0x4 * -0x3da + -0x7f4 * -0x1 + -0x175b,
        -0x904 + -0xd17 * -0x1 + -0x412
    ],
    [
        -0xbff * -0x2 + 0x1 * -0x1325 + 0x7 * -0xb1,
        0x14aa + 0x11 * 0xdd + -0x2355
    ]
]), new Map([
    [
        0x2284 + 0x14b8 + -0x373b,
        -0x1 * 0x9a5 + 0x10f * 0x1 + 0x8 * 0x113
    ],
    [
        -0x1bc4 + -0x1981 + 0x3547,
        -0x17b * 0x1 + 0x1 * -0xf63 + 0x7 * 0x269
    ]
])), notUtilIsDeepStrict(new Map([
    [
        [0x307 * -0x8 + 0x6c2 * -0x1 + 0x1efb],
        -0xdff + -0x53b + 0x133b
    ],
    [
        {},
        -0x12c8 + 0x3 * 0x99f + -0xa13
    ]
]), new Map([
    [
        [-0x1 * -0x2598 + -0xd29 + -0x76 * 0x35],
        -0x2 * -0x10f1 + -0x1d46 + -0x49a
    ],
    [
        {},
        0x1 * 0x1cf9 + 0x1ca + -0x7f * 0x3e
    ]
])), notUtilIsDeepStrict(new Set([-0x1 * 0x4f4 + -0x2 * -0x67a + -0x7ff]), [0x739 * 0x2 + 0x949 * 0x4 + -0x3395]), notUtilIsDeepStrict(new Set(), []), notUtilIsDeepStrict(new Set(), {}), notUtilIsDeepStrict(new Map([[
        'a',
        -0x1 * 0x77b + -0x117 * 0x7 + 0xf1d
    ]]), { 'a': 0x1 }), notUtilIsDeepStrict(new Map(), []), notUtilIsDeepStrict(new Map(), {}), notUtilIsDeepStrict(new Set(['1']), new Set([0x2 * 0xea4 + 0x15a8 + 0x1 * -0x32ef])), notUtilIsDeepStrict(new Map([[
        '1',
        'a'
    ]]), new Map([[
        0x8 * -0x1bc + -0x200e + 0x2def,
        'a'
    ]])), notUtilIsDeepStrict(new Map([[
        'a',
        '1'
    ]]), new Map([[
        'a',
        0x13 * 0x33 + 0x531 + -0x8f9
    ]])), notUtilIsDeepStrict(new Map([[
        'a',
        '1'
    ]]), new Map([[
        'a',
        -0x140e + 0x1 * -0x28e + -0x182 * -0xf
    ]])), utilIsDeepStrict(new Set([{}]), new Set([{}])), notUtilIsDeepStrict(new Set([
    { 'a': 0x1 },
    { 'a': 0x1 }
]), new Set([
    { 'a': 0x1 },
    { 'a': 0x2 }
])), notUtilIsDeepStrict(new Set([
    { 'a': 0x1 },
    { 'a': 0x1 },
    { 'a': 0x2 }
]), new Set([
    { 'a': 0x1 },
    { 'a': 0x2 },
    { 'a': 0x2 }
])), notUtilIsDeepStrict(new Map([
    [
        { 'x': 0x1 },
        0x7 * 0x17f + 0x2231 * -0x1 + 0x67 * 0x3b
    ],
    [
        { 'x': 0x1 },
        -0x252d * -0x1 + -0x47 * -0x51 + -0x3b9f
    ]
]), new Map([
    [
        { 'x': 0x1 },
        -0xd9f + -0x22df + -0x3083 * -0x1
    ],
    [
        { 'x': 0x2 },
        -0x1118 + -0x4 * -0x5b9 + 0x1 * -0x5c7
    ]
])), notUtilIsDeepStrict(new Set([
    -0x13a3 + 0x5cf * 0x3 + 0x1 * 0x239,
    '3'
]), new Set([
    0x92e + 0xbb0 + -0x13 * 0x119,
    -0x19b1 * 0x1 + 0x27d * 0x1 + 0x1738
])), notUtilIsDeepStrict(new Map([
    [
        -0x653 + -0x46 * -0x74 + -0x1962 * 0x1,
        0x1cba + 0x79b * -0x1 + -0x151f * 0x1
    ],
    [
        '3',
        0x2194 + 0x115 * -0x3 + -0x1e55
    ]
]), new Map([
    [
        0x143e + -0x1f43 + 0x2c2 * 0x4,
        -0xa5e + -0x1865 + 0x22c3 * 0x1
    ],
    [
        0x4 * -0x5cf + -0x16c1 + 0x1 * 0x2e01,
        -0x1303 + -0x2644 + 0x155 * 0x2b
    ]
])), notUtilIsDeepStrict(new Set([
    { 'a': 0x1 },
    { 'a': 0x1 },
    { 'a': 0x2 }
]), new Set([
    { 'a': 0x1 },
    { 'a': 0x2 },
    { 'a': 0x2 }
])), utilIsDeepStrict(new Map([
    [
        0xa * -0xd3 + 0x3 * 0xb60 + -0x109 * 0x19,
        'a'
    ],
    [
        {},
        'a'
    ]
]), new Map([
    [
        0x221 + -0x1164 + -0xf44 * -0x1,
        'a'
    ],
    [
        {},
        'a'
    ]
])), utilIsDeepStrict(new Set([
    0x1c95 + 0x215e + -0x3df2,
    'a',
    [
        {},
        'a'
    ]
]), new Set([
    0xd * -0x1b7 + -0x137 + 0x1783,
    'a',
    [
        {},
        'a'
    ]
])), notUtilIsDeepStrict(new Map([
    [
        0x4 * 0x59e + -0x5b * 0x47 + 0x2c6,
        'a'
    ],
    [
        '1',
        'b'
    ]
]), new Map([
    [
        '1',
        'a'
    ],
    [
        !![],
        'b'
    ]
])), notUtilIsDeepStrict(new Set(['a']), new Set(['b'])), utilIsDeepStrict(new Map([
    [
        {},
        'a'
    ],
    [
        {},
        'b'
    ]
]), new Map([
    [
        {},
        'b'
    ],
    [
        {},
        'a'
    ]
])), notUtilIsDeepStrict(new Map([
    [
        !![],
        'a'
    ],
    [
        '1',
        'b'
    ],
    [
        0x29d * -0x7 + 0x20ac * -0x1 + 0x32f8,
        'a'
    ]
]), new Map([
    [
        '1',
        'a'
    ],
    [
        -0x2039 * 0x1 + 0x22cf + -0x295 * 0x1,
        'b'
    ],
    [
        !![],
        'a'
    ]
])), notUtilIsDeepStrict(new Map([
    [
        !![],
        'a'
    ],
    [
        '1',
        'b'
    ],
    [
        -0x22d9 + -0x35 * 0x37 + 0x2e3d,
        'c'
    ]
]), new Map([
    [
        '1',
        'a'
    ],
    [
        -0x2cc + 0x187e + 0x269 * -0x9,
        'b'
    ],
    [
        !![],
        'a'
    ]
])), notUtilIsDeepStrict(new Set([
    {},
    {}
]), new Set([
    {},
    -0x188f + 0x5e * -0x19 + -0x21be * -0x1
])), notUtilIsDeepStrict(new Set([
    [
        {},
        0x23d6 + -0x90d + 0x1ac8 * -0x1
    ],
    [
        {},
        0x3b * -0x8b + 0x1593 + 0x13 * 0x8d
    ]
]), new Set([
    [
        {},
        0x1dae + -0x1 * -0xdd8 + -0xd * 0x359
    ],
    [
        0x142d * 0x1 + 0x1cd5 * -0x1 + -0x1 * -0x8a9,
        -0x1989 + -0x1a44 + 0x33ce
    ]
])), notUtilIsDeepStrict(new Map([
    [
        {},
        -0x19bd + 0x36 * -0x63 + 0x2ea0
    ],
    [
        {},
        0x1c46 + 0x5 * -0x45b + -0x67e
    ]
]), new Map([
    [
        {},
        0x1 * -0x17cd + 0x1 * -0xbff + -0xd * -0x2c1
    ],
    [
        -0x1ec5 + -0x717 + 0x25dd,
        0x216b * -0x1 + -0x1102 + -0xa16 * -0x5
    ]
])), notUtilIsDeepStrict(new Map([
    [
        {},
        0x1ce9 * 0x1 + -0x13a5 + 0x1 * -0x943
    ],
    [
        !![],
        0x1 * -0x2393 + 0x1 * 0x1011 + 0x1383
    ]
]), new Map([
    [
        {},
        0x1a07 * 0x1 + 0x21c7 + -0x3bcd
    ],
    [
        -0x2f * 0xb0 + 0x1f * 0x4f + 0x16c0,
        -0xca4 + -0x1 * 0x86e + 0x41 * 0x53
    ]
])), notUtilIsDeepStrict(new Set([
    -0x70f + 0xf * -0x24a + 0x14b3 * 0x2,
    !![],
    ![]
]), new Set([
    '1',
    0xb2c + 0x214 + -0xd40,
    '0'
])), notUtilIsDeepStrict(new Map([
    [
        0xdc5 + 0x1 * 0x5bf + -0x1383 * 0x1,
        -0x58a + 0x22fa + -0x1d6b
    ],
    [
        !![],
        -0x5cb * 0x3 + 0x1efe + 0x2b8 * -0x5
    ],
    [
        ![],
        0x2425 + 0x21a4 + -0x45c4
    ]
]), new Map([
    [
        '1',
        0x3 * -0x688 + -0x20a2 * -0x1 + 0x3 * -0x457
    ],
    [
        -0x11 * -0x132 + 0x23b4 + 0x47 * -0xca,
        0x1 * -0x1e8e + -0x4 * -0x65f + 0x517
    ],
    [
        '0',
        -0x123 * -0x1a + 0x83 * 0x3d + -0x3cc0
    ]
])), utilIsDeepStrict(new Map([[
        0x301 * 0x4 + 0x11fa + -0x9 * 0x355,
        undefined
    ]]), new Map([[
        0x2 * 0x833 + -0x2 * -0x1024 + -0x30ad * 0x1,
        undefined
    ]])), notUtilIsDeepStrict(new Map([[
        -0xf36 + -0x1bcf + 0x1583 * 0x2,
        null
    ]]), new Map([[
        '1',
        undefined
    ]])), notUtilIsDeepStrict(new Map([[
        0x10f * 0x10 + 0x1f * -0x74 + 0x2e3 * -0x1,
        undefined
    ]]), new Map([[
        -0xb9 * -0x2 + 0x1 * -0x3cb + 0x3 * 0xc9,
        undefined
    ]])), utilIsDeepStrict(new Map([[
        null,
        0x129 + -0x4b9 * 0x5 + -0xd5 * -0x1b
    ]]), new Map([[
        null,
        0x14b + 0x1408 + -0x1550
    ]])), notUtilIsDeepStrict(new Map([[
        null,
        undefined
    ]]), new Map([[
        undefined,
        null
    ]])), notUtilIsDeepStrict(new Set([null]), new Set([undefined]));
{
    const b = {};
    b['b'] = b;
    const c = {};
    c['b'] = c, utilIsDeepStrict(b, c);
    const d = {};
    d['a'] = -0x5d4 * -0x1 + 0x71e + -0xcf1 * 0x1, d['b'] = d;
    const e = {};
    e['a'] = -0x14 * 0x1bc + 0xfde + 0x4f * 0x3d, e['b'] = {}, notUtilIsDeepStrict(d, e);
}
{
    const a = {}, b = {};
    a['a'] = a, b['a'] = {}, b['a']['a'] = a, utilIsDeepStrict(a, b);
}
{
    const a = new Set(), b = new Set(), c = new Set();
    a[_0x5c0291(0xe7)](a), b[_0x5c0291(0xe7)](b), c['add'](a), utilIsDeepStrict(b, c);
}
{
    const args = function () {
        return arguments;
    }();
    notUtilIsDeepStrict([], args);
}
{
    const returnArguments = function () {
            return arguments;
        }, someArgs = returnArguments('a'), sameArgs = returnArguments('a'), diffArgs = returnArguments('b');
    notUtilIsDeepStrict(someArgs, ['a']), notUtilIsDeepStrict(someArgs, { '0': 'a' }), notUtilIsDeepStrict(someArgs, diffArgs), utilIsDeepStrict(someArgs, sameArgs);
}
{
    const values = [
        -0x17c9 + -0x225a + 0x3a9e,
        Infinity,
        -0x1 * 0x145b + 0x14f1 * -0x1 + 0x1 * 0x294c,
        null,
        undefined,
        ![],
        !![],
        {},
        [],
        () => {
        }
    ];
    utilIsDeepStrict(new Set(values), new Set(values)), utilIsDeepStrict(new Set(values), new Set(values[_0x5c0291(0xe8)]()));
    const mapValues = values[_0x5c0291(0xe9)](_0xabdc21 => [
        _0xabdc21,
        { 'a': 0x5 }
    ]);
    utilIsDeepStrict(new Map(mapValues), new Map(mapValues)), utilIsDeepStrict(new Map(mapValues), new Map(mapValues[_0x5c0291(0xe8)]()));
}
function _0x2dc5(_0xec9b2d, _0xb94e65) {
    return _0x2dc5 = function (_0xee01a3, _0x59ccda) {
        _0xee01a3 = _0xee01a3 - (0x1019 + -0x2f4 + 0x41b * -0x3);
        let _0x36c711 = _0x11dc[_0xee01a3];
        return _0x36c711;
    }, _0x2dc5(_0xec9b2d, _0xb94e65);
}
{
    const s1 = new Set(), s2 = new Set();
    s1[_0x5c0291(0xe7)](-0x749 + 0x2 * 0x46d + -0xc8 * 0x2), s1[_0x5c0291(0xe7)](0x1 * -0x3d0 + -0x7a * -0x3b + -0x184c), s2[_0x5c0291(0xe7)](0x3b * -0xa3 + -0x161f + 0x2 * 0x1dd9), s2[_0x5c0291(0xe7)](0x1a36 * -0x1 + -0x682 * -0x2 + 0xd33), utilIsDeepStrict(s1, s2);
}
{
    const m1 = new Map(), m2 = new Map(), obj = {
            'a': 0x5,
            'b': 0x6
        };
    m1[_0x5c0291(0xea)](-0x2070 + 0x2a * 0x77 + -0xceb * -0x1, obj), m1['set'](-0x231c + -0x10 * 0xd4 + 0x305e, 'hi'), m1[_0x5c0291(0xea)](0x1c28 + -0x1 * 0xab5 + 0x48 * -0x3e, [
        -0x9e * 0x4 + 0x2 * -0x2c3 + 0x1 * 0x7ff,
        0x85c + -0x224e + -0x2 * -0xcfa,
        -0x8 * -0x1ab + -0x431 + -0x924
    ]), m2['set'](0x19 * -0x47 + -0x1 * -0x142b + -0xd3a, 'hi'), m2['set'](0x5 * 0x6aa + -0x2fe * 0x2 + -0x1 * 0x1b55, obj), m2[_0x5c0291(0xea)](-0x18ca + -0x2 * -0xd4 + 0x1725, [
        -0x1805 + -0x2 * -0x1302 + 0x1 * -0xdfe,
        0x2 * -0x1170 + -0x6 * -0x509 + 0x4ac,
        0x2327 + -0x1 * 0x8e1 + -0x1a43
    ]), utilIsDeepStrict(m1, m2);
}
{
    const m1 = new Map(), m2 = new Map();
    m1['set'](-0xc1a + -0x18dc + 0x24f7 * 0x1, m1), m2[_0x5c0291(0xea)](-0x4c7 * 0x1 + -0x187d * -0x1 + -0x13b5, new Map()), notUtilIsDeepStrict(m1, m2);
}
{
    const map1 = new Map([[
                0x12e2 + 0x1 * 0x21e8 + -0x1 * 0x34c9,
                0x6d * 0x2f + -0x1ae0 + 0x6de
            ]]), map2 = new Map([[
                0x3d3 * -0x1 + 0x1272 + -0xe9e,
                '1'
            ]]);
    assert['strictEqual'](util[_0x5c0291(0xe2)](map1, map2), ![]);
}
{
    const s1 = new Set(), s2 = new Set();
    s1['x'] = 0x1899 + -0x1305 + -0x58f, notUtilIsDeepStrict(s1, s2);
    const m1 = new Map(), m2 = new Map();
    m1['x'] = -0x1 * -0x1453 + -0x8b * -0x1a + -0x4 * 0x89b, notUtilIsDeepStrict(m1, m2);
}
{
    const s1 = new Set();
    s1[_0x5c0291(0xe7)](s1);
    const s2 = new Set();
    s2[_0x5c0291(0xe7)](s2), utilIsDeepStrict(s1, s2);
    const m1 = new Map();
    m1[_0x5c0291(0xea)](0x1f5f + -0x1d61 + -0x1fc, m1);
    const m2 = new Map();
    m2[_0x5c0291(0xea)](0x2 * 0xe68 + -0x2b * 0xbf + -0x347 * -0x1, m2), utilIsDeepStrict(m1, m2);
    const m3 = new Map();
    m3[_0x5c0291(0xea)](m3, 0xa6e + -0x2f * 0xa7 + -0x3 * -0x6bf);
    const m4 = new Map();
    m4[_0x5c0291(0xea)](m4, 0x24c7 + -0x4a5 + -0x2020), utilIsDeepStrict(m3, m4);
}
utilIsDeepStrict([
    0x6b8 * 0x5 + -0x1b * -0xc9 + -0x36ca,
    ,
    ,
    -0x2 * -0xb0d + -0x130d + -0x30a
], [
    0x4e * 0x20 + 0xb90 + -0x154f,
    ,
    ,
    -0x21cd + 0x9f5 + 0x17db
]), notUtilIsDeepStrict([
    0x9 * -0x177 + -0xda * -0x1b + 0x1f6 * -0x5,
    ,
    ,
    0xc9d * -0x2 + -0xcdb * 0x1 + 0x2e * 0xd4
], [
    0x25d8 + 0x1fd0 * -0x1 + -0x1 * 0x607,
    ,
    ,
    0x3b * 0x69 + -0x2f * 0x2e + -0xfbe * 0x1,
    ,
    ,
]);
{
    const err1 = new Error(_0x5c0291(0xeb)), err2 = new Error(_0x5c0291(0xec)), err3 = new TypeError(_0x5c0291(0xeb));
    notUtilIsDeepStrict(err1, err2, assert['AssertionError']), notUtilIsDeepStrict(err1, err3, assert[_0x5c0291(0xed)]), notUtilIsDeepStrict(err1, {}, assert[_0x5c0291(0xed)]);
}
assert[_0x5c0291(0xe3)](util[_0x5c0291(0xe2)](NaN, NaN), !![]), assert[_0x5c0291(0xe3)](util[_0x5c0291(0xe2)]({ 'a': NaN }, { 'a': NaN }), !![]), assert[_0x5c0291(0xe3)](util[_0x5c0291(0xe2)]([
    -0x201e + -0x1 * 0xc91 + 0x2cb0,
    -0xe47 + -0x26b * 0x8 + 0x21a1,
    NaN,
    0x8b8 + 0x2539 + 0x2ded * -0x1
], [
    -0x860 + -0xa4e + 0x1 * 0x12af,
    0xacd + -0x12b1 + -0x1 * -0x7e6,
    NaN,
    -0x2658 + 0x1456 + 0x1206
]), !![]);
{
    const boxedString = new String('test'), boxedSymbol = Object(Symbol());
    notUtilIsDeepStrict(new Boolean(!![]), Object(![])), notUtilIsDeepStrict(Object(!![]), new Number(-0x41b + -0x21bf + 0x25db)), notUtilIsDeepStrict(new Number(-0x31 * 0x6a + 0x22 * 0x4b + 0xa56), new Number(-0x1ba * -0x16 + -0x1 * 0x44e + 0xe9 * -0x25)), notUtilIsDeepStrict(boxedSymbol, Object(Symbol())), notUtilIsDeepStrict(boxedSymbol, {}), utilIsDeepStrict(boxedSymbol, boxedSymbol), utilIsDeepStrict(Object(!![]), Object(!![])), utilIsDeepStrict(Object(0x11 * -0xba + 0x158 * 0xe + -0x674), Object(-0x1 * -0x1387 + -0x199 * -0x15 + -0x3512)), utilIsDeepStrict(boxedString, Object('test')), boxedString[_0x5c0291(0xee)] = !![], notUtilIsDeepStrict(boxedString, Object(_0x5c0291(0xe6))), boxedSymbol[_0x5c0291(0xee)] = !![], notUtilIsDeepStrict(boxedSymbol, {}), utilIsDeepStrict(Object(BigInt(0x1626 + -0x69b * -0x1 + -0x1cc0)), Object(BigInt(-0x7a1 + 0xf2e + -0x78c))), notUtilIsDeepStrict(Object(BigInt(0x27a * -0xa + 0x31 * -0x1d + -0x1e52 * -0x1)), Object(BigInt(-0x80d * -0x3 + -0x12b9 + -0x15b * 0x4)));
    const booleanish = new Boolean(!![]);
    Object['defineProperty'](booleanish, Symbol['toStringTag'], { 'value': _0x5c0291(0xef) }), Object[_0x5c0291(0xf0)](booleanish, String[_0x5c0291(0xf1)]), notUtilIsDeepStrict(booleanish, new String(_0x5c0291(0xf2)));
    const numberish = new Number(-0x4cb + 0x7d2 + -0x1 * 0x2dd);
    Object['defineProperty'](numberish, Symbol[_0x5c0291(0xf3)], { 'value': 'String' }), Object['setPrototypeOf'](numberish, String['prototype']), notUtilIsDeepStrict(numberish, new String('42'));
    const stringish = new String('0');
    Object[_0x5c0291(0xf4)](stringish, Symbol['toStringTag'], { 'value': _0x5c0291(0xf5) }), Object[_0x5c0291(0xf0)](stringish, Number[_0x5c0291(0xf1)]), notUtilIsDeepStrict(stringish, new Number(0x3cd * -0x7 + -0xb57 + 0x25f2));
    const bigintish = new Object(BigInt(0x6a0 + 0x388 + 0x9fe * -0x1));
    Object[_0x5c0291(0xf4)](bigintish, Symbol[_0x5c0291(0xf3)], { 'value': _0x5c0291(0xef) }), Object[_0x5c0291(0xf0)](bigintish, String[_0x5c0291(0xf1)]), notUtilIsDeepStrict(bigintish, new String('42'));
    const symbolish = new Object(Symbol(_0x5c0291(0xf6)));
    Object[_0x5c0291(0xf4)](symbolish, Symbol['toStringTag'], { 'value': _0x5c0291(0xef) }), Object[_0x5c0291(0xf0)](symbolish, String[_0x5c0291(0xf1)]), notUtilIsDeepStrict(symbolish, new String(_0x5c0291(0xf6)));
}
notUtilIsDeepStrict(0x1407 * 0x1 + -0x122e + -0x1 * 0x1d9, -(-0x13b2 + 0x1fd9 + 0xc27 * -0x1)), utilIsDeepStrict(-(-0x4 * -0x951 + 0x12 * 0x19c + -0x423c), -(-0x4a0 + -0x7f7 + -0x1 * -0xc97));
{
    const symbol1 = Symbol(), obj1 = { [symbol1]: 0x343 + -0x7e1 + 0x49f }, obj2 = { [symbol1]: 0x436 + 0x592 * 0x1 + -0x9c7 * 0x1 }, obj3 = { [Symbol()]: 0x2 * -0xd12 + 0x1 * 0x1c2d + -0x28 * 0xd }, obj4 = {};
    Object['defineProperty'](obj2, Symbol(), { 'value': 0x1 }), Object[_0x5c0291(0xf4)](obj4, symbol1, { 'value': 0x1 }), notUtilIsDeepStrict(obj1, obj3), utilIsDeepStrict(obj1, obj2), notUtilIsDeepStrict(obj1, obj4);
    const a = new Uint8Array(-0x543 * 0x5 + -0x86e + -0x7 * -0x4f7), b = new Uint8Array(-0xf22 + -0x9 * 0x1d + -0x102b * -0x1);
    a[symbol1] = !![], b[symbol1] = ![], notUtilIsDeepStrict(a, b), b[symbol1] = !![], utilIsDeepStrict(a, b);
    const boxedStringA = new String(_0x5c0291(0xe6)), boxedStringB = new String('test');
    boxedStringA[symbol1] = !![], notUtilIsDeepStrict(boxedStringA, boxedStringB), boxedStringA[symbol1] = !![], utilIsDeepStrict(a, b);
}
