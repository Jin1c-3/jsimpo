{
    "type": "Program",
    "body": [
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                            "type": "ArrayExpression",
                            "elements": []
                        },
                        "prefix": true
                    },
                    "prefix": true
                },
                "right": {
                    "type": "CallExpression",
                    "callee": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "require"
                                        },
                                        "arguments": [
                                            {
                                                "type": "Literal",
                                                "value": "a",
                                                "raw": "'a'"
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    },
                    "arguments": []
                }
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                    },
                    "prefix": true
                },
                "right": {
                    "type": "CallExpression",
                    "callee": {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                        {
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "_0x4de16c"
                                            },
                                            "init": {
                                                "type": "Literal",
                                                "value": 10,
                                                "raw": "0xa"
                                            }
                                        }
                                    ],
                                    "kind": "var"
                                },
                                {
                                    "type": "SwitchStatement",
                                    "discriminant": {
                                        "type": "Identifier",
                                        "name": "_0x4de16c"
                                    },
                                    "cases": [
                                        {
                                            "type": "SwitchCase",
                                            "test": {
                                                "type": "Literal",
                                                "value": 1,
                                                "raw": "0x1"
                                            },
                                            "consequent": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "require"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "b",
                                                                "raw": "'b'"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "BreakStatement",
                                                    "label": null
                                                }
                                            ]
                                        },
                                        {
                                            "type": "SwitchCase",
                                            "test": null,
                                            "consequent": [
                                                {
                                                    "type": "BreakStatement",
                                                    "label": null
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    },
                    "arguments": []
                }
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "qqq"
            },
            "params": [],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "require"
                            },
                            "arguments": [
                                {
                                    "type": "Literal",
                                    "value": "c",
                                    "raw": "'c'"
                                }
                            ]
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        }
    ],
    "sourceType": "script"
}