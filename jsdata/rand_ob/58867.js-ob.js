const _0xf735 = [
    '770690WnPqLj',
    '1XKSqDy',
    'NumberFormat',
    'standard',
    'resolvedOptions',
    'notation',
    'percent',
    '987,654,321',
    '9.877E8',
    'engineering',
    'compact',
    '988M',
    'short',
    'long',
    'compactDisplay',
    'format',
    '988\u00a0Mio.',
    '99\u00a0Mio.',
    '98.765',
    '9876',
    '988\x20Millionen',
    '99\x20Millionen',
    '99\x20Tausend',
    '9,9\x20Tausend',
    'zh-TW',
    '9877萬',
    '9.9億',
    '9.9萬',
    '9877万',
    '9.9万',
    '9.9억',
    '9877만',
    '9.9만',
    '9.9천',
    '987',
    '7qyEivn',
    '19469ghIvHT',
    '492904VIvlTm',
    '316886ZKLMBe',
    '39SdmwXf',
    '12951ywSyAx',
    '456873EORcRV',
    '123516irRbXg'
];
const _0x2919a1 = _0x555f;
(function (_0x5e0050, _0x4b0f31) {
    const _0x5012ec = _0x555f;
    while (!![]) {
        try {
            const _0x183a57 = parseInt(_0x5012ec(0x133)) * parseInt(_0x5012ec(0x134)) + -parseInt(_0x5012ec(0x135)) + parseInt(_0x5012ec(0x136)) + parseInt(_0x5012ec(0x137)) * parseInt(_0x5012ec(0x138)) + parseInt(_0x5012ec(0x139)) + parseInt(_0x5012ec(0x13a)) + -parseInt(_0x5012ec(0x13b)) * parseInt(_0x5012ec(0x13c));
            if (_0x183a57 === _0x4b0f31)
                break;
            else
                _0x5e0050['push'](_0x5e0050['shift']());
        } catch (_0x29a743) {
            _0x5e0050['push'](_0x5e0050['shift']());
        }
    }
}(_0xf735, 0x16 * -0x5209 + 0x2d505 + -0x5 * -0x1aed6));
let nf = new Intl[(_0x2919a1(0x13d))]();
assertEquals(_0x2919a1(0x13e), nf[_0x2919a1(0x13f)]()[_0x2919a1(0x140)]), nf = new Intl[(_0x2919a1(0x13d))]('en'), assertEquals(_0x2919a1(0x13e), nf[_0x2919a1(0x13f)]()['notation']), nf = new Intl[(_0x2919a1(0x13d))]('en', { 'style': _0x2919a1(0x141) }), assertEquals(_0x2919a1(0x13e), nf['resolvedOptions']()['notation']);
const testData = [
    [
        _0x2919a1(0x13e),
        undefined,
        _0x2919a1(0x142)
    ],
    [
        'scientific',
        undefined,
        _0x2919a1(0x143)
    ],
    [
        _0x2919a1(0x144),
        undefined,
        '987.654E6'
    ],
    [
        _0x2919a1(0x145),
        undefined,
        _0x2919a1(0x146)
    ],
    [
        _0x2919a1(0x145),
        _0x2919a1(0x147),
        _0x2919a1(0x146)
    ],
    [
        _0x2919a1(0x145),
        _0x2919a1(0x148),
        '988\x20million'
    ]
];
function _0x555f(_0x476eb7, _0x2884a1) {
    return _0x555f = function (_0x479255, _0x4cb69b) {
        _0x479255 = _0x479255 - (0x1e4d + 0x20b * 0x3 + -0x233b);
        let _0x2bef68 = _0xf735[_0x479255];
        return _0x2bef68;
    }, _0x555f(_0x476eb7, _0x2884a1);
}
for (const [notation, compactDisplay, expect1] of testData) {
    nf = new Intl[(_0x2919a1(0x13d))]('en', {
        'notation': notation,
        'compactDisplay': compactDisplay
    }), assertEquals(notation, nf[_0x2919a1(0x13f)]()['notation']);
    if (notation != _0x2919a1(0x145))
        assertEquals(undefined, nf[_0x2919a1(0x13f)]()[_0x2919a1(0x149)]);
    else
        compactDisplay == _0x2919a1(0x148) ? assertEquals('long', nf['resolvedOptions']()[_0x2919a1(0x149)]) : assertEquals('short', nf['resolvedOptions']()[_0x2919a1(0x149)]);
    assertEquals(expect1, nf[_0x2919a1(0x14a)](0x65a26fff + 0xc77c * -0x3fbb + -0xae * -0xa2515));
}
let notation = _0x2919a1(0x145);
nf = new Intl[(_0x2919a1(0x13d))]('de', {
    'notation': notation,
    'compactDisplay': _0x2919a1(0x147)
}), assertEquals(_0x2919a1(0x14b), nf[_0x2919a1(0x14a)](0x2ba4a109 + -0x1 * 0x454b706f + 0x54853817)), assertEquals(_0x2919a1(0x14c), nf['format'](-0x620e9c4 + -0x87a90ae + -0x1939412 * -0xd)), assertEquals(_0x2919a1(0x14d), nf[_0x2919a1(0x14a)](0x1d665 + -0x876e + 0x32d6)), assertEquals(_0x2919a1(0x14e), nf[_0x2919a1(0x14a)](-0xef * 0x29 + 0x2aff + 0x21dc)), nf = new Intl[(_0x2919a1(0x13d))]('de', {
    'notation': notation,
    'compactDisplay': _0x2919a1(0x148)
}), assertEquals(_0x2919a1(0x14f), nf[_0x2919a1(0x14a)](-0x431649d8 + 0x1 * 0x8913175 + 0x75638114)), assertEquals(_0x2919a1(0x150), nf[_0x2919a1(0x14a)](0x95 * -0x935ab + 0x7bfd * 0xdbd + -0x497e436 * -0x1)), assertEquals(_0x2919a1(0x151), nf[_0x2919a1(0x14a)](-0x1ada1 * -0x1 + 0xa * 0x2b93 + -0x1df92)), assertEquals(_0x2919a1(0x152), nf[_0x2919a1(0x14a)](-0x4527 + -0x1279 * 0x2 + 0x90ad)), nf = new Intl[(_0x2919a1(0x13d))](_0x2919a1(0x153), {
    'notation': notation,
    'compactDisplay': 'short'
}), assertEquals('9.9億', nf[_0x2919a1(0x14a)](0x7280d * 0xb26 + 0x4b96eb4c + -0x60810389)), assertEquals(_0x2919a1(0x154), nf['format'](-0x731a37a + -0xb114637 + 0x1825f429)), assertEquals('9.9萬', nf[_0x2919a1(0x14a)](-0x1 * -0x2352a + -0x1e550 + -0x2bb5 * -0x7)), assertEquals('9876', nf[_0x2919a1(0x14a)](-0x166d * -0x3 + 0x1 * -0x2ff5 + 0x1342)), nf = new Intl[(_0x2919a1(0x13d))](_0x2919a1(0x153), {
    'notation': notation,
    'compactDisplay': _0x2919a1(0x148)
}), assertEquals(_0x2919a1(0x155), nf['format'](-0x35be75ca + 0x48a87d9c * -0x1 + -0x1d * -0x6637ec3)), assertEquals(_0x2919a1(0x154), nf[_0x2919a1(0x14a)](0x1958064 + 0x9afbee + 0x3b28e26)), assertEquals(_0x2919a1(0x156), nf['format'](-0x30171 + 0xe93e + 0x39a00)), assertEquals(_0x2919a1(0x14e), nf['format'](0xa71 + 0x3e * -0xdf + 0x1 * 0x5225)), nf = new Intl['NumberFormat']('ja', {
    'notation': notation,
    'compactDisplay': _0x2919a1(0x147)
}), assertEquals(_0x2919a1(0x155), nf[_0x2919a1(0x14a)](-0xe07 * 0x5376f + -0x4823a7b * -0x13 + 0x2e60a799)), assertEquals(_0x2919a1(0x157), nf['format'](-0x45b652c + 0x2 * 0xcfd0f2 + 0x89ecdc0)), assertEquals('9.9万', nf['format'](-0xcd3d * -0x3 + 0x1 * -0x14306 + 0x3b * 0x194)), assertEquals(_0x2919a1(0x14e), nf['format'](-0x465d + 0x1 * -0x4ad9 + -0x1 * -0xb7ca)), nf = new Intl[(_0x2919a1(0x13d))]('ja', {
    'notation': notation,
    'compactDisplay': _0x2919a1(0x148)
}), assertEquals(_0x2919a1(0x155), nf[_0x2919a1(0x14a)](-0x38e19e05 * -0x2 + -0x3a6b1cfd * -0x1 + -0x714ff056)), assertEquals(_0x2919a1(0x157), nf[_0x2919a1(0x14a)](0x183874 * -0x49 + -0xd50 * -0x35ef + 0x9fd25dc)), assertEquals(_0x2919a1(0x158), nf[_0x2919a1(0x14a)](0x290c3 + -0x18393 + 0x749d)), assertEquals(_0x2919a1(0x14e), nf[_0x2919a1(0x14a)](0x2 * -0x1dfd + 0x2134 + -0x46 * -0xef)), nf = new Intl[(_0x2919a1(0x13d))]('ko', {
    'notation': notation,
    'compactDisplay': _0x2919a1(0x147)
}), assertEquals(_0x2919a1(0x159), nf[_0x2919a1(0x14a)](-0x5 * 0x12f95711 + 0x1b422a4e + 0x148 * 0x62b75f)), assertEquals(_0x2919a1(0x15a), nf[_0x2919a1(0x14a)](-0x3644fbf + -0x43e * -0x1d0b3 + 0x3 * 0x86ab9f)), assertEquals(_0x2919a1(0x15b), nf[_0x2919a1(0x14a)](0x1b6b2 * 0x1 + -0xa9b * 0x6 + -0xabd * -0x1)), assertEquals(_0x2919a1(0x15c), nf[_0x2919a1(0x14a)](0x1 * -0x2717 + 0x3d12 + -0x7 * -0x25f)), assertEquals(_0x2919a1(0x15d), nf[_0x2919a1(0x14a)](-0x1453 + -0x1136 + -0x6e6 * -0x6)), nf = new Intl[(_0x2919a1(0x13d))]('ko', {
    'notation': notation,
    'compactDisplay': _0x2919a1(0x148)
}), assertEquals(_0x2919a1(0x159), nf[_0x2919a1(0x14a)](-0x1 * 0x491f1731 + 0x5de4acd3 * 0x1 + 0x2618d30f)), assertEquals(_0x2919a1(0x15a), nf[_0x2919a1(0x14a)](0x4e94b89 * 0x1 + -0x1a457d * 0x61 + 0xaee134c)), assertEquals(_0x2919a1(0x15b), nf[_0x2919a1(0x14a)](0x1490 * 0x21 + 0xfd41 + -0x22204)), assertEquals('9.9천', nf[_0x2919a1(0x14a)](0x1da2 + -0x1 * 0x685 + 0x1 * 0xf77)), assertEquals(_0x2919a1(0x15d), nf['format'](-0x1 * 0x5ab + 0x1b17 + -0x3 * 0x5db));
