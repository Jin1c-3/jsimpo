import _0x5610ca from 'fs-extra';
import _0x5dda01 from '../resource-schema';
import _0x3470a5 from '@hapi/joi';
jest['mock']('fs-extra'), jest['mock']('node-fetch', () => require('fetch-mock-jest')['sandbox']());
const fetchMock = require('node-fetch'), file = require('./file'), root = __dirname, content = 'Hello,\x20world!', url = 'http://example.com/file1.txt', url2 = 'http://example.com/file2.txt', response1 = 'query\x20{\x0a\x20\x20allGatsbyPlugin\x20{\x0a\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20name\x0a\x20\x20\x20\x20\x20\x20options\x0a\x20\x20\x20\x20\x20\x20resolvedOptions\x0a\x20\x20\x20\x20\x20\x20package\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20version\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20...\x20on\x20GatsbyTheme\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20files\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20shadowedFiles\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x20\x20}\x20\x20\x0a}', response2 = 'const\x20options\x20=\x20{\x0a\x20\x20key:\x20process.env.WHATEVER\x0a\x20\x20\x0a}';
describe('file\x20resource', () => {
    const _0x56f85a = {
        'cMwli': function (_0xe2492a, _0x14b0c6) {
            return _0xe2492a + _0x14b0c6;
        },
        'dyORC': function (_0x4bb4a4, _0x534b60) {
            return _0x4bb4a4(_0x534b60);
        },
        'ilbuP': function (_0x457eda, _0x1866db) {
            return _0x457eda(_0x1866db);
        },
        'laBMn': function (_0x28ce55, _0x4f3c27) {
            return _0x28ce55(_0x4f3c27);
        },
        'KuMnD': function (_0x5adc70, _0xed2a1) {
            return _0x5adc70(_0xed2a1);
        },
        'AjYKn': function (_0x46c97d, _0x17248b) {
            return _0x46c97d(_0x17248b);
        },
        'cxWGw': function (_0x2d86a0, _0x2c6440) {
            return _0x2d86a0(_0x2c6440);
        },
        'DwLzf': function (_0x428250, _0x31d9aa) {
            return _0x428250(_0x31d9aa);
        },
        'FNvos': function (_0x10a3bc, _0x4b8148) {
            return _0x10a3bc(_0x4b8148);
        },
        'jXmdM': function (_0x18420b, _0x4df5d9) {
            return _0x18420b(_0x4df5d9);
        },
        'qvzuS': function (_0x2fb7e9, _0x4e55bf) {
            return _0x2fb7e9(_0x4e55bf);
        },
        'UXbUy': function (_0x200015, _0x465af8, _0x256887) {
            return _0x200015(_0x465af8, _0x256887);
        }
    };
    _0x56f85a['UXbUy'](test, 'e2e\x20file\x20resource\x20test', async () => {
        const _0xeaa65d = { 'root': root }, _0x3f465d = {
                'path': 'file.txt',
                'content': content
            }, _0x247d7b = { 'content': _0x56f85a['cMwli'](content, '1') };
        _0x5610ca['readFile']['mockReturnValue'](_0x3f465d['content']);
        const _0xad1a46 = await file['plan'](_0xeaa65d, _0x3f465d);
        _0x56f85a['dyORC'](expect, _0xad1a46)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22currentState\x22:\x20\x22Hello,\x20world!\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22describe\x22:\x20\x22Write\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22diff\x22:\x20\x22\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22newState\x22:\x20\x22Hello,\x20world!\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20');
        const _0x43fb45 = await file['create'](_0xeaa65d, _0x3f465d), _0x478f3f = _0x3470a5['validate'](_0x43fb45, {
                ...file['schema'],
                ..._0x5dda01
            });
        _0x56f85a['ilbuP'](expect, _0x478f3f['error'])['toBeNull'](), _0x56f85a['laBMn'](expect, _0x43fb45)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22_message\x22:\x20\x22Wrote\x20file\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22content\x22:\x20\x22Hello,\x20world!\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22id\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22path\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20');
        const _0x450782 = await file['read'](_0xeaa65d, _0x43fb45['id']);
        _0x56f85a['laBMn'](expect, _0x450782)['toEqual'](_0x43fb45);
        const _0x439949 = {
                ..._0x450782,
                ..._0x247d7b
            }, _0x39bf29 = await file['plan'](_0xeaa65d, _0x439949);
        _0x56f85a['KuMnD'](expect, _0x39bf29)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22currentState\x22:\x20\x22Hello,\x20world!\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22describe\x22:\x20\x22Write\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22diff\x22:\x20\x22-\x20Original\x20\x20-\x201\x0a\x20\x20\x20\x20\x20\x20+\x20Modified\x20\x20+\x201\x0a\x0a\x20\x20\x20\x20\x20\x20-\x20Hello,\x20world!\x0a\x20\x20\x20\x20\x20\x20+\x20Hello,\x20world!1\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22newState\x22:\x20\x22Hello,\x20world!1\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20'), _0x5610ca['readFile']['mockReturnValueOnce'](_0x247d7b['content']);
        const _0x4baa3e = await file['update'](_0xeaa65d, _0x439949);
        _0x56f85a['AjYKn'](expect, _0x4baa3e)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22_message\x22:\x20\x22Wrote\x20file\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22content\x22:\x20\x22Hello,\x20world!1\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22id\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22path\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20'), await file['destroy'](_0xeaa65d, _0x4baa3e);
    }), _0x56f85a['UXbUy'](test, 'e2e\x20remote\x20file\x20resource\x20test', async () => {
        const _0x2aa930 = { 'root': root }, _0x3d5cdf = {
                'path': 'file.txt',
                'content': url
            }, _0x127a2f = { 'content': url2 };
        _0x5610ca['readFile']['mockReturnValue'](response1);
        const {
            Readable: _0x114f27,
            PassThrough: _0x25452f
        } = _0x56f85a['AjYKn'](require, 'stream');
        _0x5610ca['createWriteStream']['mockImplementation'](() => new _0x25452f()), fetchMock['get'](url, () => {
            const _0x4152e6 = new _0x114f27();
            return _0x4152e6['push'](response1), _0x4152e6['push'](null), _0x4152e6;
        }, { 'sendAsJson': ![] })['mock'](url2, response2), _0x5610ca['readFile']['mockReturnValueOnce']('');
        const _0x3e1ca7 = await file['plan'](_0x2aa930, _0x3d5cdf);
        _0x56f85a['cxWGw'](expect, _0x3e1ca7['currentState'])['toEqual'](''), _0x56f85a['DwLzf'](expect, _0x3e1ca7['newState'])['toEqual'](response1);
        const _0x461df4 = await file['create'](_0x2aa930, _0x3d5cdf), _0xbc30d9 = _0x3470a5['validate'](_0x461df4, {
                ...file['schema'],
                ..._0x5dda01
            });
        _0x56f85a['FNvos'](expect, _0xbc30d9['error'])['toBeNull'](), _0x56f85a['jXmdM'](expect, _0x461df4['content'])['toEqual'](response1);
        const _0x1b83b9 = await file['read'](_0x2aa930, _0x461df4['id']);
        _0x56f85a['qvzuS'](expect, _0x1b83b9)['toEqual'](_0x461df4);
        const _0x1545a5 = {
                ..._0x1b83b9,
                ..._0x127a2f
            }, _0x79d800 = await file['plan'](_0x2aa930, _0x1545a5);
        _0x56f85a['qvzuS'](expect, _0x79d800['diff'])['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20\x22-\x20Original\x20\x20-\x2023\x0a\x20\x20\x20\x20\x20\x20+\x20Modified\x20\x20+\x20\x203\x0a\x0a\x20\x20\x20\x20\x20\x20-\x20query\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20allGatsbyPlugin\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20name\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20options\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20resolvedOptions\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20package\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20version\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20...\x20on\x20GatsbyTheme\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20files\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20shadowedFiles\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20}\x20\x20\x0a\x20\x20\x20\x20\x20\x20+\x20const\x20options\x20=\x20{\x0a\x20\x20\x20\x20\x20\x20+\x20\x20\x20key:\x20process.env.WHATEVER\x0a\x20\x20\x20\x20\x20\x20+\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x22\x0a\x20\x20\x20\x20'), _0x5610ca['readFile']['mockReturnValueOnce'](_0x127a2f['content']);
        const _0x421564 = await file['update'](_0x2aa930, _0x1545a5);
        _0x56f85a['qvzuS'](expect, _0x421564)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22_message\x22:\x20\x22Wrote\x20file\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22content\x22:\x20\x22http://example.com/file2.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22id\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22path\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20'), await file['destroy'](_0x2aa930, _0x421564);
    });
});
