function t(_0x884d7d, _0x28b18f) {
    assertTrue(_0x884d7d['test'](_0x28b18f));
}
function f(_0x9b1d81, _0x28b8ad) {
    assertFalse(_0x9b1d81['test'](_0x28b8ad));
}
t(null, 'abc123');
f(null, '\u24D0\u24D1\u24D2\u2460\u2461\u2462');
f(null, '\uD83C\uDD30\uD83C\uDD31\uD83C\uDD32\u2460\u2461\u2462');
f(null, 'abcd123');
t(null, '\u24D0\u24D1\u24D2\u2460\u2461\u2462');
t(null, '妋\uE103ᅱ\u2442\u24C6\u243D');
f(null, 'abc123');
f(null, '\u24D0\u24D1\u24D2\u2460\u2461\u2462');
f(null, '\uE1FB\u2994臌\u24C5\u244D\u24F9');
t(null, 'abcd123');
t(null, '\u24D0\u24D1\u24D2\u2460\u2461\u2462');
f(null, '\uD83C\uDD30\uD83C\uDD31\uD83C\uDD32\u2460\u2461\u2462');
t(null, '㗄唍놧\u24DA\u244B\u2422');
assertEquals(['\uFFFD'], null['exec']('\uFFFD\uFFFD'));
assertEquals(['\uFFFD'], null['exec']('\uFFFD\uFFFD'));
assertEquals(['\uD800\uDC01'], null['exec']('\uD800\uDC01'));
assertEquals(['\uFFFD'], null['exec']('\uFFFD'));
f(null, '123');
f(null, '123');
t(null, '123');
t(null, '123');
t(null, '123');
t(null, '赨\uF14F\uE92F');
f(null, '\uFDD0');
f(null, '\uDBBF\uDFFF');
f(null, '123');
f(null, '\uD83C\uDD30\uD83C\uDD31\uD83C\uDD32');
t(null, '\uFDD0');
t(null, '\uDBBF\uDFFF');
f(null, '');
t(null, '123');
f(null, '\uD83C\uDD30\uD83C\uDD31\uD83C\uDD32');
f(null, '\uFDD0');
t(null, '\uDBBF\uDFFF');
f(null, '');
f(null, 'ሴ');
t(null, 'x');
t(null, 'ሴ');
assertThrows('/\\p{Other_Alphabetic}/u');
assertThrows('/\\P{OAlpha}/u');
assertThrows('/\\p{Other_Default_Ignorable_Code_Point}/u');
assertThrows('/\\P{ODI}/u');
assertThrows('/\\p{Other_Grapheme_Extend}/u');
assertThrows('/\\P{OGr_Ext}/u');
assertThrows('/\\p{Other_ID_Continue}/u');
assertThrows('/\\P{OIDC}/u');
assertThrows('/\\p{Other_ID_Start}/u');
assertThrows('/\\P{OIDS}/u');
assertThrows('/\\p{Other_Lowercase}/u');
assertThrows('/\\P{OLower}/u');
assertThrows('/\\p{Other_Math}/u');
assertThrows('/\\P{OMath}/u');
assertThrows('/\\p{Other_Uppercase}/u');
assertThrows('/\\P{OUpper}/u');