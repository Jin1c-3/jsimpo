{
    "type": "Program",
    "body": [
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "params": [
                        {
                            "type": "Identifier",
                            "name": "_0x4e75a9"
                        },
                        {
                            "type": "Identifier",
                            "name": "_0x5e2f21"
                        }
                    ],
                    "body": {
                        "type": "BlockStatement",
                        "body": [
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "UnaryExpression",
                                            "operator": "typeof",
                                            "argument": {
                                                "type": "Identifier",
                                                "name": "define"
                                            },
                                            "prefix": true
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "function",
                                            "raw": "'function'"
                                        }
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "define"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "amd",
                                            "raw": "'amd'"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "IfStatement",
                                            "test": {
                                                "type": "BinaryExpression",
                                                "operator": "!==",
                                                "left": {
                                                    "type": "Literal",
                                                    "value": "fuPcK",
                                                    "raw": "'fuPcK'"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": "WOPUM",
                                                    "raw": "'WOPUM'"
                                                }
                                            },
                                            "consequent": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "define"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "ArrayExpression",
                                                                    "elements": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "exports",
                                                                            "raw": "'exports'"
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "_0x5e2f21"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            },
                                            "alternate": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "VariableDeclaration",
                                                        "declarations": [
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "_0x5d31a7"
                                                                },
                                                                "init": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Literal",
                                                                            "value": "1|3|2|0|4",
                                                                            "raw": "'1|3|2|0|4'"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "split",
                                                                            "raw": "'split'"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": "|",
                                                                            "raw": "'|'"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "type": "VariableDeclarator",
                                                                "id": {
                                                                    "type": "Identifier",
                                                                    "name": "_0x42c188"
                                                                },
                                                                "init": {
                                                                    "type": "Literal",
                                                                    "value": 0,
                                                                    "raw": "0x0"
                                                                }
                                                            }
                                                        ],
                                                        "kind": "var"
                                                    },
                                                    {
                                                        "type": "WhileStatement",
                                                        "test": {
                                                            "type": "UnaryExpression",
                                                            "operator": "!",
                                                            "argument": {
                                                                "type": "UnaryExpression",
                                                                "operator": "!",
                                                                "argument": {
                                                                    "type": "ArrayExpression",
                                                                    "elements": []
                                                                },
                                                                "prefix": true
                                                            },
                                                            "prefix": true
                                                        },
                                                        "body": {
                                                            "type": "BlockStatement",
                                                            "body": [
                                                                {
                                                                    "type": "SwitchStatement",
                                                                    "discriminant": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x5d31a7"
                                                                        },
                                                                        "property": {
                                                                            "type": "UpdateExpression",
                                                                            "operator": "++",
                                                                            "argument": {
                                                                                "type": "Identifier",
                                                                                "name": "_0x42c188"
                                                                            },
                                                                            "prefix": false
                                                                        }
                                                                    },
                                                                    "cases": [
                                                                        {
                                                                            "type": "SwitchCase",
                                                                            "test": {
                                                                                "type": "Literal",
                                                                                "value": "0",
                                                                                "raw": "'0'"
                                                                            },
                                                                            "consequent": [
                                                                                {
                                                                                    "type": "VariableDeclaration",
                                                                                    "declarations": [
                                                                                        {
                                                                                            "type": "VariableDeclarator",
                                                                                            "id": {
                                                                                                "type": "Identifier",
                                                                                                "name": "_0x43248e"
                                                                                            },
                                                                                            "init": {
                                                                                                "type": "ArrayExpression",
                                                                                                "elements": []
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "kind": "var"
                                                                                },
                                                                                {
                                                                                    "type": "ContinueStatement",
                                                                                    "label": null
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "SwitchCase",
                                                                            "test": {
                                                                                "type": "Literal",
                                                                                "value": "1",
                                                                                "raw": "'1'"
                                                                            },
                                                                            "consequent": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "Literal",
                                                                                        "value": "use strict",
                                                                                        "raw": "'use strict'"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ContinueStatement",
                                                                                    "label": null
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "SwitchCase",
                                                                            "test": {
                                                                                "type": "Literal",
                                                                                "value": "2",
                                                                                "raw": "'2'"
                                                                            },
                                                                            "consequent": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "=",
                                                                                        "left": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "_exports"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Literal",
                                                                                                "value": "default",
                                                                                                "raw": "'default'"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "UnaryExpression",
                                                                                            "operator": "void",
                                                                                            "argument": {
                                                                                                "type": "Literal",
                                                                                                "value": 0,
                                                                                                "raw": "0x0"
                                                                                            },
                                                                                            "prefix": true
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ContinueStatement",
                                                                                    "label": null
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "SwitchCase",
                                                                            "test": {
                                                                                "type": "Literal",
                                                                                "value": "3",
                                                                                "raw": "'3'"
                                                                            },
                                                                            "consequent": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "=",
                                                                                        "left": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "_exports"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Literal",
                                                                                                "value": "__esModule",
                                                                                                "raw": "'__esModule'"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "UnaryExpression",
                                                                                            "operator": "!",
                                                                                            "argument": {
                                                                                                "type": "UnaryExpression",
                                                                                                "operator": "!",
                                                                                                "argument": {
                                                                                                    "type": "ArrayExpression",
                                                                                                    "elements": []
                                                                                                },
                                                                                                "prefix": true
                                                                                            },
                                                                                            "prefix": true
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ContinueStatement",
                                                                                    "label": null
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "SwitchCase",
                                                                            "test": {
                                                                                "type": "Literal",
                                                                                "value": "4",
                                                                                "raw": "'4'"
                                                                            },
                                                                            "consequent": [
                                                                                {
                                                                                    "type": "ExpressionStatement",
                                                                                    "expression": {
                                                                                        "type": "AssignmentExpression",
                                                                                        "operator": "=",
                                                                                        "left": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "_exports"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Literal",
                                                                                                "value": "default",
                                                                                                "raw": "'default'"
                                                                                            }
                                                                                        },
                                                                                        "right": {
                                                                                            "type": "Identifier",
                                                                                            "name": "_0x43248e"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": "ContinueStatement",
                                                                                    "label": null
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "BreakStatement",
                                                                    "label": null
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "alternate": {
                                    "type": "IfStatement",
                                    "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                            "type": "UnaryExpression",
                                            "operator": "typeof",
                                            "argument": {
                                                "type": "Identifier",
                                                "name": "exports"
                                            },
                                            "prefix": true
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "undefined",
                                            "raw": "'undefined'"
                                        }
                                    },
                                    "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "Identifier",
                                                        "name": "_0x5e2f21"
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "exports"
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "_0xf2e098"
                                                        },
                                                        "init": {
                                                            "type": "ObjectExpression",
                                                            "properties": [
                                                                {
                                                                    "type": "Property",
                                                                    "key": {
                                                                        "type": "Literal",
                                                                        "value": "exports",
                                                                        "raw": "'exports'"
                                                                    },
                                                                    "computed": false,
                                                                    "value": {
                                                                        "type": "ObjectExpression",
                                                                        "properties": []
                                                                    },
                                                                    "kind": "init",
                                                                    "method": false,
                                                                    "shorthand": false
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "kind": "var"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "Identifier",
                                                        "name": "_0x5e2f21"
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "_0xf2e098"
                                                            },
                                                            "property": {
                                                                "type": "Literal",
                                                                "value": "exports",
                                                                "raw": "'exports'"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "_0x4e75a9"
                                                        },
                                                        "property": {
                                                            "type": "Literal",
                                                            "value": "input",
                                                            "raw": "'input'"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "_0xf2e098"
                                                        },
                                                        "property": {
                                                            "type": "Literal",
                                                            "value": "exports",
                                                            "raw": "'exports'"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                },
                "arguments": [
                    {
                        "type": "ConditionalExpression",
                        "test": {
                            "type": "BinaryExpression",
                            "operator": "!==",
                            "left": {
                                "type": "UnaryExpression",
                                "operator": "typeof",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "globalThis"
                                },
                                "prefix": true
                            },
                            "right": {
                                "type": "Literal",
                                "value": "undefined",
                                "raw": "'undefined'"
                            }
                        },
                        "consequent": {
                            "type": "Identifier",
                            "name": "globalThis"
                        },
                        "alternate": {
                            "type": "ConditionalExpression",
                            "test": {
                                "type": "BinaryExpression",
                                "operator": "!==",
                                "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                        "type": "Identifier",
                                        "name": "self"
                                    },
                                    "prefix": true
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": "undefined",
                                    "raw": "'undefined'"
                                }
                            },
                            "consequent": {
                                "type": "Identifier",
                                "name": "self"
                            },
                            "alternate": {
                                "type": "ThisExpression"
                            }
                        }
                    },
                    {
                        "type": "FunctionExpression",
                        "id": null,
                        "params": [
                            {
                                "type": "Identifier",
                                "name": "_0x2b0413"
                            }
                        ],
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                        {
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "_0x27c996"
                                            },
                                            "init": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Literal",
                                                        "value": "1|3|2|4|0",
                                                        "raw": "'1|3|2|4|0'"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "split",
                                                        "raw": "'split'"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "|",
                                                        "raw": "'|'"
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "VariableDeclarator",
                                            "id": {
                                                "type": "Identifier",
                                                "name": "_0x15f638"
                                            },
                                            "init": {
                                                "type": "Literal",
                                                "value": 0,
                                                "raw": "0x0"
                                            }
                                        }
                                    ],
                                    "kind": "var"
                                },
                                {
                                    "type": "WhileStatement",
                                    "test": {
                                        "type": "UnaryExpression",
                                        "operator": "!",
                                        "argument": {
                                            "type": "UnaryExpression",
                                            "operator": "!",
                                            "argument": {
                                                "type": "ArrayExpression",
                                                "elements": []
                                            },
                                            "prefix": true
                                        },
                                        "prefix": true
                                    },
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "SwitchStatement",
                                                "discriminant": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "_0x27c996"
                                                    },
                                                    "property": {
                                                        "type": "UpdateExpression",
                                                        "operator": "++",
                                                        "argument": {
                                                            "type": "Identifier",
                                                            "name": "_0x15f638"
                                                        },
                                                        "prefix": false
                                                    }
                                                },
                                                "cases": [
                                                    {
                                                        "type": "SwitchCase",
                                                        "test": {
                                                            "type": "Literal",
                                                            "value": "0",
                                                            "raw": "'0'"
                                                        },
                                                        "consequent": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x2b0413"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "default",
                                                                            "raw": "'default'"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Identifier",
                                                                        "name": "_0x4a346c"
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ContinueStatement",
                                                                "label": null
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "SwitchCase",
                                                        "test": {
                                                            "type": "Literal",
                                                            "value": "1",
                                                            "raw": "'1'"
                                                        },
                                                        "consequent": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "Literal",
                                                                    "value": "use strict",
                                                                    "raw": "'use strict'"
                                                                }
                                                            },
                                                            {
                                                                "type": "ContinueStatement",
                                                                "label": null
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "SwitchCase",
                                                        "test": {
                                                            "type": "Literal",
                                                            "value": "2",
                                                            "raw": "'2'"
                                                        },
                                                        "consequent": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x2b0413"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "default",
                                                                            "raw": "'default'"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "void",
                                                                        "argument": {
                                                                            "type": "Literal",
                                                                            "value": 0,
                                                                            "raw": "0x0"
                                                                        },
                                                                        "prefix": true
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ContinueStatement",
                                                                "label": null
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "SwitchCase",
                                                        "test": {
                                                            "type": "Literal",
                                                            "value": "3",
                                                            "raw": "'3'"
                                                        },
                                                        "consequent": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x2b0413"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "__esModule",
                                                                            "raw": "'__esModule'"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "UnaryExpression",
                                                                        "operator": "!",
                                                                        "argument": {
                                                                            "type": "UnaryExpression",
                                                                            "operator": "!",
                                                                            "argument": {
                                                                                "type": "ArrayExpression",
                                                                                "elements": []
                                                                            },
                                                                            "prefix": true
                                                                        },
                                                                        "prefix": true
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ContinueStatement",
                                                                "label": null
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "SwitchCase",
                                                        "test": {
                                                            "type": "Literal",
                                                            "value": "4",
                                                            "raw": "'4'"
                                                        },
                                                        "consequent": [
                                                            {
                                                                "type": "VariableDeclaration",
                                                                "declarations": [
                                                                    {
                                                                        "type": "VariableDeclarator",
                                                                        "id": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x4a346c"
                                                                        },
                                                                        "init": {
                                                                            "type": "ArrayExpression",
                                                                            "elements": []
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "var"
                                                            },
                                                            {
                                                                "type": "ContinueStatement",
                                                                "label": null
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "BreakStatement",
                                                "label": null
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                ]
            }
        }
    ],
    "sourceType": "script"
}