{
    "type": "Program",
    "body": [
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [
                            {
                                "type": "FunctionDeclaration",
                                "id": {
                                    "type": "Identifier",
                                    "name": "_0x16433f"
                                },
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "_0x4eeec7"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "document"
                                                            },
                                                            "property": {
                                                                "type": "Literal",
                                                                "value": "createElement",
                                                                "raw": "'createElement'"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "div",
                                                                "raw": "'div'"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ],
                                            "kind": "const"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "_0x4eeec7"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "innerText",
                                                        "raw": "'innerText'"
                                                    }
                                                },
                                                "right": {
                                                    "type": "BinaryExpression",
                                                    "operator": "+",
                                                    "left": {
                                                        "type": "Literal",
                                                        "value": "security triggered ",
                                                        "raw": "'security\\x20triggered\\x20'"
                                                    },
                                                    "right": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "NewExpression",
                                                                        "callee": {
                                                                            "type": "Identifier",
                                                                            "name": "Error"
                                                                        },
                                                                        "arguments": []
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": "stack",
                                                                        "raw": "'stack'"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Literal",
                                                                    "value": "split",
                                                                    "raw": "'split'"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Literal",
                                                                    "value": "\n",
                                                                    "raw": "'\\x0a'"
                                                                },
                                                                {
                                                                    "type": "Literal",
                                                                    "value": 3,
                                                                    "raw": "0x3"
                                                                }
                                                            ]
                                                        },
                                                        "property": {
                                                            "type": "Literal",
                                                            "value": 2,
                                                            "raw": "0x2"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "document"
                                                        },
                                                        "property": {
                                                            "type": "Literal",
                                                            "value": "body",
                                                            "raw": "'body'"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "appendChild",
                                                        "raw": "'appendChild'"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0x4eeec7"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "topFoo",
                                            "raw": "'topFoo'"
                                        }
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": "foo",
                                        "raw": "'foo'"
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "parentFoo",
                                            "raw": "'parentFoo'"
                                        }
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": "foo",
                                        "raw": "'foo'"
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "_0x4401a5"
                                                            },
                                                            "init": {
                                                                "type": "Literal",
                                                                "value": "foo",
                                                                "raw": "'foo'"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "const"
                                                },
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "_0x3e0579"
                                                            },
                                                            "init": {
                                                                "type": "Literal",
                                                                "value": "foo",
                                                                "raw": "'foo'"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "const"
                                                },
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "_0x48c983"
                                                            },
                                                            "init": {
                                                                "type": "Literal",
                                                                "value": "foo",
                                                                "raw": "'foo'"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "const"
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "!==",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "_0x4401a5"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "_0x48c983"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "_0x16433f"
                                                            },
                                                            "arguments": []
                                                        }
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "!==",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "_0x3e0579"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "_0x48c983"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "_0x16433f"
                                                            },
                                                            "arguments": []
                                                        }
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "!==",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "_0x48c983"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "_0x4401a5"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "_0x16433f"
                                                            },
                                                            "arguments": []
                                                        }
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "!==",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "_0x48c983"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "_0x3e0579"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "_0x16433f"
                                                            },
                                                            "arguments": []
                                                        }
                                                    },
                                                    "alternate": null
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    },
                                    "arguments": []
                                }
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "top"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "self"
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "top"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "self"
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "top"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "location",
                                            "raw": "'location'"
                                        }
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "self"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "location",
                                            "raw": "'location'"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "top"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "location",
                                            "raw": "'location'"
                                        }
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "location"
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": ">",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "parent"
                                            },
                                            "property": {
                                                "type": "Literal",
                                                "value": "frames",
                                                "raw": "'frames'"
                                            }
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "length",
                                            "raw": "'length'"
                                        }
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0x0"
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "window"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "top"
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "top",
                                            "raw": "'top'"
                                        }
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "self",
                                            "raw": "'self'"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!==",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "top",
                                            "raw": "'top'"
                                        }
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "self",
                                            "raw": "'self'"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "self",
                                            "raw": "'self'"
                                        }
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "top",
                                            "raw": "'top'"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "top",
                                            "raw": "'top'"
                                        }
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "self",
                                            "raw": "'self'"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "top",
                                            "raw": "'top'"
                                        }
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "parent",
                                            "raw": "'parent'"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "top",
                                            "raw": "'top'"
                                        }
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "parent",
                                            "raw": "'parent'"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "BinaryExpression",
                                    "operator": "!=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "top",
                                            "raw": "'top'"
                                        }
                                    },
                                    "right": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "self"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "parent",
                                            "raw": "'parent'"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "parent"
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "!=",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "parent"
                                        },
                                        "right": {
                                            "type": "Identifier",
                                            "name": "window"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "parent"
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "!=",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "parent"
                                        },
                                        "right": {
                                            "type": "Identifier",
                                            "name": "self"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "parent"
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "!=",
                                        "left": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "window"
                                            },
                                            "property": {
                                                "type": "Literal",
                                                "value": "topFoo",
                                                "raw": "'topFoo'"
                                            }
                                        },
                                        "right": {
                                            "type": "Identifier",
                                            "name": "topFoo"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "parent"
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "!=",
                                        "left": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "window"
                                            },
                                            "property": {
                                                "type": "Literal",
                                                "value": "parentFoo",
                                                "raw": "'parentFoo'"
                                            }
                                        },
                                        "right": {
                                            "type": "Identifier",
                                            "name": "parentFoo"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "parent"
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "!=",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "window"
                                        },
                                        "right": {
                                            "type": "Identifier",
                                            "name": "parent"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "parent"
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "!=",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "self"
                                        },
                                        "right": {
                                            "type": "Identifier",
                                            "name": "parent"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "LogicalExpression",
                                        "operator": "&&",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "parent"
                                        },
                                        "right": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "parent"
                                            },
                                            "property": {
                                                "type": "Literal",
                                                "value": "frames",
                                                "raw": "'frames'"
                                            }
                                        }
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": ">",
                                        "left": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "parent"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "frames",
                                                    "raw": "'frames'"
                                                }
                                            },
                                            "property": {
                                                "type": "Literal",
                                                "value": "length",
                                                "raw": "'length'"
                                            }
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0x0"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "IfStatement",
                                "test": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                        "type": "LogicalExpression",
                                        "operator": "&&",
                                        "left": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "self"
                                            },
                                            "property": {
                                                "type": "Literal",
                                                "value": "parent",
                                                "raw": "'parent'"
                                            }
                                        },
                                        "right": {
                                            "type": "UnaryExpression",
                                            "operator": "!",
                                            "argument": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "self"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "parent",
                                                        "raw": "'parent'"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Identifier",
                                                    "name": "self"
                                                }
                                            },
                                            "prefix": true
                                        }
                                    },
                                    "right": {
                                        "type": "BinaryExpression",
                                        "operator": "!=",
                                        "left": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "self"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "parent",
                                                        "raw": "'parent'"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "frames",
                                                    "raw": "'frames'"
                                                }
                                            },
                                            "property": {
                                                "type": "Literal",
                                                "value": "length",
                                                "raw": "'length'"
                                            }
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0x0"
                                        }
                                    }
                                },
                                "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "_0x16433f"
                                        },
                                        "arguments": []
                                    }
                                },
                                "alternate": null
                            },
                            {
                                "type": "VariableDeclaration",
                                "declarations": [
                                    {
                                        "type": "VariableDeclarator",
                                        "id": {
                                            "type": "Identifier",
                                            "name": "_0xeb4510"
                                        },
                                        "init": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "document"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "createElement",
                                                    "raw": "'createElement'"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": "div",
                                                    "raw": "'div'"
                                                }
                                            ]
                                        }
                                    }
                                ],
                                "kind": "const"
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "Identifier",
                                            "name": "_0xeb4510"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "innerText",
                                            "raw": "'innerText'"
                                        }
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": "js ran",
                                        "raw": "'js\\x20ran'"
                                    }
                                }
                            },
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "Identifier",
                                                "name": "document"
                                            },
                                            "property": {
                                                "type": "Literal",
                                                "value": "body",
                                                "raw": "'body'"
                                            }
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "appendChild",
                                            "raw": "'appendChild'"
                                        }
                                    },
                                    "arguments": [
                                        {
                                            "type": "Identifier",
                                            "name": "_0xeb4510"
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                },
                "arguments": []
            }
        }
    ],
    "sourceType": "script"
}