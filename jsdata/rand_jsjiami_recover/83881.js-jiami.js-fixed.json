{
    "type": "Program",
    "body": [
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "uuidGen"
                    },
                    "init": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                    "type": "Identifier",
                                    "name": "Cc"
                                },
                                "property": {
                                    "type": "Literal",
                                    "value": "@mozilla.org/uuid-generator;1",
                                    "raw": "'@mozilla.org/uuid-generator;1'"
                                }
                            },
                            "property": {
                                "type": "Literal",
                                "value": "getService",
                                "raw": "'getService'"
                            }
                        },
                        "arguments": [
                            {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                    "type": "Identifier",
                                    "name": "Ci"
                                },
                                "property": {
                                    "type": "Literal",
                                    "value": "nsIUUIDGenerator",
                                    "raw": "'nsIUUIDGenerator'"
                                }
                            }
                        ]
                    }
                }
            ],
            "kind": "const"
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "ObjectPattern",
                        "properties": [
                            {
                                "type": "Property",
                                "key": {
                                    "type": "Identifier",
                                    "name": "Services"
                                },
                                "computed": false,
                                "value": {
                                    "type": "Identifier",
                                    "name": "Services"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": true
                            }
                        ]
                    },
                    "init": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                                "type": "Identifier",
                                "name": "ChromeUtils"
                            },
                            "property": {
                                "type": "Literal",
                                "value": "import",
                                "raw": "'import'"
                            }
                        },
                        "arguments": [
                            {
                                "type": "Literal",
                                "value": "resource://gre/modules/Services.jsm",
                                "raw": "'resource://gre/modules/Services.jsm'"
                            }
                        ]
                    }
                }
            ],
            "kind": "const"
        },
        {
            "type": "ClassDeclaration",
            "id": {
                "type": "Identifier",
                "name": "Helper"
            },
            "superClass": null,
            "body": {
                "type": "ClassBody",
                "body": [
                    {
                        "type": "MethodDefinition",
                        "key": {
                            "type": "Literal",
                            "value": "addObserver",
                            "raw": "'addObserver'"
                        },
                        "computed": true,
                        "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                                {
                                    "type": "Identifier",
                                    "name": "_0x47c3e9"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "_0x5daca4"
                                }
                            ],
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "Services"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "obs",
                                                        "raw": "'obs'"
                                                    }
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "addObserver",
                                                    "raw": "'addObserver'"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "_0x47c3e9"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "_0x5daca4"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "ReturnStatement",
                                        "argument": {
                                            "type": "ArrowFunctionExpression",
                                            "id": null,
                                            "params": [],
                                            "body": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "Services"
                                                        },
                                                        "property": {
                                                            "type": "Literal",
                                                            "value": "obs",
                                                            "raw": "'obs'"
                                                        }
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "removeObserver",
                                                        "raw": "'removeObserver'"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0x47c3e9"
                                                    },
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0x5daca4"
                                                    }
                                                ]
                                            },
                                            "generator": false,
                                            "expression": true,
                                            "async": false
                                        }
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "kind": "method",
                        "static": false
                    },
                    {
                        "type": "MethodDefinition",
                        "key": {
                            "type": "Literal",
                            "value": "addMessageListener",
                            "raw": "'addMessageListener'"
                        },
                        "computed": true,
                        "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                                {
                                    "type": "Identifier",
                                    "name": "_0xf1da80"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "_0x52f38f"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "_0x9b1e7e"
                                }
                            ],
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "_0xf1da80"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "addMessageListener",
                                                    "raw": "'addMessageListener'"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "_0x52f38f"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "_0x9b1e7e"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "ReturnStatement",
                                        "argument": {
                                            "type": "ArrowFunctionExpression",
                                            "id": null,
                                            "params": [],
                                            "body": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "_0xf1da80"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "removeMessageListener",
                                                        "raw": "'removeMessageListener'"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0x52f38f"
                                                    },
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0x9b1e7e"
                                                    }
                                                ]
                                            },
                                            "generator": false,
                                            "expression": true,
                                            "async": false
                                        }
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "kind": "method",
                        "static": false
                    },
                    {
                        "type": "MethodDefinition",
                        "key": {
                            "type": "Literal",
                            "value": "addEventListener",
                            "raw": "'addEventListener'"
                        },
                        "computed": true,
                        "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                                {
                                    "type": "Identifier",
                                    "name": "_0x2f13c1"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "_0x1e706c"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "_0x5e514c"
                                }
                            ],
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "_0x2f13c1"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "addEventListener",
                                                    "raw": "'addEventListener'"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "_0x1e706c"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "_0x5e514c"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "ReturnStatement",
                                        "argument": {
                                            "type": "ArrowFunctionExpression",
                                            "id": null,
                                            "params": [],
                                            "body": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "_0x2f13c1"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "removeEventListener",
                                                        "raw": "'removeEventListener'"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0x1e706c"
                                                    },
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0x5e514c"
                                                    }
                                                ]
                                            },
                                            "generator": false,
                                            "expression": true,
                                            "async": false
                                        }
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "kind": "method",
                        "static": false
                    },
                    {
                        "type": "MethodDefinition",
                        "key": {
                            "type": "Literal",
                            "value": "awaitEvent",
                            "raw": "'awaitEvent'"
                        },
                        "computed": true,
                        "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                                {
                                    "type": "Identifier",
                                    "name": "_0x3548b0"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "_0x5baa19"
                                }
                            ],
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "ReturnStatement",
                                        "argument": {
                                            "type": "NewExpression",
                                            "callee": {
                                                "type": "Identifier",
                                                "name": "Promise"
                                            },
                                            "arguments": [
                                                {
                                                    "type": "ArrowFunctionExpression",
                                                    "id": null,
                                                    "params": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "_0x1b724d"
                                                        }
                                                    ],
                                                    "body": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "Literal",
                                                                        "value": "JAAuc",
                                                                        "raw": "'JAAuc'"
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": "VHCoI",
                                                                        "raw": "'VHCoI'"
                                                                    }
                                                                },
                                                                "consequent": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                                "type": "UnaryExpression",
                                                                                "operator": "!",
                                                                                "argument": {
                                                                                    "type": "Identifier",
                                                                                    "name": "status"
                                                                                },
                                                                                "prefix": true
                                                                            },
                                                                            "consequent": {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": null,
                                                                                    "raw": "null"
                                                                                }
                                                                            },
                                                                            "alternate": null
                                                                        },
                                                                        {
                                                                            "type": "ForOfStatement",
                                                                            "left": {
                                                                                "type": "VariableDeclaration",
                                                                                "declarations": [
                                                                                    {
                                                                                        "type": "VariableDeclarator",
                                                                                        "id": {
                                                                                            "type": "Identifier",
                                                                                            "name": "_0x31cddc"
                                                                                        },
                                                                                        "init": null
                                                                                    }
                                                                                ],
                                                                                "kind": "const"
                                                                            },
                                                                            "right": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "Object"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": "keys",
                                                                                        "raw": "'keys'"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "Cr"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "body": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "IfStatement",
                                                                                        "test": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "===",
                                                                                            "left": {
                                                                                                "type": "MemberExpression",
                                                                                                "computed": true,
                                                                                                "object": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "Cr"
                                                                                                },
                                                                                                "property": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "_0x31cddc"
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "Identifier",
                                                                                                "name": "status"
                                                                                            }
                                                                                        },
                                                                                        "consequent": {
                                                                                            "type": "ReturnStatement",
                                                                                            "argument": {
                                                                                                "type": "Identifier",
                                                                                                "name": "_0x31cddc"
                                                                                            }
                                                                                        },
                                                                                        "alternate": null
                                                                                    }
                                                                                ]
                                                                            }
                                                                        },
                                                                        {
                                                                            "type": "IfStatement",
                                                                            "test": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "===",
                                                                                "left": {
                                                                                    "type": "BinaryExpression",
                                                                                    "operator": "&",
                                                                                    "left": {
                                                                                        "type": "Identifier",
                                                                                        "name": "status"
                                                                                    },
                                                                                    "right": {
                                                                                        "type": "Literal",
                                                                                        "value": 16711680,
                                                                                        "raw": "0xff0000"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": 5898240,
                                                                                    "raw": "0x5a0000"
                                                                                }
                                                                            },
                                                                            "consequent": {
                                                                                "type": "BlockStatement",
                                                                                "body": [
                                                                                    {
                                                                                        "type": "IfStatement",
                                                                                        "test": {
                                                                                            "type": "BinaryExpression",
                                                                                            "operator": "<",
                                                                                            "left": {
                                                                                                "type": "BinaryExpression",
                                                                                                "operator": "&",
                                                                                                "left": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "status"
                                                                                                },
                                                                                                "right": {
                                                                                                    "type": "Literal",
                                                                                                    "value": 65535,
                                                                                                    "raw": "0xffff"
                                                                                                }
                                                                                            },
                                                                                            "right": {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": true,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "Math"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Literal",
                                                                                                        "value": "abs",
                                                                                                        "raw": "'abs'"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "MemberExpression",
                                                                                                        "computed": true,
                                                                                                        "object": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": true,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "Ci"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "nsINSSErrorsService",
                                                                                                                "raw": "'nsINSSErrorsService'"
                                                                                                            }
                                                                                                        },
                                                                                                        "property": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "NSS_SEC_ERROR_BASE",
                                                                                                            "raw": "'NSS_SEC_ERROR_BASE'"
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        "consequent": {
                                                                                            "type": "BlockStatement",
                                                                                            "body": [
                                                                                                {
                                                                                                    "type": "VariableDeclaration",
                                                                                                    "declarations": [
                                                                                                        {
                                                                                                            "type": "VariableDeclarator",
                                                                                                            "id": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "_0x45332b"
                                                                                                            },
                                                                                                            "init": {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "-",
                                                                                                                "left": {
                                                                                                                    "type": "CallExpression",
                                                                                                                    "callee": {
                                                                                                                        "type": "MemberExpression",
                                                                                                                        "computed": true,
                                                                                                                        "object": {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "Math"
                                                                                                                        },
                                                                                                                        "property": {
                                                                                                                            "type": "Literal",
                                                                                                                            "value": "abs",
                                                                                                                            "raw": "'abs'"
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "arguments": [
                                                                                                                        {
                                                                                                                            "type": "MemberExpression",
                                                                                                                            "computed": true,
                                                                                                                            "object": {
                                                                                                                                "type": "MemberExpression",
                                                                                                                                "computed": true,
                                                                                                                                "object": {
                                                                                                                                    "type": "Identifier",
                                                                                                                                    "name": "Ci"
                                                                                                                                },
                                                                                                                                "property": {
                                                                                                                                    "type": "Literal",
                                                                                                                                    "value": "nsINSSErrorsService",
                                                                                                                                    "raw": "'nsINSSErrorsService'"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "property": {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": "NSS_SEC_ERROR_BASE",
                                                                                                                                "raw": "'NSS_SEC_ERROR_BASE'"
                                                                                                                            }
                                                                                                                        }
                                                                                                                    ]
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "BinaryExpression",
                                                                                                                    "operator": "&",
                                                                                                                    "left": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "status"
                                                                                                                    },
                                                                                                                    "right": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": 65535,
                                                                                                                        "raw": "0xffff"
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    ],
                                                                                                    "kind": "const"
                                                                                                },
                                                                                                {
                                                                                                    "type": "SwitchStatement",
                                                                                                    "discriminant": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "_0x45332b"
                                                                                                    },
                                                                                                    "cases": [
                                                                                                        {
                                                                                                            "type": "SwitchCase",
                                                                                                            "test": {
                                                                                                                "type": "Literal",
                                                                                                                "value": 11,
                                                                                                                "raw": "0xb"
                                                                                                            },
                                                                                                            "consequent": [
                                                                                                                {
                                                                                                                    "type": "ReturnStatement",
                                                                                                                    "argument": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "SEC_ERROR_EXPIRED_CERTIFICATE",
                                                                                                                        "raw": "'SEC_ERROR_EXPIRED_CERTIFICATE'"
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "SwitchCase",
                                                                                                            "test": {
                                                                                                                "type": "Literal",
                                                                                                                "value": 12,
                                                                                                                "raw": "0xc"
                                                                                                            },
                                                                                                            "consequent": [
                                                                                                                {
                                                                                                                    "type": "ReturnStatement",
                                                                                                                    "argument": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "SEC_ERROR_REVOKED_CERTIFICATE",
                                                                                                                        "raw": "'SEC_ERROR_REVOKED_CERTIFICATE'"
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "SwitchCase",
                                                                                                            "test": {
                                                                                                                "type": "Literal",
                                                                                                                "value": 13,
                                                                                                                "raw": "0xd"
                                                                                                            },
                                                                                                            "consequent": [
                                                                                                                {
                                                                                                                    "type": "ReturnStatement",
                                                                                                                    "argument": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "SEC_ERROR_UNKNOWN_ISSUER",
                                                                                                                        "raw": "'SEC_ERROR_UNKNOWN_ISSUER'"
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "SwitchCase",
                                                                                                            "test": {
                                                                                                                "type": "Literal",
                                                                                                                "value": 20,
                                                                                                                "raw": "0x14"
                                                                                                            },
                                                                                                            "consequent": [
                                                                                                                {
                                                                                                                    "type": "ReturnStatement",
                                                                                                                    "argument": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "SEC_ERROR_UNTRUSTED_ISSUER",
                                                                                                                        "raw": "'SEC_ERROR_UNTRUSTED_ISSUER'"
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "SwitchCase",
                                                                                                            "test": {
                                                                                                                "type": "Literal",
                                                                                                                "value": 21,
                                                                                                                "raw": "0x15"
                                                                                                            },
                                                                                                            "consequent": [
                                                                                                                {
                                                                                                                    "type": "ReturnStatement",
                                                                                                                    "argument": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "SEC_ERROR_UNTRUSTED_CERT",
                                                                                                                        "raw": "'SEC_ERROR_UNTRUSTED_CERT'"
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "SwitchCase",
                                                                                                            "test": {
                                                                                                                "type": "Literal",
                                                                                                                "value": 36,
                                                                                                                "raw": "0x24"
                                                                                                            },
                                                                                                            "consequent": [
                                                                                                                {
                                                                                                                    "type": "ReturnStatement",
                                                                                                                    "argument": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "SEC_ERROR_CA_CERT_INVALID",
                                                                                                                        "raw": "'SEC_ERROR_CA_CERT_INVALID'"
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "SwitchCase",
                                                                                                            "test": {
                                                                                                                "type": "Literal",
                                                                                                                "value": 90,
                                                                                                                "raw": "0x5a"
                                                                                                            },
                                                                                                            "consequent": [
                                                                                                                {
                                                                                                                    "type": "ReturnStatement",
                                                                                                                    "argument": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "SEC_ERROR_INADEQUATE_KEY_USAGE",
                                                                                                                        "raw": "'SEC_ERROR_INADEQUATE_KEY_USAGE'"
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "SwitchCase",
                                                                                                            "test": {
                                                                                                                "type": "Literal",
                                                                                                                "value": 176,
                                                                                                                "raw": "0xb0"
                                                                                                            },
                                                                                                            "consequent": [
                                                                                                                {
                                                                                                                    "type": "ReturnStatement",
                                                                                                                    "argument": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED",
                                                                                                                        "raw": "'SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED'"
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        },
                                                                                                        {
                                                                                                            "type": "SwitchCase",
                                                                                                            "test": null,
                                                                                                            "consequent": [
                                                                                                                {
                                                                                                                    "type": "ReturnStatement",
                                                                                                                    "argument": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "SEC_ERROR_UNKNOWN",
                                                                                                                        "raw": "'SEC_ERROR_UNKNOWN'"
                                                                                                                    }
                                                                                                                }
                                                                                                            ]
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "alternate": null
                                                                                    },
                                                                                    {
                                                                                        "type": "VariableDeclaration",
                                                                                        "declarations": [
                                                                                            {
                                                                                                "type": "VariableDeclarator",
                                                                                                "id": {
                                                                                                    "type": "Identifier",
                                                                                                    "name": "_0x4c6081"
                                                                                                },
                                                                                                "init": {
                                                                                                    "type": "BinaryExpression",
                                                                                                    "operator": "-",
                                                                                                    "left": {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": true,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "Math"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "abs",
                                                                                                                "raw": "'abs'"
                                                                                                            }
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "MemberExpression",
                                                                                                                "computed": true,
                                                                                                                "object": {
                                                                                                                    "type": "MemberExpression",
                                                                                                                    "computed": true,
                                                                                                                    "object": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "Ci"
                                                                                                                    },
                                                                                                                    "property": {
                                                                                                                        "type": "Literal",
                                                                                                                        "value": "nsINSSErrorsService",
                                                                                                                        "raw": "'nsINSSErrorsService'"
                                                                                                                    }
                                                                                                                },
                                                                                                                "property": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": "NSS_SSL_ERROR_BASE",
                                                                                                                    "raw": "'NSS_SSL_ERROR_BASE'"
                                                                                                                }
                                                                                                            }
                                                                                                        ]
                                                                                                    },
                                                                                                    "right": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "&",
                                                                                                        "left": {
                                                                                                            "type": "Identifier",
                                                                                                            "name": "status"
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Literal",
                                                                                                            "value": 65535,
                                                                                                            "raw": "0xffff"
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        ],
                                                                                        "kind": "const"
                                                                                    },
                                                                                    {
                                                                                        "type": "SwitchStatement",
                                                                                        "discriminant": {
                                                                                            "type": "Identifier",
                                                                                            "name": "_0x4c6081"
                                                                                        },
                                                                                        "cases": [
                                                                                            {
                                                                                                "type": "SwitchCase",
                                                                                                "test": {
                                                                                                    "type": "Literal",
                                                                                                    "value": 3,
                                                                                                    "raw": "0x3"
                                                                                                },
                                                                                                "consequent": [
                                                                                                    {
                                                                                                        "type": "ReturnStatement",
                                                                                                        "argument": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "SSL_ERROR_NO_CERTIFICATE",
                                                                                                            "raw": "'SSL_ERROR_NO_CERTIFICATE'"
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            {
                                                                                                "type": "SwitchCase",
                                                                                                "test": {
                                                                                                    "type": "Literal",
                                                                                                    "value": 4,
                                                                                                    "raw": "0x4"
                                                                                                },
                                                                                                "consequent": [
                                                                                                    {
                                                                                                        "type": "ReturnStatement",
                                                                                                        "argument": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "SSL_ERROR_BAD_CERTIFICATE",
                                                                                                            "raw": "'SSL_ERROR_BAD_CERTIFICATE'"
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            {
                                                                                                "type": "SwitchCase",
                                                                                                "test": {
                                                                                                    "type": "Literal",
                                                                                                    "value": 8,
                                                                                                    "raw": "0x8"
                                                                                                },
                                                                                                "consequent": [
                                                                                                    {
                                                                                                        "type": "ReturnStatement",
                                                                                                        "argument": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "SSL_ERROR_UNSUPPORTED_CERTIFICATE_TYPE",
                                                                                                            "raw": "'SSL_ERROR_UNSUPPORTED_CERTIFICATE_TYPE'"
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            {
                                                                                                "type": "SwitchCase",
                                                                                                "test": {
                                                                                                    "type": "Literal",
                                                                                                    "value": 9,
                                                                                                    "raw": "0x9"
                                                                                                },
                                                                                                "consequent": [
                                                                                                    {
                                                                                                        "type": "ReturnStatement",
                                                                                                        "argument": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "SSL_ERROR_UNSUPPORTED_VERSION",
                                                                                                            "raw": "'SSL_ERROR_UNSUPPORTED_VERSION'"
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            {
                                                                                                "type": "SwitchCase",
                                                                                                "test": {
                                                                                                    "type": "Literal",
                                                                                                    "value": 12,
                                                                                                    "raw": "0xc"
                                                                                                },
                                                                                                "consequent": [
                                                                                                    {
                                                                                                        "type": "ReturnStatement",
                                                                                                        "argument": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "SSL_ERROR_BAD_CERT_DOMAIN",
                                                                                                            "raw": "'SSL_ERROR_BAD_CERT_DOMAIN'"
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            {
                                                                                                "type": "SwitchCase",
                                                                                                "test": null,
                                                                                                "consequent": [
                                                                                                    {
                                                                                                        "type": "ReturnStatement",
                                                                                                        "argument": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "SSL_ERROR_UNKNOWN",
                                                                                                            "raw": "'SSL_ERROR_UNKNOWN'"
                                                                                                        }
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "alternate": null
                                                                        },
                                                                        {
                                                                            "type": "ReturnStatement",
                                                                            "argument": {
                                                                                "type": "Literal",
                                                                                "value": "<unknown error>",
                                                                                "raw": "'<unknown error>'"
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "alternate": {
                                                                    "type": "BlockStatement",
                                                                    "body": [
                                                                        {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "_0x3548b0"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": "addEventListener",
                                                                                        "raw": "'addEventListener'"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "Identifier",
                                                                                        "name": "_0x5baa19"
                                                                                    },
                                                                                    {
                                                                                        "type": "FunctionExpression",
                                                                                        "id": {
                                                                                            "type": "Identifier",
                                                                                            "name": "listener"
                                                                                        },
                                                                                        "params": [],
                                                                                        "body": {
                                                                                            "type": "BlockStatement",
                                                                                            "body": [
                                                                                                {
                                                                                                    "type": "IfStatement",
                                                                                                    "test": {
                                                                                                        "type": "BinaryExpression",
                                                                                                        "operator": "===",
                                                                                                        "left": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "xpzkR",
                                                                                                            "raw": "'xpzkR'"
                                                                                                        },
                                                                                                        "right": {
                                                                                                            "type": "Literal",
                                                                                                            "value": "xpzkR",
                                                                                                            "raw": "'xpzkR'"
                                                                                                        }
                                                                                                    },
                                                                                                    "consequent": {
                                                                                                        "type": "BlockStatement",
                                                                                                        "body": [
                                                                                                            {
                                                                                                                "type": "ExpressionStatement",
                                                                                                                "expression": {
                                                                                                                    "type": "CallExpression",
                                                                                                                    "callee": {
                                                                                                                        "type": "MemberExpression",
                                                                                                                        "computed": true,
                                                                                                                        "object": {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "_0x3548b0"
                                                                                                                        },
                                                                                                                        "property": {
                                                                                                                            "type": "Literal",
                                                                                                                            "value": "removeEventListener",
                                                                                                                            "raw": "'removeEventListener'"
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "arguments": [
                                                                                                                        {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "_0x5baa19"
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "listener"
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "ExpressionStatement",
                                                                                                                "expression": {
                                                                                                                    "type": "CallExpression",
                                                                                                                    "callee": {
                                                                                                                        "type": "Identifier",
                                                                                                                        "name": "_0x1b724d"
                                                                                                                    },
                                                                                                                    "arguments": []
                                                                                                                }
                                                                                                            }
                                                                                                        ]
                                                                                                    },
                                                                                                    "alternate": {
                                                                                                        "type": "BlockStatement",
                                                                                                        "body": [
                                                                                                            {
                                                                                                                "type": "ExpressionStatement",
                                                                                                                "expression": {
                                                                                                                    "type": "CallExpression",
                                                                                                                    "callee": {
                                                                                                                        "type": "MemberExpression",
                                                                                                                        "computed": true,
                                                                                                                        "object": {
                                                                                                                            "type": "MemberExpression",
                                                                                                                            "computed": true,
                                                                                                                            "object": {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "Services"
                                                                                                                            },
                                                                                                                            "property": {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": "obs",
                                                                                                                                "raw": "'obs'"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        "property": {
                                                                                                                            "type": "Literal",
                                                                                                                            "value": "addObserver",
                                                                                                                            "raw": "'addObserver'"
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "arguments": [
                                                                                                                        {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "handler"
                                                                                                                        },
                                                                                                                        {
                                                                                                                            "type": "Identifier",
                                                                                                                            "name": "topic"
                                                                                                                        }
                                                                                                                    ]
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "ReturnStatement",
                                                                                                                "argument": {
                                                                                                                    "type": "ArrowFunctionExpression",
                                                                                                                    "id": null,
                                                                                                                    "params": [],
                                                                                                                    "body": {
                                                                                                                        "type": "CallExpression",
                                                                                                                        "callee": {
                                                                                                                            "type": "MemberExpression",
                                                                                                                            "computed": true,
                                                                                                                            "object": {
                                                                                                                                "type": "MemberExpression",
                                                                                                                                "computed": true,
                                                                                                                                "object": {
                                                                                                                                    "type": "Identifier",
                                                                                                                                    "name": "Services"
                                                                                                                                },
                                                                                                                                "property": {
                                                                                                                                    "type": "Literal",
                                                                                                                                    "value": "obs",
                                                                                                                                    "raw": "'obs'"
                                                                                                                                }
                                                                                                                            },
                                                                                                                            "property": {
                                                                                                                                "type": "Literal",
                                                                                                                                "value": "removeObserver",
                                                                                                                                "raw": "'removeObserver'"
                                                                                                                            }
                                                                                                                        },
                                                                                                                        "arguments": [
                                                                                                                            {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "handler"
                                                                                                                            },
                                                                                                                            {
                                                                                                                                "type": "Identifier",
                                                                                                                                "name": "topic"
                                                                                                                            }
                                                                                                                        ]
                                                                                                                    },
                                                                                                                    "generator": false,
                                                                                                                    "expression": true,
                                                                                                                    "async": false
                                                                                                                }
                                                                                                            }
                                                                                                        ]
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        },
                                                                                        "generator": false,
                                                                                        "expression": false,
                                                                                        "async": false
                                                                                    }
                                                                                ]
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "generator": false,
                                                    "expression": false,
                                                    "async": false
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "kind": "method",
                        "static": false
                    },
                    {
                        "type": "MethodDefinition",
                        "key": {
                            "type": "Literal",
                            "value": "on",
                            "raw": "'on'"
                        },
                        "computed": true,
                        "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                                {
                                    "type": "Identifier",
                                    "name": "_0xea0d80"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "_0xb340e8"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "_0x3db03d"
                                }
                            ],
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                            {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                    "type": "Identifier",
                                                    "name": "_0x5a85f0"
                                                },
                                                "init": {
                                                    "type": "ArrowFunctionExpression",
                                                    "id": null,
                                                    "params": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "_0x3f37be"
                                                        },
                                                        {
                                                            "type": "RestElement",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "_0x5f1a58"
                                                            }
                                                        }
                                                    ],
                                                    "body": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "_0x3db03d"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "SpreadElement",
                                                                "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "_0x5f1a58"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "generator": false,
                                                    "expression": true,
                                                    "async": false
                                                }
                                            }
                                        ],
                                        "kind": "const"
                                    },
                                    {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "_0xea0d80"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "on",
                                                    "raw": "'on'"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "_0xb340e8"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "_0x5a85f0"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "ReturnStatement",
                                        "argument": {
                                            "type": "ArrowFunctionExpression",
                                            "id": null,
                                            "params": [],
                                            "body": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "_0xea0d80"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "off",
                                                        "raw": "'off'"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0xb340e8"
                                                    },
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0x5a85f0"
                                                    }
                                                ]
                                            },
                                            "generator": false,
                                            "expression": true,
                                            "async": false
                                        }
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "kind": "method",
                        "static": false
                    },
                    {
                        "type": "MethodDefinition",
                        "key": {
                            "type": "Literal",
                            "value": "addProgressListener",
                            "raw": "'addProgressListener'"
                        },
                        "computed": true,
                        "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                                {
                                    "type": "Identifier",
                                    "name": "_0x46ab8a"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "_0x2c8efc"
                                },
                                {
                                    "type": "Identifier",
                                    "name": "_0x36a1f9"
                                }
                            ],
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "_0x46ab8a"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "addProgressListener",
                                                    "raw": "'addProgressListener'"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "_0x2c8efc"
                                                },
                                                {
                                                    "type": "Identifier",
                                                    "name": "_0x36a1f9"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "ReturnStatement",
                                        "argument": {
                                            "type": "ArrowFunctionExpression",
                                            "id": null,
                                            "params": [],
                                            "body": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "_0x46ab8a"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "removeProgressListener",
                                                        "raw": "'removeProgressListener'"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0x2c8efc"
                                                    }
                                                ]
                                            },
                                            "generator": false,
                                            "expression": true,
                                            "async": false
                                        }
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "kind": "method",
                        "static": false
                    },
                    {
                        "type": "MethodDefinition",
                        "key": {
                            "type": "Literal",
                            "value": "removeListeners",
                            "raw": "'removeListeners'"
                        },
                        "computed": true,
                        "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                                {
                                    "type": "Identifier",
                                    "name": "_0x63a82a"
                                }
                            ],
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "ForOfStatement",
                                        "left": {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "_0x8c66e0"
                                                    },
                                                    "init": null
                                                }
                                            ],
                                            "kind": "const"
                                        },
                                        "right": {
                                            "type": "Identifier",
                                            "name": "_0x63a82a"
                                        },
                                        "body": {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "_0x8c66e0"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "call",
                                                        "raw": "'call'"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": null,
                                                        "raw": "null"
                                                    }
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "_0x63a82a"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "splice",
                                                    "raw": "'splice'"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": 0,
                                                    "raw": "0x0"
                                                },
                                                {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "_0x63a82a"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "length",
                                                        "raw": "'length'"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "kind": "method",
                        "static": false
                    },
                    {
                        "type": "MethodDefinition",
                        "key": {
                            "type": "Literal",
                            "value": "generateId",
                            "raw": "'generateId'"
                        },
                        "computed": true,
                        "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                            {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                    "type": "Identifier",
                                                    "name": "_0x388641"
                                                },
                                                "init": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "uuidGen"
                                                                },
                                                                "property": {
                                                                    "type": "Literal",
                                                                    "value": "generateUUID",
                                                                    "raw": "'generateUUID'"
                                                                }
                                                            },
                                                            "arguments": []
                                                        },
                                                        "property": {
                                                            "type": "Literal",
                                                            "value": "toString",
                                                            "raw": "'toString'"
                                                        }
                                                    },
                                                    "arguments": []
                                                }
                                            }
                                        ],
                                        "kind": "const"
                                    },
                                    {
                                        "type": "ReturnStatement",
                                        "argument": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "_0x388641"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "substring",
                                                    "raw": "'substring'"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Literal",
                                                    "value": 1,
                                                    "raw": "0x1"
                                                },
                                                {
                                                    "type": "BinaryExpression",
                                                    "operator": "-",
                                                    "left": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "_0x388641"
                                                        },
                                                        "property": {
                                                            "type": "Literal",
                                                            "value": "length",
                                                            "raw": "'length'"
                                                        }
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": 1,
                                                        "raw": "0x1"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "kind": "method",
                        "static": false
                    },
                    {
                        "type": "MethodDefinition",
                        "key": {
                            "type": "Literal",
                            "value": "getLoadContext",
                            "raw": "'getLoadContext'"
                        },
                        "computed": true,
                        "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                                {
                                    "type": "Identifier",
                                    "name": "_0x16df84"
                                }
                            ],
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                            {
                                                "type": "VariableDeclarator",
                                                "id": {
                                                    "type": "Identifier",
                                                    "name": "_0x3180de"
                                                },
                                                "init": {
                                                    "type": "Literal",
                                                    "value": null,
                                                    "raw": "null"
                                                }
                                            }
                                        ],
                                        "kind": "let"
                                    },
                                    {
                                        "type": "TryStatement",
                                        "block": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "_0x16df84"
                                                        },
                                                        "property": {
                                                            "type": "Literal",
                                                            "value": "notificationCallbacks",
                                                            "raw": "'notificationCallbacks'"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "_0x3180de"
                                                            },
                                                            "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x16df84"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "notificationCallbacks",
                                                                            "raw": "'notificationCallbacks'"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": "getInterface",
                                                                        "raw": "'getInterface'"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "Ci"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "nsILoadContext",
                                                                            "raw": "'nsILoadContext'"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    "alternate": null
                                                }
                                            ]
                                        },
                                        "handler": {
                                            "type": "CatchClause",
                                            "param": {
                                                "type": "Identifier",
                                                "name": "_0x3c2d27"
                                            },
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": []
                                            }
                                        },
                                        "finalizer": null
                                    },
                                    {
                                        "type": "TryStatement",
                                        "block": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "LogicalExpression",
                                                        "operator": "&&",
                                                        "left": {
                                                            "type": "UnaryExpression",
                                                            "operator": "!",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "_0x3180de"
                                                            },
                                                            "prefix": true
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "_0x16df84"
                                                            },
                                                            "property": {
                                                                "type": "Literal",
                                                                "value": "loadGroup",
                                                                "raw": "'loadGroup'"
                                                            }
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "ExpressionStatement",
                                                        "expression": {
                                                            "type": "AssignmentExpression",
                                                            "operator": "=",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "_0x3180de"
                                                            },
                                                            "right": {
                                                                "type": "CallExpression",
                                                                "callee": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "_0x16df84"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": "loadGroup",
                                                                                "raw": "'loadGroup'"
                                                                            }
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "notificationCallbacks",
                                                                            "raw": "'notificationCallbacks'"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": "getInterface",
                                                                        "raw": "'getInterface'"
                                                                    }
                                                                },
                                                                "arguments": [
                                                                    {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "Ci"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "nsILoadContext",
                                                                            "raw": "'nsILoadContext'"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    "alternate": null
                                                }
                                            ]
                                        },
                                        "handler": {
                                            "type": "CatchClause",
                                            "param": {
                                                "type": "Identifier",
                                                "name": "_0x543a31"
                                            },
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": []
                                            }
                                        },
                                        "finalizer": null
                                    },
                                    {
                                        "type": "ReturnStatement",
                                        "argument": {
                                            "type": "Identifier",
                                            "name": "_0x3180de"
                                        }
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "kind": "method",
                        "static": false
                    },
                    {
                        "type": "MethodDefinition",
                        "key": {
                            "type": "Literal",
                            "value": "getNetworkErrorStatusText",
                            "raw": "'getNetworkErrorStatusText'"
                        },
                        "computed": true,
                        "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                                {
                                    "type": "Identifier",
                                    "name": "_0x1aa451"
                                }
                            ],
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "IfStatement",
                                        "test": {
                                            "type": "UnaryExpression",
                                            "operator": "!",
                                            "argument": {
                                                "type": "Identifier",
                                                "name": "_0x1aa451"
                                            },
                                            "prefix": true
                                        },
                                        "consequent": {
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "Literal",
                                                "value": null,
                                                "raw": "null"
                                            }
                                        },
                                        "alternate": null
                                    },
                                    {
                                        "type": "ForOfStatement",
                                        "left": {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "_0x225be5"
                                                    },
                                                    "init": null
                                                }
                                            ],
                                            "kind": "const"
                                        },
                                        "right": {
                                            "type": "CallExpression",
                                            "callee": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "Object"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "keys",
                                                    "raw": "'keys'"
                                                }
                                            },
                                            "arguments": [
                                                {
                                                    "type": "Identifier",
                                                    "name": "Cr"
                                                }
                                            ]
                                        },
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "===",
                                                        "left": {
                                                            "type": "Literal",
                                                            "value": "HSFBM",
                                                            "raw": "'HSFBM'"
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": "SpTCY",
                                                            "raw": "'SpTCY'"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "VariableDeclaration",
                                                                "declarations": [
                                                                    {
                                                                        "type": "VariableDeclarator",
                                                                        "id": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x598a6f"
                                                                        },
                                                                        "init": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "CallExpression",
                                                                                    "callee": {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "Identifier",
                                                                                            "name": "uuidGen"
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": "generateUUID",
                                                                                            "raw": "'generateUUID'"
                                                                                        }
                                                                                    },
                                                                                    "arguments": []
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": "toString",
                                                                                    "raw": "'toString'"
                                                                                }
                                                                            },
                                                                            "arguments": []
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "const"
                                                            },
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x598a6f"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "substring",
                                                                            "raw": "'substring'"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": 1,
                                                                            "raw": "0x1"
                                                                        },
                                                                        {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "-",
                                                                            "left": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "_0x598a6f"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": "length",
                                                                                    "raw": "'length'"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": 1,
                                                                                "raw": "0x1"
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "IfStatement",
                                                                "test": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "===",
                                                                    "left": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "Cr"
                                                                        },
                                                                        "property": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x225be5"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Identifier",
                                                                        "name": "_0x1aa451"
                                                                    }
                                                                },
                                                                "consequent": {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Identifier",
                                                                        "name": "_0x225be5"
                                                                    }
                                                                },
                                                                "alternate": null
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "IfStatement",
                                        "test": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                                "type": "BinaryExpression",
                                                "operator": "&",
                                                "left": {
                                                    "type": "Identifier",
                                                    "name": "_0x1aa451"
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": 16711680,
                                                    "raw": "0xff0000"
                                                }
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": 5898240,
                                                "raw": "0x5a0000"
                                            }
                                        },
                                        "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "<",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "&",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "_0x1aa451"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": 65535,
                                                                "raw": "0xffff"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "Math"
                                                                },
                                                                "property": {
                                                                    "type": "Literal",
                                                                    "value": "abs",
                                                                    "raw": "'abs'"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "Ci"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "nsINSSErrorsService",
                                                                            "raw": "'nsINSSErrorsService'"
                                                                        }
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": "NSS_SEC_ERROR_BASE",
                                                                        "raw": "'NSS_SEC_ERROR_BASE'"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "VariableDeclaration",
                                                                "declarations": [
                                                                    {
                                                                        "type": "VariableDeclarator",
                                                                        "id": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x338650"
                                                                        },
                                                                        "init": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "-",
                                                                            "left": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "Math"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": "abs",
                                                                                        "raw": "'abs'"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "MemberExpression",
                                                                                        "computed": true,
                                                                                        "object": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "Ci"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Literal",
                                                                                                "value": "nsINSSErrorsService",
                                                                                                "raw": "'nsINSSErrorsService'"
                                                                                            }
                                                                                        },
                                                                                        "property": {
                                                                                            "type": "Literal",
                                                                                            "value": "NSS_SEC_ERROR_BASE",
                                                                                            "raw": "'NSS_SEC_ERROR_BASE'"
                                                                                        }
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "right": {
                                                                                "type": "BinaryExpression",
                                                                                "operator": "&",
                                                                                "left": {
                                                                                    "type": "Identifier",
                                                                                    "name": "_0x1aa451"
                                                                                },
                                                                                "right": {
                                                                                    "type": "Literal",
                                                                                    "value": 65535,
                                                                                    "raw": "0xffff"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "const"
                                                            },
                                                            {
                                                                "type": "SwitchStatement",
                                                                "discriminant": {
                                                                    "type": "Identifier",
                                                                    "name": "_0x338650"
                                                                },
                                                                "cases": [
                                                                    {
                                                                        "type": "SwitchCase",
                                                                        "test": {
                                                                            "type": "Literal",
                                                                            "value": 11,
                                                                            "raw": "0xb"
                                                                        },
                                                                        "consequent": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": "SEC_ERROR_EXPIRED_CERTIFICATE",
                                                                                    "raw": "'SEC_ERROR_EXPIRED_CERTIFICATE'"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "SwitchCase",
                                                                        "test": {
                                                                            "type": "Literal",
                                                                            "value": 12,
                                                                            "raw": "0xc"
                                                                        },
                                                                        "consequent": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": "SEC_ERROR_REVOKED_CERTIFICATE",
                                                                                    "raw": "'SEC_ERROR_REVOKED_CERTIFICATE'"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "SwitchCase",
                                                                        "test": {
                                                                            "type": "Literal",
                                                                            "value": 13,
                                                                            "raw": "0xd"
                                                                        },
                                                                        "consequent": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": "SEC_ERROR_UNKNOWN_ISSUER",
                                                                                    "raw": "'SEC_ERROR_UNKNOWN_ISSUER'"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "SwitchCase",
                                                                        "test": {
                                                                            "type": "Literal",
                                                                            "value": 20,
                                                                            "raw": "0x14"
                                                                        },
                                                                        "consequent": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": "SEC_ERROR_UNTRUSTED_ISSUER",
                                                                                    "raw": "'SEC_ERROR_UNTRUSTED_ISSUER'"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "SwitchCase",
                                                                        "test": {
                                                                            "type": "Literal",
                                                                            "value": 21,
                                                                            "raw": "0x15"
                                                                        },
                                                                        "consequent": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": "SEC_ERROR_UNTRUSTED_CERT",
                                                                                    "raw": "'SEC_ERROR_UNTRUSTED_CERT'"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "SwitchCase",
                                                                        "test": {
                                                                            "type": "Literal",
                                                                            "value": 36,
                                                                            "raw": "0x24"
                                                                        },
                                                                        "consequent": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": "SEC_ERROR_CA_CERT_INVALID",
                                                                                    "raw": "'SEC_ERROR_CA_CERT_INVALID'"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "SwitchCase",
                                                                        "test": {
                                                                            "type": "Literal",
                                                                            "value": 90,
                                                                            "raw": "0x5a"
                                                                        },
                                                                        "consequent": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": "SEC_ERROR_INADEQUATE_KEY_USAGE",
                                                                                    "raw": "'SEC_ERROR_INADEQUATE_KEY_USAGE'"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "SwitchCase",
                                                                        "test": {
                                                                            "type": "Literal",
                                                                            "value": 176,
                                                                            "raw": "0xb0"
                                                                        },
                                                                        "consequent": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": "SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED",
                                                                                    "raw": "'SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED'"
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "type": "SwitchCase",
                                                                        "test": null,
                                                                        "consequent": [
                                                                            {
                                                                                "type": "ReturnStatement",
                                                                                "argument": {
                                                                                    "type": "Literal",
                                                                                    "value": "SEC_ERROR_UNKNOWN",
                                                                                    "raw": "'SEC_ERROR_UNKNOWN'"
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "_0x15e85b"
                                                            },
                                                            "init": {
                                                                "type": "BinaryExpression",
                                                                "operator": "-",
                                                                "left": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "Math"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "abs",
                                                                            "raw": "'abs'"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "Ci"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": "nsINSSErrorsService",
                                                                                    "raw": "'nsINSSErrorsService'"
                                                                                }
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": "NSS_SSL_ERROR_BASE",
                                                                                "raw": "'NSS_SSL_ERROR_BASE'"
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "right": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "&",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "_0x1aa451"
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": 65535,
                                                                        "raw": "0xffff"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "kind": "const"
                                                },
                                                {
                                                    "type": "SwitchStatement",
                                                    "discriminant": {
                                                        "type": "Identifier",
                                                        "name": "_0x15e85b"
                                                    },
                                                    "cases": [
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": 3,
                                                                "raw": "0x3"
                                                            },
                                                            "consequent": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Literal",
                                                                        "value": "SSL_ERROR_NO_CERTIFICATE",
                                                                        "raw": "'SSL_ERROR_NO_CERTIFICATE'"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": 4,
                                                                "raw": "0x4"
                                                            },
                                                            "consequent": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Literal",
                                                                        "value": "SSL_ERROR_BAD_CERTIFICATE",
                                                                        "raw": "'SSL_ERROR_BAD_CERTIFICATE'"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": 8,
                                                                "raw": "0x8"
                                                            },
                                                            "consequent": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Literal",
                                                                        "value": "SSL_ERROR_UNSUPPORTED_CERTIFICATE_TYPE",
                                                                        "raw": "'SSL_ERROR_UNSUPPORTED_CERTIFICATE_TYPE'"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": 9,
                                                                "raw": "0x9"
                                                            },
                                                            "consequent": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Literal",
                                                                        "value": "SSL_ERROR_UNSUPPORTED_VERSION",
                                                                        "raw": "'SSL_ERROR_UNSUPPORTED_VERSION'"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": {
                                                                "type": "Literal",
                                                                "value": 12,
                                                                "raw": "0xc"
                                                            },
                                                            "consequent": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Literal",
                                                                        "value": "SSL_ERROR_BAD_CERT_DOMAIN",
                                                                        "raw": "'SSL_ERROR_BAD_CERT_DOMAIN'"
                                                                    }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "SwitchCase",
                                                            "test": null,
                                                            "consequent": [
                                                                {
                                                                    "type": "ReturnStatement",
                                                                    "argument": {
                                                                        "type": "Literal",
                                                                        "value": "SSL_ERROR_UNKNOWN",
                                                                        "raw": "'SSL_ERROR_UNKNOWN'"
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        "alternate": null
                                    },
                                    {
                                        "type": "ReturnStatement",
                                        "argument": {
                                            "type": "Literal",
                                            "value": "<unknown error>",
                                            "raw": "'<unknown error>'"
                                        }
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "kind": "method",
                        "static": false
                    },
                    {
                        "type": "MethodDefinition",
                        "key": {
                            "type": "Literal",
                            "value": "browsingContextToFrameId",
                            "raw": "'browsingContextToFrameId'"
                        },
                        "computed": true,
                        "value": {
                            "type": "FunctionExpression",
                            "id": null,
                            "params": [
                                {
                                    "type": "Identifier",
                                    "name": "_0x1d4e82"
                                }
                            ],
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "IfStatement",
                                        "test": {
                                            "type": "UnaryExpression",
                                            "operator": "!",
                                            "argument": {
                                                "type": "Identifier",
                                                "name": "_0x1d4e82"
                                            },
                                            "prefix": true
                                        },
                                        "consequent": {
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "Identifier",
                                                "name": "undefined"
                                            }
                                        },
                                        "alternate": null
                                    },
                                    {
                                        "type": "ReturnStatement",
                                        "argument": {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                                "type": "Literal",
                                                "value": "frame-",
                                                "raw": "'frame-'"
                                            },
                                            "right": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "_0x1d4e82"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "id",
                                                    "raw": "'id'"
                                                }
                                            }
                                        }
                                    }
                                ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                        },
                        "kind": "method",
                        "static": false
                    }
                ]
            }
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "EXPORTED_SYMBOLS"
                    },
                    "init": {
                        "type": "ArrayExpression",
                        "elements": [
                            {
                                "type": "Literal",
                                "value": "Helper",
                                "raw": "'Helper'"
                            }
                        ]
                    }
                }
            ],
            "kind": "var"
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                        "type": "ThisExpression"
                    },
                    "property": {
                        "type": "Literal",
                        "value": "Helper",
                        "raw": "'Helper'"
                    }
                },
                "right": {
                    "type": "Identifier",
                    "name": "Helper"
                }
            }
        }
    ],
    "sourceType": "script"
}