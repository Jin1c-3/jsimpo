import _0x494eae from'fs-extra';import _0x1ef4fa from'../resource-schema';import _0x4bd920 from'@hapi/joi';jest['mock']('fs-extra');jest['mock']('node-fetch',()=>require('fetch-mock-jest')['sandbox']());const fetchMock=require('node-fetch');const file=require('./file');const root=__dirname;const content='Hello, world!';const url='http://example.com/file1.txt';const url2='http://example.com/file2.txt';const response1='query {\n  allGatsbyPlugin {\n    nodes {\n      name\n      options\n      resolvedOptions\n      package {\n        version\n      }\n      ... on GatsbyTheme {\n        files {\n          nodes {\n            path\n          }\n        }\n        shadowedFiles {\n          nodes {\n            path\n          }\n        }\n      }\n    }\n  }  \n}';const response2='const\x20options\x20=\x20{\x0a\x20\x20key:\x20process.env.WHATEVER\x0a\x20\x20\x0a}';describe('file resource',()=>{var DebFyj={'YvUGk':function(x,y){return x+y;},'DLkML':function(callee,param1){return callee(param1);},'VraXX':function(callee,param1){return callee(param1);},'NTfbR':function(callee,param1){return callee(param1);},'tmwPf':function(callee,param1){return callee(param1);},'vepPo':function(callee,param1){return callee(param1);},'tcoXH':function(callee,param1){return callee(param1);},'DonXD':function(callee,param1,param2){return callee(param1,param2);}};DebFyj['DonXD'](test,'e2e\x20file\x20resource\x20test',async()=>{const context={'root':root};const initialObject={'path':'file.txt','content':content};const partialUpdate={'content':DebFyj['YvUGk'](content,'1')};_0x494eae['readFile']['mockReturnValue'](initialObject['content']);const createPlan=await file['plan'](context,initialObject);DebFyj['DLkML'](expect,createPlan)['toMatchInlineSnapshot']('\n      Object {\n        "currentState": "Hello, world!",\n        "describe": "Write file.txt",\n        "diff": "",\n        "newState": "Hello, world!",\n      }\n    ');const createResponse=await file['create'](context,initialObject);const validateResult=_0x4bd920['validate'](createResponse,{...file['schema'],..._0x1ef4fa});DebFyj['DLkML'](expect,validateResult['error'])['toBeNull']();DebFyj['VraXX'](expect,createResponse)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22_message\x22:\x20\x22Wrote\x20file\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22content\x22:\x20\x22Hello,\x20world!\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22id\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22path\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20');const readResponse=await file['read'](context,createResponse['id']);DebFyj['VraXX'](expect,readResponse)['toEqual'](createResponse);const updatedResource={...readResponse,...partialUpdate};const updatePlan=await file['plan'](context,updatedResource);DebFyj['NTfbR'](expect,updatePlan)['toMatchInlineSnapshot']('\n      Object {\n        "currentState": "Hello, world!",\n        "describe": "Write file.txt",\n        "diff": "- Original  - 1\n      + Modified  + 1\n\n      - Hello, world!\n      + Hello, world!1",\n        "newState": "Hello, world!1",\n      }\n    ');_0x494eae['readFile']['mockReturnValueOnce'](partialUpdate['content']);const updateResponse=await file['update'](context,updatedResource);DebFyj['NTfbR'](expect,updateResponse)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22_message\x22:\x20\x22Wrote\x20file\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22content\x22:\x20\x22Hello,\x20world!1\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22id\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22path\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20');await file['destroy'](context,updateResponse);});test('e2e remote file resource test',async()=>{const context={'root':root};const initialObject={'path':'file.txt','content':url};const partialUpdate={'content':url2};_0x494eae['readFile']['mockReturnValue'](response1);const {Readable,PassThrough}=DebFyj['NTfbR'](require,'stream');_0x494eae['createWriteStream']['mockImplementation'](()=>new PassThrough());fetchMock['get'](url,()=>{const readable=new Readable();readable['push'](response1);readable['push'](null);return readable;},{'sendAsJson':![]})['mock'](url2,response2);_0x494eae['readFile']['mockReturnValueOnce']('');const createPlan=await file['plan'](context,initialObject);DebFyj['tmwPf'](expect,createPlan['currentState'])['toEqual']('');expect(createPlan['newState'])['toEqual'](response1);const createResponse=await file['create'](context,initialObject);const validateResult=_0x4bd920['validate'](createResponse,{...file['schema'],..._0x1ef4fa});DebFyj['tmwPf'](expect,validateResult['error'])['toBeNull']();DebFyj['tmwPf'](expect,createResponse['content'])['toEqual'](response1);const readResponse=await file['read'](context,createResponse['id']);DebFyj['tmwPf'](expect,readResponse)['toEqual'](createResponse);const updatedResource={...readResponse,...partialUpdate};const updatePlan=await file['plan'](context,updatedResource);DebFyj['vepPo'](expect,updatePlan['diff'])['toMatchInlineSnapshot']('\n      "- Original  - 23\n      + Modified  +  3\n\n      - query {\n      -   allGatsbyPlugin {\n      -     nodes {\n      -       name\n      -       options\n      -       resolvedOptions\n      -       package {\n      -         version\n      -       }\n      -       ... on GatsbyTheme {\n      -         files {\n      -           nodes {\n      -             path\n      -           }\n      -         }\n      -         shadowedFiles {\n      -           nodes {\n      -             path\n      -           }\n      -         }\n      -       }\n      -     }\n      -   }  \n      + const options = {\n      +   key: process.env.WHATEVER\n      +   \n        }"\n    ');_0x494eae['readFile']['mockReturnValueOnce'](partialUpdate['content']);const updateResponse=await file['update'](context,updatedResource);DebFyj['tcoXH'](expect,updateResponse)['toMatchInlineSnapshot']('\n      Object {\n        "_message": "Wrote file file.txt",\n        "content": "http://example.com/file2.txt",\n        "id": "file.txt",\n        "path": "file.txt",\n      }\n    ');await file['destroy'](context,updateResponse);});});