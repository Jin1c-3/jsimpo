'use strict';
const peq = new Uint32Array(0xc * -0x424 + -0xc76 * 0x27 + 0x18bd5 * 0x2), myers_32 = (_0xff3395, _0x5eb6ce) => {
        const _0x414012 = _0xff3395['length'], _0x418996 = _0x5eb6ce['length'], _0x29a1f9 = -0xd8d + 0x26cd + -0x193f * 0x1 << _0x414012 - (-0x2149 + 0x1d98 + 0x3b2);
        let _0x5baf0f = -(0x2 * 0xc30 + 0x21 * -0x81 + 0x2 * -0x3df), _0x46513c = 0x4d2 * -0x8 + -0xf51 * -0x1 + 0x173f, _0x3ff4d7 = _0x414012, _0x23e4c2 = _0x414012;
        while (_0x23e4c2--) {
            peq[_0xff3395['charCodeAt'](_0x23e4c2)] |= 0x207b + 0xef5 + -0x2f6f << _0x23e4c2;
        }
        for (_0x23e4c2 = 0xa22 * 0x3 + 0x24c3 + 0x61b * -0xb; _0x23e4c2 < _0x418996; _0x23e4c2++) {
            let _0x5470d1 = peq[_0x5eb6ce['charCodeAt'](_0x23e4c2)];
            const _0x501d79 = _0x5470d1 | _0x46513c;
            _0x5470d1 |= (_0x5470d1 & _0x5baf0f) + _0x5baf0f ^ _0x5baf0f, _0x46513c |= ~(_0x5470d1 | _0x5baf0f), _0x5baf0f &= _0x5470d1, _0x46513c & _0x29a1f9 && _0x3ff4d7++, _0x5baf0f & _0x29a1f9 && _0x3ff4d7--, _0x46513c = _0x46513c << -0x283 * 0x7 + -0x3 * 0x3df + 0x1d33 | 0x2 * -0x557 + 0x3 * 0x337 + 0x10a, _0x5baf0f = _0x5baf0f << 0x7b1 + -0x1 * 0x20ee + 0x2 * 0xc9f | ~(_0x501d79 | _0x46513c), _0x46513c &= _0x501d79;
        }
        _0x23e4c2 = _0x414012;
        while (_0x23e4c2--) {
            peq[_0xff3395['charCodeAt'](_0x23e4c2)] = -0x1f9 * 0x9 + 0x1ddd + 0xc1c * -0x1;
        }
        return _0x3ff4d7;
    }, myers_x = (_0x4815cf, _0x47aca9) => {
        const _0x2ffb3b = _0x4815cf['length'], _0x1b145e = _0x47aca9['length'], _0x463756 = [], _0x400a86 = [], _0x39ef06 = Math['ceil'](_0x2ffb3b / (-0x252f + -0x1 * 0x1744 + 0x3c93)), _0x263596 = Math['ceil'](_0x1b145e / (0x21 * -0x10c + 0x5 * 0x311 + 0x1357 * 0x1));
        let _0x245155 = _0x1b145e;
        for (let _0x6bb645 = -0xe34 + -0x9f7 + 0x182b; _0x6bb645 < _0x39ef06; _0x6bb645++) {
            _0x400a86[_0x6bb645] = -(0x1 * -0x11ef + -0x1cf1 + 0x2ee1), _0x463756[_0x6bb645] = 0x69 * -0xe + 0x5 * 0x373 + 0x13 * -0x9b;
        }
        let _0x400d73 = 0x67b + 0x1 * 0x1d59 + -0x23d4;
        for (; _0x400d73 < _0x263596 - (0xf * -0x231 + -0x2214 + 0x42f4); _0x400d73++) {
            let _0x543ecd = -0x1763 + -0x418 + 0x1b7b, _0x5e260e = -(0xbe3 * 0x2 + 0x1a87 + -0x25 * 0x15c);
            const _0x55f62e = _0x400d73 * (0x136 + -0x1bcc + -0x1ab6 * -0x1), _0x39be89 = Math['min'](0x2 * -0x131b + -0x44d + 0x3b * 0xb9, _0x1b145e) + _0x55f62e;
            for (let _0x5c93e9 = _0x55f62e; _0x5c93e9 < _0x39be89; _0x5c93e9++) {
                peq[_0x47aca9['charCodeAt'](_0x5c93e9)] |= -0x7 * 0xea + 0x1 * -0x1367 + 0x89a * 0x3 << _0x5c93e9;
            }
            _0x245155 = _0x1b145e;
            for (let _0x49779d = 0x1 * -0x115c + -0x332 * 0xc + 0x37b4; _0x49779d < _0x2ffb3b; _0x49779d++) {
                const _0x4c62b2 = peq[_0x4815cf['charCodeAt'](_0x49779d)], _0x1c0d87 = _0x400a86[_0x49779d / (-0x7 * 0x6d + 0x1 * -0x2335 + 0x2650) | 0x1844 * -0x1 + -0x1a6c + -0x32b0 * -0x1] >>> _0x49779d & 0x183e + 0x5af * 0x3 + -0x294a, _0x38e40f = _0x463756[_0x49779d / (0x710 + -0x1c2d + -0x1 * -0x153d) | -0x1e29 + -0x19f * 0xe + 0x78d * 0x7] >>> _0x49779d & 0x1 * -0x12e6 + 0x2 * 0x1247 + -0x11a7 * 0x1, _0x4fe2ee = _0x4c62b2 | _0x543ecd, _0x23bea7 = ((_0x4c62b2 | _0x38e40f) & _0x5e260e) + _0x5e260e ^ _0x5e260e | _0x4c62b2 | _0x38e40f;
                let _0x58bf65 = _0x543ecd | ~(_0x23bea7 | _0x5e260e), _0x5c0715 = _0x5e260e & _0x23bea7;
                _0x58bf65 >>> -0x1b7 + -0x2 * 0x595 + -0x40 * -0x34 ^ _0x1c0d87 && (_0x400a86[_0x49779d / (-0x1e4b + 0x35 * -0xae + 0x4271) | -0x2fa * 0x7 + 0x7a9 * -0x1 + 0x5b3 * 0x5] ^= -0xb8 * -0x20 + 0xff5 + -0x26f4 << _0x49779d), _0x5c0715 >>> -0x142f * -0x1 + -0xa78 + -0x998 ^ _0x38e40f && (_0x463756[_0x49779d / (0x3e5 * -0x1 + 0x1 * 0x20fb + -0x1cf6) | -0xc15 + 0x1b79 + 0x4 * -0x3d9] ^= -0x1bae + -0x857 + 0x3a * 0x9f << _0x49779d), _0x58bf65 = _0x58bf65 << -0x2 * -0x17 + -0x468 + 0x43b | _0x1c0d87, _0x5c0715 = _0x5c0715 << -0x1 * -0x1724 + 0x38b + -0x1aae | _0x38e40f, _0x5e260e = _0x5c0715 | ~(_0x4fe2ee | _0x58bf65), _0x543ecd = _0x58bf65 & _0x4fe2ee;
            }
            for (let _0x2ef249 = _0x55f62e; _0x2ef249 < _0x39be89; _0x2ef249++) {
                peq[_0x47aca9['charCodeAt'](_0x2ef249)] = -0x26a1 + 0x1216 + -0x148b * -0x1;
            }
        }
        let _0x3bdb16 = -0x1913 + -0xaf3 + 0xae * 0x35, _0xfc5e5d = -(-0xfd7 + -0x14b * 0x1d + -0xaab * -0x5);
        const _0x82b418 = _0x400d73 * (0x1f88 * 0x1 + -0x23fc + 0x494 * 0x1), _0x362327 = Math['min'](0x1 * -0x14de + 0x1d * 0x5 + -0x245 * -0x9, _0x1b145e - _0x82b418) + _0x82b418;
        for (let _0x1f1a1f = _0x82b418; _0x1f1a1f < _0x362327; _0x1f1a1f++) {
            peq[_0x47aca9['charCodeAt'](_0x1f1a1f)] |= -0x1d2 * -0x1 + 0x25ad + 0xd2a * -0x3 << _0x1f1a1f;
        }
        _0x245155 = _0x1b145e;
        for (let _0x4ced1d = 0x76 + 0x764 + -0x3ed * 0x2; _0x4ced1d < _0x2ffb3b; _0x4ced1d++) {
            const _0x5dc2e9 = peq[_0x4815cf['charCodeAt'](_0x4ced1d)], _0x4aa943 = _0x400a86[_0x4ced1d / (0x99a * 0x2 + 0x1c38 + -0x2f4c) | -0x10 * -0x1d8 + -0x1 * 0xd8b + -0xff5] >>> _0x4ced1d & 0x68a + 0x982 * 0x4 + -0x3 * 0xedb, _0x227519 = _0x463756[_0x4ced1d / (0x492 + -0x10 * 0x3b + -0xc2) | -0xded + 0x123 * 0x1a + 0x1 * -0xfa1] >>> _0x4ced1d & 0xcf1 + -0x520 * 0x5 + 0x38 * 0x3a, _0xadde33 = _0x5dc2e9 | _0x3bdb16, _0x44ea7b = ((_0x5dc2e9 | _0x227519) & _0xfc5e5d) + _0xfc5e5d ^ _0xfc5e5d | _0x5dc2e9 | _0x227519;
            let _0x715a3a = _0x3bdb16 | ~(_0x44ea7b | _0xfc5e5d), _0x52cb9e = _0xfc5e5d & _0x44ea7b;
            _0x245155 += _0x715a3a >>> _0x1b145e - (-0x1 * -0x2005 + -0x17b * -0x18 + -0xc * 0x5a1) & 0x1923 + -0x135d * 0x2 + 0xd98, _0x245155 -= _0x52cb9e >>> _0x1b145e - (-0x73e + -0x20 * -0xc + 0x5bf * 0x1) & -0x2509 + -0x18e * 0x2 + -0x6b1 * -0x6, _0x715a3a >>> -0xfbc + 0x4ef * 0x5 + -0x8d0 ^ _0x4aa943 && (_0x400a86[_0x4ced1d / (0x2170 + 0x1e6e + 0xc7 * -0x52) | 0x12ec + -0x991 * -0x1 + -0xb * 0x297] ^= -0x375 + -0x132f + -0x155 * -0x11 << _0x4ced1d), _0x52cb9e >>> -0x1538 + 0x6d * 0x59 + -0x108e ^ _0x227519 && (_0x463756[_0x4ced1d / (0x3 * -0x2d7 + -0x7e5 + 0x108a) | 0x1bc5 + -0x10eb + 0x1 * -0xada] ^= 0x212e + 0x1292 + 0x1 * -0x33bf << _0x4ced1d), _0x715a3a = _0x715a3a << -0xb2d + 0x2 * -0x54a + -0x1 * -0x15c2 | _0x4aa943, _0x52cb9e = _0x52cb9e << 0x5 * 0x55d + 0x18 * -0x182 + 0x5 * 0x1e0 | _0x227519, _0xfc5e5d = _0x52cb9e | ~(_0xadde33 | _0x715a3a), _0x3bdb16 = _0x715a3a & _0xadde33;
        }
        for (let _0x4d0334 = _0x82b418; _0x4d0334 < _0x362327; _0x4d0334++) {
            peq[_0x47aca9['charCodeAt'](_0x4d0334)] = 0xa * -0x137 + 0x1d2a + -0x1104;
        }
        return _0x245155;
    }, distance = (_0x41d49f, _0x3b8352) => {
        if (_0x41d49f['length'] > _0x3b8352['length']) {
            const _0x2f31eb = _0x3b8352;
            _0x3b8352 = _0x41d49f, _0x41d49f = _0x2f31eb;
        }
        if (_0x41d49f['length'] === -0x1b66 + -0x1b22 + 0x15d * 0x28)
            return _0x3b8352['length'];
        if (_0x41d49f['length'] <= -0x1171 + 0x1 * 0x1c32 + -0xaa1)
            return myers_32(_0x41d49f, _0x3b8352);
        return myers_x(_0x41d49f, _0x3b8352);
    }, closest = (_0x38f8ba, _0x7c961a) => {
        let _0x6968f5 = Infinity, _0x2c0dc9 = 0x2 * -0xaf3 + -0x5 * 0xce + 0x2a * 0x9e;
        for (let _0x3068d2 = 0x977 + 0x20d9 + 0x10 * -0x2a5; _0x3068d2 < _0x7c961a['length']; _0x3068d2++) {
            const _0x33fefc = distance(_0x38f8ba, _0x7c961a[_0x3068d2]);
            _0x33fefc < _0x6968f5 && (_0x6968f5 = _0x33fefc, _0x2c0dc9 = _0x3068d2);
        }
        return _0x7c961a[_0x2c0dc9];
    };
module['exports'] = {
    'closest': closest,
    'distance': distance
};
