import _0x43f539 from '../SegmentTree';
describe('SegmentTree', () => {
    it('should\x20build\x20tree\x20for\x20input\x20array\x20#0\x20with\x20length\x20of\x20power\x20of\x20two', () => {
        const _0x4e97d4 = [
                -(-0x442 + 0xe5a + -0x9 * 0x11f),
                -0x101 * 0x10 + -0x1c81 * -0x1 + 0xc6f * -0x1
            ], _0x48b02a = new _0x43f539(_0x4e97d4, Math['min'], Infinity);
        expect(_0x48b02a['segmentTree'])['toEqual']([
            -(-0x1833 + 0x64f * -0x5 + 0x37bf),
            -(-0x2633 + -0x1 * 0xb78 + 0x31ac),
            0x263f + 0x166c + -0x3ca9
        ]), expect(_0x48b02a['segmentTree']['length'])['toBe']((-0x98a * -0x1 + -0x1745 + 0xdbd) * _0x4e97d4['length'] - (0x1 * -0x135a + 0x1 * -0x43d + -0x28 * -0x97));
    }), it('should\x20build\x20tree\x20for\x20input\x20array\x20#1\x20with\x20length\x20of\x20power\x20of\x20two', () => {
        const _0x565f5c = [
                -(-0x3 * 0xaca + -0xb3 * 0x27 + 0x3ba4),
                -0x418 * 0x2 + 0x3e9 * 0x4 + -0x1 * 0x772,
                -0x2 * 0x1171 + -0x9 * -0xed + 0x1a91,
                -0x13e3 + -0x2082 + 0x3465
            ], _0x58122a = new _0x43f539(_0x565f5c, Math['min'], Infinity);
        expect(_0x58122a['segmentTree'])['toEqual']([
            -(-0x1ac9 + -0x207 * 0x2 + 0x18 * 0x149),
            -(-0x770 * 0x2 + 0x11a5 * -0x2 + 0x322b),
            0x2151 + -0xe2d * -0x1 + -0x2 * 0x17bf,
            -(-0x1b2d * -0x1 + 0x222c + -0x3d58),
            -0xcb6 + 0x1e30 + -0xd * 0x158,
            0xbfb * 0x2 + 0x2069 + 0x3f * -0xe5,
            -0x264d + 0xcdd + -0x58 * -0x4a
        ]), expect(_0x58122a['segmentTree']['length'])['toBe']((-0x2654 + -0x15 * -0xc1 + 0x1681 * 0x1) * _0x565f5c['length'] - (-0x2534 + 0x1f50 + 0x5e5));
    }), it('should\x20build\x20tree\x20for\x20input\x20array\x20#0\x20with\x20length\x20not\x20of\x20power\x20of\x20two', () => {
        const _0x3acb32 = [
                0x607 + 0x550 + 0xb57 * -0x1,
                -0x1773 + 0x1 * -0x2201 + 0x1 * 0x3975,
                0x1e02 + -0x16e0 + 0x1c8 * -0x4
            ], _0x57f607 = new _0x43f539(_0x3acb32, Math['min'], Infinity);
        expect(_0x57f607['segmentTree'])['toEqual']([
            -0xd * 0x191 + -0xda1 + 0x21fe,
            0x1b * 0x17 + 0x930 + -0xb9d,
            -0x111b * -0x1 + -0x1e30 + 0x45d * 0x3,
            -0xc9 + 0x1033 + -0xf6a,
            0x1 * 0x2270 + -0x184a * 0x1 + -0xa25 * 0x1,
            null,
            null
        ]), expect(_0x57f607['segmentTree']['length'])['toBe']((-0x547 * 0x2 + -0x1495 + -0x1f25 * -0x1) * (0x1029 + 0x23f2 + -0x3417) - (-0xc98 + -0x9fb * 0x3 + 0x37 * 0xc6));
    }), it('should\x20build\x20tree\x20for\x20input\x20array\x20#1\x20with\x20length\x20not\x20of\x20power\x20of\x20two', () => {
        const _0x195d5b = [
                -(0x32 * -0xaa + 0xad5 + -0x20 * -0xb3),
                0x7 * 0x3e7 + -0x93 * 0x5 + 0x1 * -0x186f,
                -0x8f9 * 0x2 + 0x454 + 0x6d1 * 0x2,
                -0x14c * -0x2 + -0x4 * -0x5f3 + -0x1a64,
                0xaf5 * -0x3 + 0x494 * 0x4 + 0x153 * 0xb,
                0x13d * -0x1d + 0x5 * 0x26b + 0x17d3
            ], _0x3bbe90 = new _0x43f539(_0x195d5b, Math['min'], Infinity);
        expect(_0x3bbe90['segmentTree'])['toEqual']([
            -(-0x25 * -0xc1 + -0x2 * 0x1025 + 0x466),
            -(0x1 * -0x18e3 + 0x1 * -0x1e55 + 0xd3 * 0x43),
            -0x1ab4 + -0x9e8 + 0x249c,
            -(0xaf6 * 0x2 + -0x264d + 0x1062),
            -0x266f + -0x4d * 0x39 + 0x1 * 0x3798,
            0xf7 * 0x19 + 0x10 * -0xd5 + -0xacf * 0x1,
            -0x1dd8 + 0x596 + -0x1 * -0x1843,
            -(-0x1 * 0x1424 + 0x2069 * 0x1 + -0x14 * 0x9d),
            -0xab9 + -0x2 * 0xea2 + -0x200 * -0x14,
            null,
            null,
            -0x1791 * -0x1 + -0x2128 + 0x5 * 0x1eb,
            0x37c * 0x1 + 0x12c1 + -0x163b,
            null,
            null
        ]), expect(_0x3bbe90['segmentTree']['length'])['toBe']((0x19 * -0x7f + 0x5 * 0x68f + -0x1462) * (-0xa3 * -0x9 + -0x1cd5 + -0x5e * -0x3f) - (0xa27 + -0x26fa + 0xa * 0x2e2));
    }), it('should\x20build\x20max\x20array', () => {
        const _0x2f9303 = [
                -(0x133f * -0x2 + -0x9 * 0x51 + 0x6c * 0x62),
                0xd * -0x4f + -0x163a + 0x1 * 0x1a3f,
                0xfda * 0x1 + 0x4d8 + -0x14ae,
                -0x23a1 * 0x1 + 0x2417 + 0x76 * -0x1
            ], _0x14692a = new _0x43f539(_0x2f9303, Math['max'], -Infinity);
        expect(_0x14692a['segmentTree'])['toEqual']([
            -0x21a7 + 0x1eb6 + 0x2f5 * 0x1,
            0xa65 + -0x8d5 + 0xc7 * -0x2,
            0x3bc + 0xa81 * 0x1 + 0x1 * -0xe39,
            -(-0x24a2 + 0xafc + 0x19a7),
            0x1264 + 0x2 * 0x10f1 + -0x3444,
            -0x17ff + -0x1c85 + 0x3488,
            -0x2599 + 0xa67 + 0x1b32
        ]), expect(_0x14692a['segmentTree']['length'])['toBe']((0xfb9 + -0x17a9 + -0x9 * -0xe2) * _0x2f9303['length'] - (0x1888 + -0x1 * -0x146f + -0x2cf6));
    }), it('should\x20build\x20sum\x20array', () => {
        const _0x352c8d = [
                -(0x463 * -0x5 + -0x14e * -0x1 + 0x14a2),
                -0x15a7 + 0x417 * 0x4 + 0x17 * 0x3b,
                -0xa7c + 0x1825 + -0x1f3 * 0x7,
                0x1 * -0x19fd + 0xa8d + 0xf70
            ], _0x10a0a0 = new _0x43f539(_0x352c8d, (_0x1a116a, _0x14e63e) => _0x1a116a + _0x14e63e, 0xafb + -0xd * 0x14e + -0x1 * -0x5fb);
        expect(_0x10a0a0['segmentTree'])['toEqual']([
            0x1ea1 + -0x1aac + 0x90 * -0x7,
            0x10 * 0x1e5 + -0xba5 + -0x12aa,
            -0x195f + 0x1853 + 0x110,
            -(0x3ee * 0x3 + 0xf0f + -0x1ad8),
            0xeb3 + -0x740 + 0x27b * -0x3,
            -0x1 * -0x504 + 0x17 * -0xa7 + 0x1 * 0xa01,
            -0x9e + 0x1cd9 + -0x9 * 0x323
        ]), expect(_0x10a0a0['segmentTree']['length'])['toBe']((0x8d + 0xcb8 * 0x2 + 0x9 * -0x2e3) * _0x352c8d['length'] - (-0x58 + 0x1524 + -0x14cb));
    }), it('should\x20do\x20min\x20range\x20query\x20on\x20power\x20of\x20two\x20length\x20array', () => {
        const _0x5b7d2a = [
                -(0x4 * 0x6ca + 0x1ddb + -0x3902),
                0x16ed * -0x1 + 0x66 * -0x31 + 0x87e * 0x5,
                -0x7bb + 0x240c + 0x13b * -0x17,
                -0xf29 + 0x1dc0 * -0x1 + 0x2ce9,
                0x23cf + -0x7 * 0x15b + -0x1a50,
                0xf9b + 0x1087 + -0x2021
            ], _0x108423 = new _0x43f539(_0x5b7d2a, Math['min'], Infinity);
        expect(_0x108423['rangeQuery'](-0x4 * -0x29 + -0x1 * 0x2701 + 0x265d, 0xe1b + 0x21f * 0x1 + 0x9 * -0x1cd))['toBe'](-(-0x1803 * 0x1 + 0x8ff * 0x3 + -0x1 * 0x2f9)), expect(_0x108423['rangeQuery'](0x5d * 0x2 + 0x8 * -0x3a + 0x116, -0x1 * 0x137 + 0x1bb6 + -0x1a7d))['toBe'](-(0x2209 + 0x1afb * -0x1 + -0x70d)), expect(_0x108423['rangeQuery'](0x789 * 0x3 + 0x6f7 * 0x1 + -0x1d91, 0x722 + -0x26b1 + 0x1 * 0x1f92))['toBe'](-0x170 + 0x140f * 0x1 + -0x129f), expect(_0x108423['rangeQuery'](-0xa49 + -0x2f * -0x85 + 0x10 * -0xe2, 0xb0c * 0x1 + 0x4 * -0x66f + -0x2 * -0x75a))['toBe'](-0x1 * 0x1f76 + 0x19f2 + 0x2 * 0x2c2), expect(_0x108423['rangeQuery'](0x1 * -0x1504 + -0x922 + 0x1e2a, 0x1964 + -0xa6a * -0x3 + -0x389d))['toBe'](-0x501 * 0x2 + -0x232f + 0x2d32), expect(_0x108423['rangeQuery'](-0x24 * 0xbb + -0x1d91 + -0x1 * -0x37df, 0x25 + -0x366 + 0x5 * 0xa7))['toBe'](0xb32 + 0x10b8 + -0x1be6);
    }), it('should\x20do\x20min\x20range\x20query\x20on\x20not\x20power\x20of\x20two\x20length\x20array', () => {
        const _0x4b6dd6 = [
                -(-0x235 * 0x1 + 0x5 * 0x10b + -0x301),
                -0x22fc + 0x12a5 + 0x1059,
                -0xf4c + 0x122 + 0x2d6 * 0x5,
                0x39 * 0x2f + -0x3a * 0x8b + 0x1507
            ], _0x42f2d6 = new _0x43f539(_0x4b6dd6, Math['min'], Infinity);
        expect(_0x42f2d6['rangeQuery'](-0x230 * 0xb + -0x21e6 + 0x39f6, 0x82 * 0x47 + 0x390 + 0x112 * -0x25))['toBe'](-(0x1b * -0x10d + 0x20b + 0x1a55)), expect(_0x42f2d6['rangeQuery'](-0x31 + 0xa2f + -0x9fe, -0x6cc + 0x56c + -0x161 * -0x1))['toBe'](-(-0x2 * -0x115f + 0xb * 0x1d + 0x8ff * -0x4)), expect(_0x42f2d6['rangeQuery'](-0x26b1 * -0x1 + -0xa * 0x39a + -0x2ac, 0x15a5 + -0x1869 * -0x1 + -0xf59 * 0x3))['toBe'](-0x130f + 0x18b5 + -0x2 * 0x2d3), expect(_0x42f2d6['rangeQuery'](0x7 * -0x2b + -0x1 * -0xeb9 + -0xd8b, -0xc9 * -0x19 + 0xf65 + 0x1f2 * -0x12))['toBe'](-0x1646 + -0x1 * -0x29d + 0x13ab), expect(_0x42f2d6['rangeQuery'](-0xe73 + 0x1a9a + 0x1 * -0xc25, -0x2 * 0x122f + -0x8d * 0x1 + 0x24ee))['toBe'](0x80 * -0x18 + 0x34 * -0x33 + 0x6a * 0x36), expect(_0x42f2d6['rangeQuery'](-0x892 * -0x4 + 0x200b * -0x1 + -0x23b, -0x2 * 0xcca + 0x942 + 0x1054))['toBe'](0xe94 + 0x19fc + -0x1 * 0x288c);
    }), it('should\x20do\x20max\x20range\x20query', () => {
        const _0x10fbd1 = [
                -(0x1ee1 + 0x3 * 0x20f + -0x250d),
                0x179b + -0x2379 + 0xbe1 * 0x1,
                -0xae2 + 0x115 * -0x7 + 0x1279,
                0x1127 * -0x2 + -0x59 * 0x22 + 0x2e20,
                -0x11d7 * 0x1 + 0x2 * 0x5d6 + 0x33 * 0x1f,
                0x4 * -0x865 + 0x846 + -0x194f * -0x1
            ], _0x4299fa = new _0x43f539(_0x10fbd1, Math['max'], -Infinity);
        expect(_0x4299fa['rangeQuery'](0x1 * 0xcf1 + 0x19a * -0x13 + 0x117d, -0x393 + -0xb * -0x117 + -0x865))['toBe'](0x9b * 0x37 + 0x1695 + 0x1bef * -0x2), expect(_0x4299fa['rangeQuery'](0x1959 + -0xae7 * 0x2 + 0x1 * -0x38b, 0x24e1 + -0x159c + -0xf44))['toBe'](-0xd67 + -0x20b9 * 0x1 + 0x5d * 0x7f), expect(_0x4299fa['rangeQuery'](-0x3ad * -0x9 + -0x1 * -0x1bdb + 0x13 * -0x335, 0x979 + -0x909 + -0x6d))['toBe'](-0xb56 + 0x3 * 0x9c5 + -0x11f5), expect(_0x4299fa['rangeQuery'](-0x196c + 0x19 * -0xf3 + 0x3129, -0x19df + 0x269d + -0xcba))['toBe'](0x132b + -0x141a * -0x1 + -0x2741), expect(_0x4299fa['rangeQuery'](0x7 * -0x194 + -0x1 * 0x870 + 0x1380, -0x1541 + 0x4 * 0x1e8 + 0xda6 * 0x1))['toBe'](0xabe + -0x6ad * 0x4 + 0xff8), expect(_0x4299fa['rangeQuery'](-0x1 * -0xbb2 + -0x193 + 0x2 * -0x50e, 0x866 + 0x72 * 0x2e + 0x1cdf * -0x1))['toBe'](0x18ae + 0xb89 * -0x2 + -0x19c);
    }), it('should\x20do\x20sum\x20range\x20query', () => {
        const _0x540ee9 = [
                -(0x2543 + 0x1 * 0x1a27 + -0x3f69),
                0x2f1 + -0x147f + 0x1191,
                -0x145d + -0x2e1 + 0x1742,
                0x599 + 0x37f * -0x3 + -0x1 * -0x4e4,
                -0x35b * -0x5 + 0x77d * -0x4 + 0xd2f,
                -0xd6d * 0x1 + -0x1849 * -0x1 + 0xadb * -0x1
            ], _0x587d49 = new _0x43f539(_0x540ee9, (_0x108d7e, _0xf057a6) => _0x108d7e + _0xf057a6, 0x17 * 0x1 + -0x8fc + -0xfd * -0x9);
        expect(_0x587d49['rangeQuery'](-0x1e5 * -0x14 + 0x15b * 0x16 + -0x43b6, -0x3b * -0x63 + 0x109b + 0x1 * -0x2767))['toBe'](0x1a8c + 0x1174 + 0x8cb * -0x5), expect(_0x587d49['rangeQuery'](0x183b + 0x113b * -0x1 + -0x1c0 * 0x4, -0x1882 + 0x1a5f * 0x1 + -0xee * 0x2))['toBe'](0x1170 + -0x191c + 0x2 * 0x3d7), expect(_0x587d49['rangeQuery'](0x239a + 0xb50 + -0x2ee9, -0x1421 + -0x52 * -0x4a + 0x13 * -0x30))['toBe'](-0x1e7f + -0x7bd + 0x2643), expect(_0x587d49['rangeQuery'](0x1ee3 + -0x1ef9 + 0x18, -0x14fb + 0x668 + 0xe97))['toBe'](-0x13 * -0x2e + -0xa9f + 0x73b), expect(_0x587d49['rangeQuery'](-0x2 * 0xafd + -0x1972 + 0x2f70, 0x1f38 + 0x76 * -0xb + 0x1a21 * -0x1))['toBe'](-0x202a + -0x5e1 + -0x2 * -0x1307), expect(_0x587d49['rangeQuery'](0x2273 + -0x2338 + -0x19 * -0x8, -0x13af + 0x7af * 0x2 + -0x22a * -0x2))['toBe'](-0x7da + -0xd42 * 0x2 + 0x225e);
    });
});
