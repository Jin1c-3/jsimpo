'use strict';
const common = require('../common.js'), bench = common['createBenchmark'](main, {
        'size': [
            0x31 * 0x71 + 0x1ee6 + -0x79 * 0x6f,
            0x264c + -0xda1 * -0x1 + -0x31ed,
            0xf5c * -0x2 + -0x3 * -0x446 + 0x21e6,
            0x2235 * 0x3 + -0x1f3 * -0x1d + -0x1 * 0x5f24
        ],
        'args': [
            -0xa22 + -0x23a4 * 0x1 + 0x2dc7,
            -0x7 * 0x1 + -0x593 * 0x3 + 0x10c2,
            0x89e * 0x3 + 0x7f * 0x1e + 0x7 * -0x5d1
        ],
        'n': [-0x6ab * 0x377 + 0x1bd50b + 0xa87b2]
    });
function main({
    n: _0x56abfa,
    size: _0x2ab22a,
    args: _0x2d347b
}) {
    const _0x1dce76 = Buffer['alloc'](_0x2ab22a, 'a'), _0x458234 = Buffer['alloc'](_0x2ab22a, 'a'), _0x11723d = _0x1dce76['length'], _0x539c22 = _0x458234['length'];
    _0x458234[_0x2ab22a - (0x295 * 0x7 + 0x1fff + -0x3211)] = 'b'['charCodeAt'](0x3 * 0x7b8 + -0x1d12 + 0x5ea * 0x1);
    switch (_0x2d347b) {
    case 0x3f9 + -0xbb2 + 0x7bb:
        _0x1dce76['compare'](_0x458234, -0xc73 + -0x23a2 * 0x1 + 0x3015), bench['start']();
        for (let _0x156e58 = -0x35b * -0xb + 0x139 * 0xd + 0x3 * -0x119a; _0x156e58 < _0x56abfa; _0x156e58++) {
            _0x1dce76['compare'](_0x458234, -0x1e1d + 0x2398 + 0x3d * -0x17);
        }
        bench['end'](_0x56abfa);
        break;
    case 0x1a3 * 0xd + 0x3 * 0xac1 + 0x1 * -0x3587:
        _0x1dce76['compare'](_0x458234, 0x2 * 0x20c + -0x2217 + 0x1 * 0x1dff, _0x539c22), bench['start']();
        for (let _0x467cad = 0x1 * 0x21f0 + 0x9 * -0x137 + 0x1 * -0x1701; _0x467cad < _0x56abfa; _0x467cad++) {
            _0x1dce76['compare'](_0x458234, -0x1 * 0x22db + -0x4fd + -0xd48 * -0x3, _0x539c22);
        }
        bench['end'](_0x56abfa);
        break;
    case 0x2 * 0x1c9 + -0x5 * 0x2eb + -0x5 * -0x235:
        _0x1dce76['compare'](_0x458234, 0x14b7 + 0x1055 + -0x250c, _0x539c22, -0xb7d * -0x1 + -0x11 * -0x197 + 0x14 * -0x1ed), bench['start']();
        for (let _0x57e3c3 = -0x1ae9 + 0x18b3 + 0x11b * 0x2; _0x57e3c3 < _0x56abfa; _0x57e3c3++) {
            _0x1dce76['compare'](_0x458234, -0x2479 * -0x1 + -0x1 * 0x397 + 0x17 * -0x16e, _0x539c22, -0x1 * -0x246f + -0x1 * -0x1b2f + -0x3f9e);
        }
        bench['end'](_0x56abfa);
        break;
    case -0x5b3 * -0x5 + 0x136c + -0x2fe6:
        _0x1dce76['compare'](_0x458234, -0x132c * -0x1 + -0x1061 + 0x41 * -0xb, _0x539c22, -0x22e1 + 0x109d + -0x14e * -0xe, _0x11723d), bench['start']();
        for (let _0x2dfb28 = 0xdf * -0x6 + 0x1d03 + -0x1 * 0x17c9; _0x2dfb28 < _0x56abfa; _0x2dfb28++) {
            _0x1dce76['compare'](_0x458234, 0x1a75 + -0xb42 + 0x1 * -0xf33, _0x539c22, 0x8b0 + 0x221d * 0x1 + -0x1 * 0x2acd, _0x11723d);
        }
        bench['end'](_0x56abfa);
        break;
    default:
        _0x1dce76['compare'](_0x458234), bench['start']();
        for (let _0x4885c5 = 0x34 * -0xbc + 0x86a * 0x4 + 0x488; _0x4885c5 < _0x56abfa; _0x4885c5++) {
            _0x1dce76['compare'](_0x458234);
        }
        bench['end'](_0x56abfa);
    }
}
