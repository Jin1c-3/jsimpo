function strNumDiscode(_0x1190ac) {
    return _0x1190ac = _0x1190ac['replace'](/&forall;/g, '∀'), _0x1190ac = _0x1190ac['replace'](/&part;/g, '∂'), _0x1190ac = _0x1190ac['replace'](/&exist;/g, '∃'), _0x1190ac = _0x1190ac['replace'](/&empty;/g, '∅'), _0x1190ac = _0x1190ac['replace'](/&nabla;/g, '∇'), _0x1190ac = _0x1190ac['replace'](/&isin;/g, '∈'), _0x1190ac = _0x1190ac['replace'](/&notin;/g, '∉'), _0x1190ac = _0x1190ac['replace'](/&ni;/g, '∋'), _0x1190ac = _0x1190ac['replace'](/&prod;/g, '∏'), _0x1190ac = _0x1190ac['replace'](/&sum;/g, '∑'), _0x1190ac = _0x1190ac['replace'](/&minus;/g, '−'), _0x1190ac = _0x1190ac['replace'](/&lowast;/g, '∗'), _0x1190ac = _0x1190ac['replace'](/&radic;/g, '√'), _0x1190ac = _0x1190ac['replace'](/&prop;/g, '∝'), _0x1190ac = _0x1190ac['replace'](/&infin;/g, '∞'), _0x1190ac = _0x1190ac['replace'](/&ang;/g, '∠'), _0x1190ac = _0x1190ac['replace'](/&and;/g, '∧'), _0x1190ac = _0x1190ac['replace'](/&or;/g, '∨'), _0x1190ac = _0x1190ac['replace'](/&cap;/g, '∩'), _0x1190ac = _0x1190ac['replace'](/&cup;/g, '∪'), _0x1190ac = _0x1190ac['replace'](/&int;/g, '∫'), _0x1190ac = _0x1190ac['replace'](/&there4;/g, '∴'), _0x1190ac = _0x1190ac['replace'](/&sim;/g, '∼'), _0x1190ac = _0x1190ac['replace'](/&cong;/g, '≅'), _0x1190ac = _0x1190ac['replace'](/&asymp;/g, '≈'), _0x1190ac = _0x1190ac['replace'](/&ne;/g, '≠'), _0x1190ac = _0x1190ac['replace'](/&le;/g, '≤'), _0x1190ac = _0x1190ac['replace'](/&ge;/g, '≥'), _0x1190ac = _0x1190ac['replace'](/&sub;/g, '⊂'), _0x1190ac = _0x1190ac['replace'](/&sup;/g, '⊃'), _0x1190ac = _0x1190ac['replace'](/&nsub;/g, '⊄'), _0x1190ac = _0x1190ac['replace'](/&sube;/g, '⊆'), _0x1190ac = _0x1190ac['replace'](/&supe;/g, '⊇'), _0x1190ac = _0x1190ac['replace'](/&oplus;/g, '⊕'), _0x1190ac = _0x1190ac['replace'](/&otimes;/g, '⊗'), _0x1190ac = _0x1190ac['replace'](/&perp;/g, '⊥'), _0x1190ac = _0x1190ac['replace'](/&sdot;/g, '⋅'), _0x1190ac;
}
function strGreeceDiscode(_0x55d52e) {
    return _0x55d52e = _0x55d52e['replace'](/&Alpha;/g, 'Α'), _0x55d52e = _0x55d52e['replace'](/&Beta;/g, 'Β'), _0x55d52e = _0x55d52e['replace'](/&Gamma;/g, 'Γ'), _0x55d52e = _0x55d52e['replace'](/&Delta;/g, 'Δ'), _0x55d52e = _0x55d52e['replace'](/&Epsilon;/g, 'Ε'), _0x55d52e = _0x55d52e['replace'](/&Zeta;/g, 'Ζ'), _0x55d52e = _0x55d52e['replace'](/&Eta;/g, 'Η'), _0x55d52e = _0x55d52e['replace'](/&Theta;/g, 'Θ'), _0x55d52e = _0x55d52e['replace'](/&Iota;/g, 'Ι'), _0x55d52e = _0x55d52e['replace'](/&Kappa;/g, 'Κ'), _0x55d52e = _0x55d52e['replace'](/&Lambda;/g, 'Λ'), _0x55d52e = _0x55d52e['replace'](/&Mu;/g, 'Μ'), _0x55d52e = _0x55d52e['replace'](/&Nu;/g, 'Ν'), _0x55d52e = _0x55d52e['replace'](/&Xi;/g, 'Ν'), _0x55d52e = _0x55d52e['replace'](/&Omicron;/g, 'Ο'), _0x55d52e = _0x55d52e['replace'](/&Pi;/g, 'Π'), _0x55d52e = _0x55d52e['replace'](/&Rho;/g, 'Ρ'), _0x55d52e = _0x55d52e['replace'](/&Sigma;/g, 'Σ'), _0x55d52e = _0x55d52e['replace'](/&Tau;/g, 'Τ'), _0x55d52e = _0x55d52e['replace'](/&Upsilon;/g, 'Υ'), _0x55d52e = _0x55d52e['replace'](/&Phi;/g, 'Φ'), _0x55d52e = _0x55d52e['replace'](/&Chi;/g, 'Χ'), _0x55d52e = _0x55d52e['replace'](/&Psi;/g, 'Ψ'), _0x55d52e = _0x55d52e['replace'](/&Omega;/g, 'Ω'), _0x55d52e = _0x55d52e['replace'](/&alpha;/g, 'α'), _0x55d52e = _0x55d52e['replace'](/&beta;/g, 'β'), _0x55d52e = _0x55d52e['replace'](/&gamma;/g, 'γ'), _0x55d52e = _0x55d52e['replace'](/&delta;/g, 'δ'), _0x55d52e = _0x55d52e['replace'](/&epsilon;/g, 'ε'), _0x55d52e = _0x55d52e['replace'](/&zeta;/g, 'ζ'), _0x55d52e = _0x55d52e['replace'](/&eta;/g, 'η'), _0x55d52e = _0x55d52e['replace'](/&theta;/g, 'θ'), _0x55d52e = _0x55d52e['replace'](/&iota;/g, 'ι'), _0x55d52e = _0x55d52e['replace'](/&kappa;/g, 'κ'), _0x55d52e = _0x55d52e['replace'](/&lambda;/g, 'λ'), _0x55d52e = _0x55d52e['replace'](/&mu;/g, 'μ'), _0x55d52e = _0x55d52e['replace'](/&nu;/g, 'ν'), _0x55d52e = _0x55d52e['replace'](/&xi;/g, 'ξ'), _0x55d52e = _0x55d52e['replace'](/&omicron;/g, 'ο'), _0x55d52e = _0x55d52e['replace'](/&pi;/g, 'π'), _0x55d52e = _0x55d52e['replace'](/&rho;/g, 'ρ'), _0x55d52e = _0x55d52e['replace'](/&sigmaf;/g, 'ς'), _0x55d52e = _0x55d52e['replace'](/&sigma;/g, 'σ'), _0x55d52e = _0x55d52e['replace'](/&tau;/g, 'τ'), _0x55d52e = _0x55d52e['replace'](/&upsilon;/g, 'υ'), _0x55d52e = _0x55d52e['replace'](/&phi;/g, 'φ'), _0x55d52e = _0x55d52e['replace'](/&chi;/g, 'χ'), _0x55d52e = _0x55d52e['replace'](/&psi;/g, 'ψ'), _0x55d52e = _0x55d52e['replace'](/&omega;/g, 'ω'), _0x55d52e = _0x55d52e['replace'](/&thetasym;/g, 'ϑ'), _0x55d52e = _0x55d52e['replace'](/&upsih;/g, 'ϒ'), _0x55d52e = _0x55d52e['replace'](/&piv;/g, 'ϖ'), _0x55d52e = _0x55d52e['replace'](/&middot;/g, '·'), _0x55d52e;
}
function strcharacterDiscode(_0xd7f0a8) {
    return _0xd7f0a8 = _0xd7f0a8['replace'](/&nbsp;/g, '\x20'), _0xd7f0a8 = _0xd7f0a8['replace'](/&quot;/g, '\x27'), _0xd7f0a8 = _0xd7f0a8['replace'](/&amp;/g, '&'), _0xd7f0a8 = _0xd7f0a8['replace'](/&lt;/g, '<'), _0xd7f0a8 = _0xd7f0a8['replace'](/&gt;/g, '>'), _0xd7f0a8 = _0xd7f0a8['replace'](/&#8226;/g, '•'), _0xd7f0a8;
}
function strOtherDiscode(_0x115cc1) {
    return _0x115cc1 = _0x115cc1['replace'](/&OElig;/g, 'Œ'), _0x115cc1 = _0x115cc1['replace'](/&oelig;/g, 'œ'), _0x115cc1 = _0x115cc1['replace'](/&Scaron;/g, 'Š'), _0x115cc1 = _0x115cc1['replace'](/&scaron;/g, 'š'), _0x115cc1 = _0x115cc1['replace'](/&Yuml;/g, 'Ÿ'), _0x115cc1 = _0x115cc1['replace'](/&fnof;/g, 'ƒ'), _0x115cc1 = _0x115cc1['replace'](/&circ;/g, 'ˆ'), _0x115cc1 = _0x115cc1['replace'](/&tilde;/g, '˜'), _0x115cc1 = _0x115cc1['replace'](/&ensp;/g, ''), _0x115cc1 = _0x115cc1['replace'](/&emsp;/g, ''), _0x115cc1 = _0x115cc1['replace'](/&thinsp;/g, ''), _0x115cc1 = _0x115cc1['replace'](/&zwnj;/g, ''), _0x115cc1 = _0x115cc1['replace'](/&zwj;/g, ''), _0x115cc1 = _0x115cc1['replace'](/&lrm;/g, ''), _0x115cc1 = _0x115cc1['replace'](/&rlm;/g, ''), _0x115cc1 = _0x115cc1['replace'](/&ndash;/g, '–'), _0x115cc1 = _0x115cc1['replace'](/&mdash;/g, '—'), _0x115cc1 = _0x115cc1['replace'](/&lsquo;/g, '‘'), _0x115cc1 = _0x115cc1['replace'](/&rsquo;/g, '’'), _0x115cc1 = _0x115cc1['replace'](/&sbquo;/g, '‚'), _0x115cc1 = _0x115cc1['replace'](/&ldquo;/g, '“'), _0x115cc1 = _0x115cc1['replace'](/&rdquo;/g, '”'), _0x115cc1 = _0x115cc1['replace'](/&bdquo;/g, '„'), _0x115cc1 = _0x115cc1['replace'](/&dagger;/g, '†'), _0x115cc1 = _0x115cc1['replace'](/&Dagger;/g, '‡'), _0x115cc1 = _0x115cc1['replace'](/&bull;/g, '•'), _0x115cc1 = _0x115cc1['replace'](/&hellip;/g, '…'), _0x115cc1 = _0x115cc1['replace'](/&permil;/g, '‰'), _0x115cc1 = _0x115cc1['replace'](/&prime;/g, '′'), _0x115cc1 = _0x115cc1['replace'](/&Prime;/g, '″'), _0x115cc1 = _0x115cc1['replace'](/&lsaquo;/g, '‹'), _0x115cc1 = _0x115cc1['replace'](/&rsaquo;/g, '›'), _0x115cc1 = _0x115cc1['replace'](/&oline;/g, '‾'), _0x115cc1 = _0x115cc1['replace'](/&euro;/g, '€'), _0x115cc1 = _0x115cc1['replace'](/&trade;/g, '™'), _0x115cc1 = _0x115cc1['replace'](/&larr;/g, '←'), _0x115cc1 = _0x115cc1['replace'](/&uarr;/g, '↑'), _0x115cc1 = _0x115cc1['replace'](/&rarr;/g, '→'), _0x115cc1 = _0x115cc1['replace'](/&darr;/g, '↓'), _0x115cc1 = _0x115cc1['replace'](/&harr;/g, '↔'), _0x115cc1 = _0x115cc1['replace'](/&crarr;/g, '↵'), _0x115cc1 = _0x115cc1['replace'](/&lceil;/g, '⌈'), _0x115cc1 = _0x115cc1['replace'](/&rceil;/g, '⌉'), _0x115cc1 = _0x115cc1['replace'](/&lfloor;/g, '⌊'), _0x115cc1 = _0x115cc1['replace'](/&rfloor;/g, '⌋'), _0x115cc1 = _0x115cc1['replace'](/&loz;/g, '◊'), _0x115cc1 = _0x115cc1['replace'](/&spades;/g, '♠'), _0x115cc1 = _0x115cc1['replace'](/&clubs;/g, '♣'), _0x115cc1 = _0x115cc1['replace'](/&hearts;/g, '♥'), _0x115cc1 = _0x115cc1['replace'](/&diams;/g, '♦'), _0x115cc1 = _0x115cc1['replace'](/&#39;/g, '\x27'), _0x115cc1;
}
function strDiscode(_0x35c800) {
    return _0x35c800 = strNumDiscode(_0x35c800), _0x35c800 = strGreeceDiscode(_0x35c800), _0x35c800 = strcharacterDiscode(_0x35c800), _0x35c800 = strOtherDiscode(_0x35c800), _0x35c800;
}
function urlToHttpUrl(_0x133412, _0x46548b) {
    const _0x292248 = new RegExp('^//'), _0x4c9829 = _0x292248['test'](_0x133412);
    return _0x4c9829 && (_0x133412 = _0x46548b + ':' + _0x133412), _0x133412;
}
export default {
    'strDiscode': strDiscode,
    'urlToHttpUrl': urlToHttpUrl
};
