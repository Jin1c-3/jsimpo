import _0x3e6707 from 'fs-extra';
import _0x225394 from '../resource-schema';
import _0x4741a0 from '@hapi/joi';
jest['mock']('fs-extra'), jest['mock']('node-fetch', () => require('fetch-mock-jest')['sandbox']());
const fetchMock = require('node-fetch'), file = require('./file'), root = __dirname, content = 'Hello,\x20world!', url = 'http://example.com/file1.txt', url2 = 'http://example.com/file2.txt', response1 = 'query\x20{\x0a\x20\x20allGatsbyPlugin\x20{\x0a\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20name\x0a\x20\x20\x20\x20\x20\x20options\x0a\x20\x20\x20\x20\x20\x20resolvedOptions\x0a\x20\x20\x20\x20\x20\x20package\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20version\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20...\x20on\x20GatsbyTheme\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20files\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20shadowedFiles\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x20\x20}\x20\x20\x0a}', response2 = 'const\x20options\x20=\x20{\x0a\x20\x20key:\x20process.env.WHATEVER\x0a\x20\x20\x0a}';
describe('file\x20resource', () => {
    test('e2e\x20file\x20resource\x20test', async () => {
        const _0x3ce573 = { 'root': root }, _0x2fce5c = {
                'path': 'file.txt',
                'content': content
            }, _0xa59f43 = { 'content': content + '1' };
        _0x3e6707['readFile']['mockReturnValue'](_0x2fce5c['content']);
        const _0x3f4c7d = await file['plan'](_0x3ce573, _0x2fce5c);
        expect(_0x3f4c7d)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22currentState\x22:\x20\x22Hello,\x20world!\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22describe\x22:\x20\x22Write\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22diff\x22:\x20\x22\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22newState\x22:\x20\x22Hello,\x20world!\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20');
        const _0x572c55 = await file['create'](_0x3ce573, _0x2fce5c), _0x7b932f = _0x4741a0['validate'](_0x572c55, {
                ...file['schema'],
                ..._0x225394
            });
        expect(_0x7b932f['error'])['toBeNull'](), expect(_0x572c55)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22_message\x22:\x20\x22Wrote\x20file\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22content\x22:\x20\x22Hello,\x20world!\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22id\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22path\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20');
        const _0x48af80 = await file['read'](_0x3ce573, _0x572c55['id']);
        expect(_0x48af80)['toEqual'](_0x572c55);
        const _0x1b9397 = {
                ..._0x48af80,
                ..._0xa59f43
            }, _0x3c056b = await file['plan'](_0x3ce573, _0x1b9397);
        expect(_0x3c056b)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22currentState\x22:\x20\x22Hello,\x20world!\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22describe\x22:\x20\x22Write\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22diff\x22:\x20\x22-\x20Original\x20\x20-\x201\x0a\x20\x20\x20\x20\x20\x20+\x20Modified\x20\x20+\x201\x0a\x0a\x20\x20\x20\x20\x20\x20-\x20Hello,\x20world!\x0a\x20\x20\x20\x20\x20\x20+\x20Hello,\x20world!1\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22newState\x22:\x20\x22Hello,\x20world!1\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20'), _0x3e6707['readFile']['mockReturnValueOnce'](_0xa59f43['content']);
        const _0xdb4e6e = await file['update'](_0x3ce573, _0x1b9397);
        expect(_0xdb4e6e)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22_message\x22:\x20\x22Wrote\x20file\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22content\x22:\x20\x22Hello,\x20world!1\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22id\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22path\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20'), await file['destroy'](_0x3ce573, _0xdb4e6e);
    }), test('e2e\x20remote\x20file\x20resource\x20test', async () => {
        const _0x22bb61 = { 'root': root }, _0x499606 = {
                'path': 'file.txt',
                'content': url
            }, _0x196a81 = { 'content': url2 };
        _0x3e6707['readFile']['mockReturnValue'](response1);
        const {
            Readable: _0x527121,
            PassThrough: _0x1c44bd
        } = require('stream');
        _0x3e6707['createWriteStream']['mockImplementation'](() => new _0x1c44bd()), fetchMock['get'](url, () => {
            const _0x251686 = new _0x527121();
            return _0x251686['push'](response1), _0x251686['push'](null), _0x251686;
        }, { 'sendAsJson': ![] })['mock'](url2, response2), _0x3e6707['readFile']['mockReturnValueOnce']('');
        const _0xa5fc98 = await file['plan'](_0x22bb61, _0x499606);
        expect(_0xa5fc98['currentState'])['toEqual'](''), expect(_0xa5fc98['newState'])['toEqual'](response1);
        const _0x15abff = await file['create'](_0x22bb61, _0x499606), _0x2bd146 = _0x4741a0['validate'](_0x15abff, {
                ...file['schema'],
                ..._0x225394
            });
        expect(_0x2bd146['error'])['toBeNull'](), expect(_0x15abff['content'])['toEqual'](response1);
        const _0x33b416 = await file['read'](_0x22bb61, _0x15abff['id']);
        expect(_0x33b416)['toEqual'](_0x15abff);
        const _0x1e5d9e = {
                ..._0x33b416,
                ..._0x196a81
            }, _0x1d301c = await file['plan'](_0x22bb61, _0x1e5d9e);
        expect(_0x1d301c['diff'])['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20\x22-\x20Original\x20\x20-\x2023\x0a\x20\x20\x20\x20\x20\x20+\x20Modified\x20\x20+\x20\x203\x0a\x0a\x20\x20\x20\x20\x20\x20-\x20query\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20allGatsbyPlugin\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20name\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20options\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20resolvedOptions\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20package\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20version\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20...\x20on\x20GatsbyTheme\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20files\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20shadowedFiles\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20nodes\x20{\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20path\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20-\x20\x20\x20}\x20\x20\x0a\x20\x20\x20\x20\x20\x20+\x20const\x20options\x20=\x20{\x0a\x20\x20\x20\x20\x20\x20+\x20\x20\x20key:\x20process.env.WHATEVER\x0a\x20\x20\x20\x20\x20\x20+\x20\x20\x20\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x22\x0a\x20\x20\x20\x20'), _0x3e6707['readFile']['mockReturnValueOnce'](_0x196a81['content']);
        const _0x39e7a3 = await file['update'](_0x22bb61, _0x1e5d9e);
        expect(_0x39e7a3)['toMatchInlineSnapshot']('\x0a\x20\x20\x20\x20\x20\x20Object\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22_message\x22:\x20\x22Wrote\x20file\x20file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22content\x22:\x20\x22http://example.com/file2.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22id\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x22path\x22:\x20\x22file.txt\x22,\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20'), await file['destroy'](_0x22bb61, _0x39e7a3);
    });
});
