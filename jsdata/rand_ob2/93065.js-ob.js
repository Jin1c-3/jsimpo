const _0x1090 = [
    'min',
    'segmentTree',
    'length',
    'toBe',
    'should\x20build\x20tree\x20for\x20input\x20array\x20#1\x20with\x20length\x20of\x20power\x20of\x20two',
    'toEqual',
    'should\x20build\x20tree\x20for\x20input\x20array\x20#0\x20with\x20length\x20not\x20of\x20power\x20of\x20two',
    'should\x20build\x20max\x20array',
    'should\x20do\x20min\x20range\x20query\x20on\x20power\x20of\x20two\x20length\x20array',
    'rangeQuery',
    'should\x20do\x20min\x20range\x20query\x20on\x20not\x20power\x20of\x20two\x20length\x20array',
    'should\x20do\x20max\x20range\x20query',
    'max',
    'should\x20do\x20sum\x20range\x20query',
    '1pSTXJy',
    '20357vtqgEo',
    '1HJJFlm',
    '40659QEEDsv',
    '77125utVexS',
    '524bNppAf',
    '309DnapcN',
    '189400pRVgxR',
    '100633vaprdQ',
    '1HPmxKb',
    '216826oFdsHr',
    '1nBHLjq',
    'SegmentTree'
];
function _0xab14(_0x40c6c2, _0x11c331) {
    return _0xab14 = function (_0x109077, _0xab1497) {
        _0x109077 = _0x109077 - 0x102;
        let _0x266771 = _0x1090[_0x109077];
        return _0x266771;
    }, _0xab14(_0x40c6c2, _0x11c331);
}
const _0x26cb37 = _0xab14;
(function (_0x343b27, _0x2af21e) {
    const _0x1a2e5c = _0xab14;
    while (!![]) {
        try {
            const _0x307811 = parseInt(_0x1a2e5c(0x102)) * -parseInt(_0x1a2e5c(0x103)) + -parseInt(_0x1a2e5c(0x104)) * parseInt(_0x1a2e5c(0x105)) + parseInt(_0x1a2e5c(0x106)) + -parseInt(_0x1a2e5c(0x107)) * -parseInt(_0x1a2e5c(0x108)) + -parseInt(_0x1a2e5c(0x109)) + parseInt(_0x1a2e5c(0x10a)) * -parseInt(_0x1a2e5c(0x10b)) + parseInt(_0x1a2e5c(0x10c)) * parseInt(_0x1a2e5c(0x10d));
            if (_0x307811 === _0x2af21e)
                break;
            else
                _0x343b27['push'](_0x343b27['shift']());
        } catch (_0xc2df6e) {
            _0x343b27['push'](_0x343b27['shift']());
        }
    }
}(_0x1090, 0x19972));
import _0x3d1f1e from '../SegmentTree';
describe(_0x26cb37(0x10e), () => {
    const _0x4be84b = _0x26cb37;
    it('should\x20build\x20tree\x20for\x20input\x20array\x20#0\x20with\x20length\x20of\x20power\x20of\x20two', () => {
        const _0x33913c = _0xab14, _0x5e6249 = [
                -0x1,
                0x2
            ], _0x41409d = new _0x3d1f1e(_0x5e6249, Math[_0x33913c(0x10f)], Infinity);
        expect(_0x41409d[_0x33913c(0x110)])['toEqual']([
            -0x1,
            -0x1,
            0x2
        ]), expect(_0x41409d['segmentTree'][_0x33913c(0x111)])[_0x33913c(0x112)](0x2 * _0x5e6249['length'] - 0x1);
    }), it(_0x4be84b(0x113), () => {
        const _0x284d67 = _0x4be84b, _0x2e627d = [
                -0x1,
                0x2,
                0x4,
                0x0
            ], _0x30253c = new _0x3d1f1e(_0x2e627d, Math[_0x284d67(0x10f)], Infinity);
        expect(_0x30253c[_0x284d67(0x110)])[_0x284d67(0x114)]([
            -0x1,
            -0x1,
            0x0,
            -0x1,
            0x2,
            0x4,
            0x0
        ]), expect(_0x30253c['segmentTree']['length'])['toBe'](0x2 * _0x2e627d['length'] - 0x1);
    }), it(_0x4be84b(0x115), () => {
        const _0x52d40b = _0x4be84b, _0x377f82 = [
                0x0,
                0x1,
                0x2
            ], _0x41f80a = new _0x3d1f1e(_0x377f82, Math[_0x52d40b(0x10f)], Infinity);
        expect(_0x41f80a[_0x52d40b(0x110)])[_0x52d40b(0x114)]([
            0x0,
            0x0,
            0x2,
            0x0,
            0x1,
            null,
            null
        ]), expect(_0x41f80a[_0x52d40b(0x110)][_0x52d40b(0x111)])['toBe'](0x2 * 0x4 - 0x1);
    }), it('should\x20build\x20tree\x20for\x20input\x20array\x20#1\x20with\x20length\x20not\x20of\x20power\x20of\x20two', () => {
        const _0x290b3d = _0x4be84b, _0x31206f = [
                -0x1,
                0x3,
                0x4,
                0x0,
                0x2,
                0x1
            ], _0x54b2ba = new _0x3d1f1e(_0x31206f, Math[_0x290b3d(0x10f)], Infinity);
        expect(_0x54b2ba['segmentTree'])[_0x290b3d(0x114)]([
            -0x1,
            -0x1,
            0x0,
            -0x1,
            0x4,
            0x0,
            0x1,
            -0x1,
            0x3,
            null,
            null,
            0x0,
            0x2,
            null,
            null
        ]), expect(_0x54b2ba[_0x290b3d(0x110)]['length'])['toBe'](0x2 * 0x8 - 0x1);
    }), it(_0x4be84b(0x116), () => {
        const _0xbd6c8a = _0x4be84b, _0x2d2a4c = [
                -0x1,
                0x2,
                0x4,
                0x0
            ], _0x24367f = new _0x3d1f1e(_0x2d2a4c, Math['max'], -Infinity);
        expect(_0x24367f[_0xbd6c8a(0x110)])[_0xbd6c8a(0x114)]([
            0x4,
            0x2,
            0x4,
            -0x1,
            0x2,
            0x4,
            0x0
        ]), expect(_0x24367f[_0xbd6c8a(0x110)][_0xbd6c8a(0x111)])[_0xbd6c8a(0x112)](0x2 * _0x2d2a4c[_0xbd6c8a(0x111)] - 0x1);
    }), it('should\x20build\x20sum\x20array', () => {
        const _0x107371 = _0x4be84b, _0x7a7c44 = [
                -0x1,
                0x2,
                0x4,
                0x0
            ], _0x685c65 = new _0x3d1f1e(_0x7a7c44, (_0x2a842c, _0x135da7) => _0x2a842c + _0x135da7, 0x0);
        expect(_0x685c65[_0x107371(0x110)])[_0x107371(0x114)]([
            0x5,
            0x1,
            0x4,
            -0x1,
            0x2,
            0x4,
            0x0
        ]), expect(_0x685c65[_0x107371(0x110)][_0x107371(0x111)])[_0x107371(0x112)](0x2 * _0x7a7c44['length'] - 0x1);
    }), it(_0x4be84b(0x117), () => {
        const _0xca754a = _0x4be84b, _0x5023c8 = [
                -0x1,
                0x3,
                0x4,
                0x0,
                0x2,
                0x1
            ], _0x3831de = new _0x3d1f1e(_0x5023c8, Math[_0xca754a(0x10f)], Infinity);
        expect(_0x3831de[_0xca754a(0x118)](0x0, 0x5))[_0xca754a(0x112)](-0x1), expect(_0x3831de[_0xca754a(0x118)](0x0, 0x2))[_0xca754a(0x112)](-0x1), expect(_0x3831de[_0xca754a(0x118)](0x1, 0x3))[_0xca754a(0x112)](0x0), expect(_0x3831de[_0xca754a(0x118)](0x2, 0x4))[_0xca754a(0x112)](0x0), expect(_0x3831de[_0xca754a(0x118)](0x4, 0x5))[_0xca754a(0x112)](0x1), expect(_0x3831de['rangeQuery'](0x2, 0x2))['toBe'](0x4);
    }), it(_0x4be84b(0x119), () => {
        const _0x3193d4 = _0x4be84b, _0x5d76eb = [
                -0x1,
                0x2,
                0x4,
                0x0
            ], _0x328baa = new _0x3d1f1e(_0x5d76eb, Math[_0x3193d4(0x10f)], Infinity);
        expect(_0x328baa[_0x3193d4(0x118)](0x0, 0x4))[_0x3193d4(0x112)](-0x1), expect(_0x328baa[_0x3193d4(0x118)](0x0, 0x1))['toBe'](-0x1), expect(_0x328baa[_0x3193d4(0x118)](0x1, 0x3))['toBe'](0x0), expect(_0x328baa[_0x3193d4(0x118)](0x1, 0x2))[_0x3193d4(0x112)](0x2), expect(_0x328baa[_0x3193d4(0x118)](0x2, 0x3))['toBe'](0x0), expect(_0x328baa[_0x3193d4(0x118)](0x2, 0x2))[_0x3193d4(0x112)](0x4);
    }), it(_0x4be84b(0x11a), () => {
        const _0x44cfe1 = _0x4be84b, _0x58aa9c = [
                -0x1,
                0x3,
                0x4,
                0x0,
                0x2,
                0x1
            ], _0x3d2c5e = new _0x3d1f1e(_0x58aa9c, Math[_0x44cfe1(0x11b)], -Infinity);
        expect(_0x3d2c5e[_0x44cfe1(0x118)](0x0, 0x5))[_0x44cfe1(0x112)](0x4), expect(_0x3d2c5e[_0x44cfe1(0x118)](0x0, 0x1))[_0x44cfe1(0x112)](0x3), expect(_0x3d2c5e[_0x44cfe1(0x118)](0x1, 0x3))['toBe'](0x4), expect(_0x3d2c5e[_0x44cfe1(0x118)](0x2, 0x4))[_0x44cfe1(0x112)](0x4), expect(_0x3d2c5e[_0x44cfe1(0x118)](0x4, 0x5))[_0x44cfe1(0x112)](0x2), expect(_0x3d2c5e[_0x44cfe1(0x118)](0x3, 0x3))['toBe'](0x0);
    }), it(_0x4be84b(0x11c), () => {
        const _0x5cbf0a = _0x4be84b, _0x5e1d31 = [
                -0x1,
                0x3,
                0x4,
                0x0,
                0x2,
                0x1
            ], _0x13a8aa = new _0x3d1f1e(_0x5e1d31, (_0x2fa551, _0x12d3d3) => _0x2fa551 + _0x12d3d3, 0x0);
        expect(_0x13a8aa['rangeQuery'](0x0, 0x5))[_0x5cbf0a(0x112)](0x9), expect(_0x13a8aa['rangeQuery'](0x0, 0x1))['toBe'](0x2), expect(_0x13a8aa[_0x5cbf0a(0x118)](0x1, 0x3))['toBe'](0x7), expect(_0x13a8aa['rangeQuery'](0x2, 0x4))['toBe'](0x6), expect(_0x13a8aa[_0x5cbf0a(0x118)](0x4, 0x5))[_0x5cbf0a(0x112)](0x3), expect(_0x13a8aa[_0x5cbf0a(0x118)](0x3, 0x3))[_0x5cbf0a(0x112)](0x0);
    });
});
