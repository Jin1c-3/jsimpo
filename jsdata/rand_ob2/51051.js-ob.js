'use strict';
const _0x3c4c = [
    'compare',
    'start',
    'end',
    '647166cRYCDo',
    '212713wWePth',
    '3dNDwty',
    '605172tmktbF',
    '193868aeYIvt',
    '16067HseFXR',
    '346850CtbmHd',
    '1183575CtYHRV',
    '../common.js',
    'alloc',
    'length',
    'charCodeAt'
];
const _0x5b4edd = _0x15f0;
(function (_0xf21945, _0x310cdd) {
    const _0x3f846e = _0x15f0;
    while (!![]) {
        try {
            const _0x51e929 = parseInt(_0x3f846e(0x12d)) + parseInt(_0x3f846e(0x12e)) * -parseInt(_0x3f846e(0x12f)) + -parseInt(_0x3f846e(0x130)) + parseInt(_0x3f846e(0x131)) + parseInt(_0x3f846e(0x132)) + -parseInt(_0x3f846e(0x133)) + parseInt(_0x3f846e(0x134));
            if (_0x51e929 === _0x310cdd)
                break;
            else
                _0xf21945['push'](_0xf21945['shift']());
        } catch (_0x424535) {
            _0xf21945['push'](_0xf21945['shift']());
        }
    }
}(_0x3c4c, 0x6dfd3));
function _0x15f0(_0x2ba7fe, _0x7b80cf) {
    return _0x15f0 = function (_0x3c4c30, _0x15f03d) {
        _0x3c4c30 = _0x3c4c30 - 0x12d;
        let _0x5de13f = _0x3c4c[_0x3c4c30];
        return _0x5de13f;
    }, _0x15f0(_0x2ba7fe, _0x7b80cf);
}
const common = require(_0x5b4edd(0x135)), bench = common['createBenchmark'](main, {
        'size': [
            0x10,
            0x200,
            0x1000,
            0x4002
        ],
        'args': [
            0x1,
            0x2,
            0x5
        ],
        'n': [0xf4240]
    });
function main({
    n: _0x2a59d9,
    size: _0x5ad4b4,
    args: _0x37f5d5
}) {
    const _0x36c403 = _0x5b4edd, _0x4a3bcf = Buffer[_0x36c403(0x136)](_0x5ad4b4, 'a'), _0x4e46aa = Buffer[_0x36c403(0x136)](_0x5ad4b4, 'a'), _0x4b82a1 = _0x4a3bcf[_0x36c403(0x137)], _0x1a90ca = _0x4e46aa['length'];
    _0x4e46aa[_0x5ad4b4 - 0x1] = 'b'[_0x36c403(0x138)](0x0);
    switch (_0x37f5d5) {
    case 0x2:
        _0x4a3bcf[_0x36c403(0x139)](_0x4e46aa, 0x0), bench[_0x36c403(0x13a)]();
        for (let _0x211dcf = 0x0; _0x211dcf < _0x2a59d9; _0x211dcf++) {
            _0x4a3bcf[_0x36c403(0x139)](_0x4e46aa, 0x0);
        }
        bench[_0x36c403(0x13b)](_0x2a59d9);
        break;
    case 0x3:
        _0x4a3bcf[_0x36c403(0x139)](_0x4e46aa, 0x0, _0x1a90ca), bench[_0x36c403(0x13a)]();
        for (let _0x2587ec = 0x0; _0x2587ec < _0x2a59d9; _0x2587ec++) {
            _0x4a3bcf[_0x36c403(0x139)](_0x4e46aa, 0x0, _0x1a90ca);
        }
        bench[_0x36c403(0x13b)](_0x2a59d9);
        break;
    case 0x4:
        _0x4a3bcf[_0x36c403(0x139)](_0x4e46aa, 0x0, _0x1a90ca, 0x0), bench['start']();
        for (let _0x485b50 = 0x0; _0x485b50 < _0x2a59d9; _0x485b50++) {
            _0x4a3bcf[_0x36c403(0x139)](_0x4e46aa, 0x0, _0x1a90ca, 0x0);
        }
        bench['end'](_0x2a59d9);
        break;
    case 0x5:
        _0x4a3bcf[_0x36c403(0x139)](_0x4e46aa, 0x0, _0x1a90ca, 0x0, _0x4b82a1), bench[_0x36c403(0x13a)]();
        for (let _0x2883c6 = 0x0; _0x2883c6 < _0x2a59d9; _0x2883c6++) {
            _0x4a3bcf[_0x36c403(0x139)](_0x4e46aa, 0x0, _0x1a90ca, 0x0, _0x4b82a1);
        }
        bench[_0x36c403(0x13b)](_0x2a59d9);
        break;
    default:
        _0x4a3bcf['compare'](_0x4e46aa), bench[_0x36c403(0x13a)]();
        for (let _0x296674 = 0x0; _0x296674 < _0x2a59d9; _0x296674++) {
            _0x4a3bcf[_0x36c403(0x139)](_0x4e46aa);
        }
        bench[_0x36c403(0x13b)](_0x2a59d9);
    }
}
