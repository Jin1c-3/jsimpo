const _0x2373 = [
    'class\x20enum\x20extends\x20super\x20const\x20export\x20import',
    'enum',
    'eval\x20arguments',
    '\x20const\x20class\x20extends\x20export\x20import\x20super',
    'ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿕ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞮꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ',
    'length',
    'test',
    'fromCharCode',
    '608767UTYMIh',
    '1sIChSI',
    '590078LogFmj',
    '173947rEpsyK',
    '124309AKhpaQ',
    '1kIWAYt',
    '158743foxCQk',
    '1OmurAG',
    '109964hjxifE',
    '90714PBAyBu',
    'abstract\x20boolean\x20byte\x20char\x20class\x20double\x20enum\x20export\x20extends\x20final\x20float\x20goto\x20implements\x20import\x20int\x20interface\x20long\x20native\x20package\x20private\x20protected\x20public\x20short\x20static\x20super\x20synchronized\x20throws\x20transient\x20volatile'
];
const _0x351c40 = _0x3795;
(function (_0x2671e1, _0x3a787b) {
    const _0x447937 = _0x3795;
    while (!![]) {
        try {
            const _0x110f14 = parseInt(_0x447937(0x14f)) * parseInt(_0x447937(0x150)) + -parseInt(_0x447937(0x151)) + parseInt(_0x447937(0x152)) + -parseInt(_0x447937(0x153)) * -parseInt(_0x447937(0x154)) + parseInt(_0x447937(0x155)) * -parseInt(_0x447937(0x156)) + parseInt(_0x447937(0x157)) + parseInt(_0x447937(0x158));
            if (_0x110f14 === _0x3a787b)
                break;
            else
                _0x2671e1['push'](_0x2671e1['shift']());
        } catch (_0x3116f1) {
            _0x2671e1['push'](_0x2671e1['shift']());
        }
    }
}(_0x2373, 0x579e0));
export const reservedWords = {
    0x3: _0x351c40(0x159),
    0x5: _0x351c40(0x15a),
    0x6: _0x351c40(0x15b),
    'strict': 'implements\x20interface\x20let\x20package\x20private\x20protected\x20public\x20static\x20yield',
    'strictBind': _0x351c40(0x15c)
};
var ecma5AndLessKeywords = 'break\x20case\x20catch\x20continue\x20debugger\x20default\x20do\x20else\x20finally\x20for\x20function\x20if\x20return\x20switch\x20throw\x20try\x20var\x20while\x20with\x20null\x20true\x20false\x20instanceof\x20typeof\x20void\x20delete\x20new\x20in\x20this';
export const keywords = {
    0x5: ecma5AndLessKeywords,
    0x6: ecma5AndLessKeywords + _0x351c40(0x15d)
};
let nonASCIIidentifierStartChars = _0x351c40(0x15e), nonASCIIidentifierChars = '‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣔ-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿';
function _0x3795(_0x27903a, _0x213493) {
    return _0x3795 = function (_0x23736b, _0x3795c6) {
        _0x23736b = _0x23736b - 0x14f;
        let _0x49b7f7 = _0x2373[_0x23736b];
        return _0x49b7f7;
    }, _0x3795(_0x27903a, _0x213493);
}
const nonASCIIidentifierStart = new RegExp('[' + nonASCIIidentifierStartChars + ']'), nonASCIIidentifier = new RegExp('[' + nonASCIIidentifierStartChars + nonASCIIidentifierChars + ']');
nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
const astralIdentifierStartCodes = [
        0x0,
        0xb,
        0x2,
        0x19,
        0x2,
        0x12,
        0x2,
        0x1,
        0x2,
        0xe,
        0x3,
        0xd,
        0x23,
        0x7a,
        0x46,
        0x34,
        0x10c,
        0x1c,
        0x4,
        0x30,
        0x30,
        0x1f,
        0x11,
        0x1a,
        0x6,
        0x25,
        0xb,
        0x1d,
        0x3,
        0x23,
        0x5,
        0x7,
        0x2,
        0x4,
        0x2b,
        0x9d,
        0x13,
        0x23,
        0x5,
        0x23,
        0x5,
        0x27,
        0x9,
        0x33,
        0x9d,
        0x136,
        0xa,
        0x15,
        0xb,
        0x7,
        0x99,
        0x5,
        0x3,
        0x0,
        0x2,
        0x2b,
        0x2,
        0x1,
        0x4,
        0x0,
        0x3,
        0x16,
        0xb,
        0x16,
        0xa,
        0x1e,
        0x42,
        0x12,
        0x2,
        0x1,
        0xb,
        0x15,
        0xb,
        0x19,
        0x47,
        0x37,
        0x7,
        0x1,
        0x41,
        0x0,
        0x10,
        0x3,
        0x2,
        0x2,
        0x2,
        0x1a,
        0x2d,
        0x1c,
        0x4,
        0x1c,
        0x24,
        0x7,
        0x2,
        0x1b,
        0x1c,
        0x35,
        0xb,
        0x15,
        0xb,
        0x12,
        0xe,
        0x11,
        0x6f,
        0x48,
        0x38,
        0x32,
        0xe,
        0x32,
        0x311,
        0x34,
        0x4c,
        0x2c,
        0x21,
        0x18,
        0x1b,
        0x23,
        0x2a,
        0x22,
        0x4,
        0x0,
        0xd,
        0x2f,
        0xf,
        0x3,
        0x16,
        0x0,
        0x2,
        0x0,
        0x24,
        0x11,
        0x2,
        0x18,
        0x55,
        0x6,
        0x2,
        0x0,
        0x2,
        0x3,
        0x2,
        0xe,
        0x2,
        0x9,
        0x8,
        0x2e,
        0x27,
        0x7,
        0x3,
        0x1,
        0x3,
        0x15,
        0x2,
        0x6,
        0x2,
        0x1,
        0x2,
        0x4,
        0x4,
        0x0,
        0x13,
        0x0,
        0xd,
        0x4,
        0x9f,
        0x34,
        0x13,
        0x3,
        0x36,
        0x2f,
        0x15,
        0x1,
        0x2,
        0x0,
        0xb9,
        0x2e,
        0x2a,
        0x3,
        0x25,
        0x2f,
        0x15,
        0x0,
        0x3c,
        0x2a,
        0x56,
        0x19,
        0x187,
        0x3f,
        0x20,
        0x0,
        0x1c1,
        0x38,
        0x108,
        0x8,
        0x2,
        0x24,
        0x12,
        0x0,
        0x32,
        0x1d,
        0x371,
        0x399,
        0x67,
        0x6e,
        0x12,
        0xc3,
        0xabd,
        0x42e,
        0xfd2,
        0x246,
        0x21ba,
        0x238,
        0x8,
        0x1e,
        0x72,
        0x1d,
        0x13,
        0x2f,
        0x11,
        0x3,
        0x20,
        0x14,
        0x6,
        0x12,
        0x371,
        0x44,
        0xc,
        0x0,
        0x43,
        0xc,
        0x41,
        0x0,
        0x20,
        0x17ec,
        0x14,
        0x2f2,
        0x250e,
        0x1,
        0xbff,
        0x6a,
        0x6,
        0xc,
        0x4,
        0x8,
        0x8,
        0x9,
        0x1767,
        0x54,
        0x2,
        0x46,
        0x2,
        0x1,
        0x3,
        0x0,
        0x3,
        0x1,
        0x3,
        0x3,
        0x2,
        0xb,
        0x2,
        0x0,
        0x2,
        0x6,
        0x2,
        0x40,
        0x2,
        0x3,
        0x3,
        0x7,
        0x2,
        0x6,
        0x2,
        0x1b,
        0x2,
        0x3,
        0x2,
        0x4,
        0x2,
        0x0,
        0x4,
        0x6,
        0x2,
        0x153,
        0x3,
        0x18,
        0x2,
        0x18,
        0x2,
        0x1e,
        0x2,
        0x18,
        0x2,
        0x1e,
        0x2,
        0x18,
        0x2,
        0x1e,
        0x2,
        0x18,
        0x2,
        0x1e,
        0x2,
        0x18,
        0x2,
        0x7,
        0x1035,
        0xc4,
        0x3c,
        0x43,
        0x4bd,
        0x3,
        0x2,
        0x1a,
        0x2,
        0x1,
        0x2,
        0x0,
        0x3,
        0x0,
        0x2,
        0x9,
        0x2,
        0x3,
        0x2,
        0x0,
        0x2,
        0x0,
        0x7,
        0x0,
        0x5,
        0x0,
        0x2,
        0x0,
        0x2,
        0x0,
        0x2,
        0x2,
        0x2,
        0x1,
        0x2,
        0x0,
        0x3,
        0x0,
        0x2,
        0x0,
        0x2,
        0x0,
        0x2,
        0x0,
        0x2,
        0x0,
        0x2,
        0x1,
        0x2,
        0x0,
        0x3,
        0x3,
        0x2,
        0x6,
        0x2,
        0x3,
        0x2,
        0x3,
        0x2,
        0x0,
        0x2,
        0x9,
        0x2,
        0x10,
        0x6,
        0x2,
        0x2,
        0x4,
        0x2,
        0x10,
        0x1145,
        0xa6d6,
        0x2a,
        0x1034,
        0xc,
        0xdd,
        0x3,
        0x1681,
        0x295f,
        0x21d
    ], astralIdentifierCodes = [
        0x1fd,
        0x0,
        0xe3,
        0x0,
        0x96,
        0x4,
        0x126,
        0x9,
        0x558,
        0x2,
        0x2,
        0x1,
        0x6,
        0x3,
        0x29,
        0x2,
        0x5,
        0x0,
        0xa6,
        0x1,
        0x51a,
        0x2,
        0x36,
        0xe,
        0x20,
        0x9,
        0x10,
        0x3,
        0x2e,
        0xa,
        0x36,
        0x9,
        0x7,
        0x2,
        0x25,
        0xd,
        0x2,
        0x9,
        0x34,
        0x0,
        0xd,
        0x2,
        0x31,
        0xd,
        0xa,
        0x2,
        0x4,
        0x9,
        0x53,
        0xb,
        0x7,
        0x0,
        0xa1,
        0xb,
        0x6,
        0x9,
        0x7,
        0x3,
        0x39,
        0x0,
        0x2,
        0x6,
        0x3,
        0x1,
        0x3,
        0x2,
        0xa,
        0x0,
        0xb,
        0x1,
        0x3,
        0x6,
        0x4,
        0x4,
        0xc1,
        0x11,
        0xa,
        0x9,
        0x57,
        0x13,
        0xd,
        0x9,
        0xd6,
        0x6,
        0x3,
        0x8,
        0x1c,
        0x1,
        0x53,
        0x10,
        0x10,
        0x9,
        0x52,
        0xc,
        0x9,
        0x9,
        0x54,
        0xe,
        0x5,
        0x9,
        0x1a7,
        0x9,
        0x346,
        0x7,
        0x2,
        0x7,
        0x11,
        0x9,
        0x39,
        0x15,
        0x2,
        0xd,
        0x4daa,
        0x9,
        0x87,
        0x4,
        0x3c,
        0x6,
        0x1a,
        0x9,
        0x3f8,
        0x2d,
        0x11,
        0x3,
        0x4d0b,
        0x1,
        0x14c7,
        0x4,
        0x4,
        0x5,
        0x9,
        0x7,
        0x3,
        0x6,
        0x1f,
        0x3,
        0x95,
        0x2,
        0x58a,
        0x31,
        0x201,
        0x36,
        0x5,
        0x31,
        0x9,
        0x0,
        0xf,
        0x0,
        0x17,
        0x4,
        0x2,
        0xe,
        0x551,
        0x6,
        0x2,
        0x10,
        0x3,
        0x6,
        0x2,
        0x1,
        0x2,
        0x4,
        0x8a6,
        0x6,
        0x6e,
        0x6,
        0x6,
        0x9,
        0xc17a7,
        0xef
    ];
function isInAstralSet(_0x179c84, _0x1c52c6) {
    const _0x4ecf5b = _0x351c40;
    let _0x2a7ca4 = 0x10000;
    for (let _0x3aa953 = 0x0; _0x3aa953 < _0x1c52c6[_0x4ecf5b(0x15f)]; _0x3aa953 += 0x2) {
        _0x2a7ca4 += _0x1c52c6[_0x3aa953];
        if (_0x2a7ca4 > _0x179c84)
            return ![];
        _0x2a7ca4 += _0x1c52c6[_0x3aa953 + 0x1];
        if (_0x2a7ca4 >= _0x179c84)
            return !![];
    }
}
export function isIdentifierStart(_0x124ee9, _0xf9a75c) {
    const _0x3176af = _0x351c40;
    if (_0x124ee9 < 0x41)
        return _0x124ee9 === 0x24;
    if (_0x124ee9 < 0x5b)
        return !![];
    if (_0x124ee9 < 0x61)
        return _0x124ee9 === 0x5f;
    if (_0x124ee9 < 0x7b)
        return !![];
    if (_0x124ee9 <= 0xffff)
        return _0x124ee9 >= 0xaa && nonASCIIidentifierStart[_0x3176af(0x160)](String[_0x3176af(0x161)](_0x124ee9));
    if (_0xf9a75c === ![])
        return ![];
    return isInAstralSet(_0x124ee9, astralIdentifierStartCodes);
}
export function isIdentifierChar(_0x27e53d, _0x31f11c) {
    if (_0x27e53d < 0x30)
        return _0x27e53d === 0x24;
    if (_0x27e53d < 0x3a)
        return !![];
    if (_0x27e53d < 0x41)
        return ![];
    if (_0x27e53d < 0x5b)
        return !![];
    if (_0x27e53d < 0x61)
        return _0x27e53d === 0x5f;
    if (_0x27e53d < 0x7b)
        return !![];
    if (_0x27e53d <= 0xffff)
        return _0x27e53d >= 0xaa && nonASCIIidentifier['test'](String['fromCharCode'](_0x27e53d));
    if (_0x31f11c === ![])
        return ![];
    return isInAstralSet(_0x27e53d, astralIdentifierStartCodes) || isInAstralSet(_0x27e53d, astralIdentifierCodes);
}
