const _0xf521 = [
    'type',
    'root',
    'equal',
    'length',
    'nodes',
    'rule',
    'selector',
    'body',
    'decl',
    'prop',
    'color',
    'value',
    'minifier-css\x20-\x20CSS\x20AST\x20can\x20be\x20converted\x20back\x20into\x20a\x20string',
    'stringifyCss',
    'code',
    'isNotNull',
    'minifier-css\x20-\x20simple\x20CSS\x20minification',
    'minifyCss',
    'a\x20\x09\x0a{\x20color:\x20red\x20}\x20\x0a',
    'whitespace\x20check',
    'a\x20\x09\x0a{\x20color:\x20red;\x20margin:\x201;\x20}\x20\x0a',
    'a\x20\x09\x0a{\x20color:\x20red;;;\x20margin:\x201;;;\x20}\x20\x0a',
    'a{color:red;margin:1}',
    'more\x20semicolons\x20than\x20needed',
    'a\x20,\x20p\x20\x09\x0a{\x20color:\x20red;\x20}\x20\x0a',
    'a,p{color:red}',
    'multiple\x20selectors',
    'body\x20{}',
    'removing\x20empty\x20rules',
    '.my-class{color:#fff}',
    'removing\x20universal\x20selector',
    'p\x20>\x20*.my-class\x20{\x20color:\x20#fff;\x20}',
    'p>.my-class{color:#fff}',
    'removing\x20optional\x20whitespace\x20around\x20\x22>\x22\x20in\x20selector',
    'p\x20+\x20\x20*.my-class\x20{\x20color:\x20#fff;\x20}',
    'p+.my-class{color:#fff}',
    'removing\x20optional\x20whitespace\x20around\x20\x22+\x22\x20in\x20selector',
    'removing\x20quotes\x20in\x20font\x20and\x20url\x20(if\x20possible)',
    '/*\x20no\x20comments\x20*/\x20a\x20{\x20color:\x20red;\x20}',
    'a{color:red}',
    'minifier-css\x20-\x20Multiple\x20CSS\x20AST\x27s\x20can\x20be\x20merged\x20into\x20a\x20single\x20CSS\x20AST',
    '@import\x20\x22custom.css\x22;\x20body\x20{\x20color:\x20\x22red\x22;\x20}',
    'body\x20{\x20color:\x20\x22blue\x22;\x20}',
    'test.css',
    'map',
    'sources',
    'minifier-css\x20-\x20hoist\x20imports\x20from\x20merged\x20CSS\x20AST\x27s',
    '@import\x20\x22other.css\x22;\x20body\x20{\x20color:\x20\x22blue\x22;\x20}',
    'test2.css',
    'mergeCssAsts',
    'name',
    'minifier-css\x20-\x20hoist\x20imports\x20after\x20comments\x20from\x20merged\x20CSS\x20AST\x27s',
    '/*\x20comment\x20*/\x20@import\x20\x22other.css\x22;\x20body\x20{\x20color:\x20\x22blue\x22;\x20}',
    'import',
    'comment',
    '534535eLWMoI',
    '1SbWPUQ',
    '89074EBCYOG',
    '966112Wibhot',
    '19tljuyJ',
    '29149IQJUXi',
    '1HiKEbV',
    '857657fxxemT',
    '1226866GqvdtK',
    '3588109aUxbeJ',
    'add',
    'minifier-css\x20-\x20CSS\x20can\x20be\x20parsed\x20properly\x20into\x20an\x20AST',
    'parseCss',
    'body\x20{\x20color:\x20\x22red\x22}'
];
const _0x533273 = _0x4654;
function _0x4654(_0x221774, _0xc812de) {
    return _0x4654 = function (_0xf521b3, _0x46542e) {
        _0xf521b3 = _0xf521b3 - 0x1b5;
        let _0x2a3b5b = _0xf521[_0xf521b3];
        return _0x2a3b5b;
    }, _0x4654(_0x221774, _0xc812de);
}
(function (_0x44530c, _0x336032) {
    const _0x35d2df = _0x4654;
    while (!![]) {
        try {
            const _0x36b54c = parseInt(_0x35d2df(0x1b5)) + parseInt(_0x35d2df(0x1b6)) * parseInt(_0x35d2df(0x1b7)) + parseInt(_0x35d2df(0x1b8)) + -parseInt(_0x35d2df(0x1b9)) * -parseInt(_0x35d2df(0x1ba)) + -parseInt(_0x35d2df(0x1bb)) * -parseInt(_0x35d2df(0x1bc)) + parseInt(_0x35d2df(0x1bd)) + -parseInt(_0x35d2df(0x1be));
            if (_0x36b54c === _0x336032)
                break;
            else
                _0x44530c['push'](_0x44530c['shift']());
        } catch (_0x121b34) {
            _0x44530c['push'](_0x44530c['shift']());
        }
    }
}(_0xf521, 0x9c3de));
import { CssTools } from './minifier';
Tinytest[_0x533273(0x1bf)](_0x533273(0x1c0), _0x1d47a6 => {
    const _0x160a42 = _0x533273, _0xc4b83a = CssTools[_0x160a42(0x1c1)](_0x160a42(0x1c2));
    _0x1d47a6['equal'](_0xc4b83a[_0x160a42(0x1c3)], _0x160a42(0x1c4)), _0x1d47a6[_0x160a42(0x1c5)](_0xc4b83a['nodes'][_0x160a42(0x1c6)], 0x1);
    const _0x454c9f = _0xc4b83a[_0x160a42(0x1c7)][0x0];
    _0x1d47a6[_0x160a42(0x1c5)](_0x454c9f[_0x160a42(0x1c3)], _0x160a42(0x1c8)), _0x1d47a6['equal'](_0x454c9f[_0x160a42(0x1c9)], _0x160a42(0x1ca)), _0x1d47a6['equal'](_0x454c9f['nodes'][_0x160a42(0x1c6)], 0x1);
    const _0x2b6c7f = _0x454c9f[_0x160a42(0x1c7)][0x0];
    _0x1d47a6['equal'](_0x2b6c7f[_0x160a42(0x1c3)], _0x160a42(0x1cb)), _0x1d47a6[_0x160a42(0x1c5)](_0x2b6c7f[_0x160a42(0x1cc)], _0x160a42(0x1cd)), _0x1d47a6[_0x160a42(0x1c5)](_0x2b6c7f[_0x160a42(0x1ce)], '\x22red\x22');
}), Tinytest[_0x533273(0x1bf)](_0x533273(0x1cf), _0xd46c4d => {
    const _0x378cd6 = _0x533273, _0x2abfcd = 'body\x20{\x20color:\x20\x22red\x22}', _0x2b798d = CssTools['parseCss'](_0x2abfcd), _0x15c750 = CssTools[_0x378cd6(0x1d0)](_0x2b798d, { 'sourcemap': !![] });
    _0xd46c4d['equal'](_0x2abfcd, _0x15c750[_0x378cd6(0x1d1)]), _0xd46c4d[_0x378cd6(0x1d2)](_0x15c750['map']);
}), Tinytest[_0x533273(0x1bf)](_0x533273(0x1d3), _0x19c381 => {
    const _0x2bd661 = _0x533273, _0x1cffce = (_0x3159c2, _0x37aafb, _0xd124d7) => {
            const _0x24e337 = _0x4654;
            _0x19c381[_0x24e337(0x1c5)](CssTools[_0x24e337(0x1d4)](_0x3159c2)[0x0], _0x37aafb, _0xd124d7);
        };
    _0x1cffce(_0x2bd661(0x1d5), 'a{color:red}', _0x2bd661(0x1d6)), _0x1cffce(_0x2bd661(0x1d7), 'a{color:red;margin:1}', 'only\x20last\x20one\x20loses\x20semicolon'), _0x1cffce(_0x2bd661(0x1d8), _0x2bd661(0x1d9), _0x2bd661(0x1da)), _0x1cffce(_0x2bd661(0x1db), _0x2bd661(0x1dc), _0x2bd661(0x1dd)), _0x1cffce(_0x2bd661(0x1de), '', _0x2bd661(0x1df)), _0x1cffce('*.my-class\x20{\x20color:\x20#fff;\x20}', _0x2bd661(0x1e0), _0x2bd661(0x1e1)), _0x1cffce(_0x2bd661(0x1e2), _0x2bd661(0x1e3), _0x2bd661(0x1e4)), _0x1cffce(_0x2bd661(0x1e5), _0x2bd661(0x1e6), _0x2bd661(0x1e7)), _0x1cffce('a\x20{\x0a\x20\x20\x20\x20font:12px\x20\x27Helvetica\x27,\x22Arial\x22,\x27Nautica\x27;\x0a\x20\x20\x20\x20background:url(\x22/some/nice/picture.png\x22);\x0a}', 'a{font:12px\x20Helvetica,Arial,Nautica;background:url(/some/nice/picture.png)}', _0x2bd661(0x1e8)), _0x1cffce(_0x2bd661(0x1e9), _0x2bd661(0x1ea), 'remove\x20comments');
}), Tinytest[_0x533273(0x1bf)](_0x533273(0x1eb), _0x3384f9 => {
    const _0x1a9787 = _0x533273, _0x47cfb1 = _0x1a9787(0x1ec), _0x2d734f = _0x1a9787(0x1ed), _0x2226e1 = CssTools[_0x1a9787(0x1c1)](_0x47cfb1, { 'from': _0x1a9787(0x1ee) }), _0x3b78fd = CssTools[_0x1a9787(0x1c1)](_0x2d734f, { 'from': 'test2.css' }), _0x55071e = CssTools['mergeCssAsts']([
            _0x2226e1,
            _0x3b78fd
        ]), _0x1643c5 = CssTools[_0x1a9787(0x1d0)](_0x55071e, {
            'sourcemap': !![],
            'inputSourcemaps': ![]
        });
    _0x3384f9[_0x1a9787(0x1c5)](_0x55071e['nodes'][_0x1a9787(0x1c6)], 0x3), _0x3384f9[_0x1a9787(0x1c5)](_0x1643c5[_0x1a9787(0x1ef)][_0x1a9787(0x1f0)][_0x1a9787(0x1c6)], 0x2), _0x3384f9['equal'](_0x1643c5[_0x1a9787(0x1ef)]['sources'][0x0], 'test.css');
}), Tinytest['add'](_0x533273(0x1f1), _0x4d4618 => {
    const _0x4d219b = _0x533273, _0xafecc2 = _0x4d219b(0x1ec), _0x43754e = _0x4d219b(0x1f2), _0x1a31fc = CssTools[_0x4d219b(0x1c1)](_0xafecc2, { 'from': _0x4d219b(0x1ee) }), _0x119510 = CssTools[_0x4d219b(0x1c1)](_0x43754e, { 'from': _0x4d219b(0x1f3) }), _0x5e959d = CssTools[_0x4d219b(0x1f4)]([
            _0x1a31fc,
            _0x119510
        ]), _0x1210e2 = CssTools[_0x4d219b(0x1d0)](_0x5e959d, {
            'sourcemap': !![],
            'inputSourcemaps': ![]
        });
    _0x4d4618['equal'](_0x5e959d[_0x4d219b(0x1c7)][_0x4d219b(0x1c6)], 0x4), _0x4d4618[_0x4d219b(0x1c5)](_0x5e959d['nodes'][0x0][_0x4d219b(0x1f5)], 'import'), _0x4d4618[_0x4d219b(0x1c5)](_0x5e959d[_0x4d219b(0x1c7)][0x1][_0x4d219b(0x1f5)], 'import'), _0x4d4618['equal'](_0x5e959d[_0x4d219b(0x1c7)][0x2]['type'], 'rule'), _0x4d4618[_0x4d219b(0x1c5)](_0x5e959d[_0x4d219b(0x1c7)][0x3]['type'], _0x4d219b(0x1c8)), _0x4d4618[_0x4d219b(0x1c5)](_0x1210e2[_0x4d219b(0x1ef)][_0x4d219b(0x1f0)][_0x4d219b(0x1c6)], 0x2), _0x4d4618[_0x4d219b(0x1c5)](_0x1210e2[_0x4d219b(0x1ef)][_0x4d219b(0x1f0)][0x0], 'test.css');
}), Tinytest[_0x533273(0x1bf)](_0x533273(0x1f6), _0x2400b1 => {
    const _0x7320e8 = _0x533273, _0x55a1a5 = _0x7320e8(0x1ec), _0x421012 = _0x7320e8(0x1f7), _0x30a0d6 = CssTools[_0x7320e8(0x1c1)](_0x55a1a5, { 'from': _0x7320e8(0x1ee) }), _0x1d75e9 = CssTools[_0x7320e8(0x1c1)](_0x421012, { 'from': _0x7320e8(0x1f3) }), _0x205e53 = CssTools[_0x7320e8(0x1f4)]([
            _0x30a0d6,
            _0x1d75e9
        ]), _0x125a08 = CssTools[_0x7320e8(0x1d0)](_0x205e53, {
            'sourcemap': !![],
            'inputSourcemaps': ![]
        });
    _0x2400b1['equal'](_0x205e53[_0x7320e8(0x1c7)][_0x7320e8(0x1c6)], 0x5), _0x2400b1[_0x7320e8(0x1c5)](_0x205e53[_0x7320e8(0x1c7)][0x0][_0x7320e8(0x1f5)], _0x7320e8(0x1f8)), _0x2400b1[_0x7320e8(0x1c5)](_0x205e53['nodes'][0x1][_0x7320e8(0x1c3)], _0x7320e8(0x1f9)), _0x2400b1[_0x7320e8(0x1c5)](_0x205e53[_0x7320e8(0x1c7)][0x2][_0x7320e8(0x1f5)], 'import'), _0x2400b1['equal'](_0x205e53['nodes'][0x3][_0x7320e8(0x1c3)], _0x7320e8(0x1c8)), _0x2400b1['equal'](_0x205e53[_0x7320e8(0x1c7)][0x4][_0x7320e8(0x1c3)], _0x7320e8(0x1c8)), _0x2400b1[_0x7320e8(0x1c5)](_0x125a08[_0x7320e8(0x1ef)][_0x7320e8(0x1f0)]['length'], 0x2), _0x2400b1[_0x7320e8(0x1c5)](_0x125a08['map'][_0x7320e8(0x1f0)][0x0], _0x7320e8(0x1ee));
});
