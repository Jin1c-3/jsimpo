'use strict';
const _0x5f28 = [
    'charCodeAt',
    'ceil',
    'exports',
    '46702LTDcQI',
    '20wrRbgA',
    '1sqGrIS',
    '569389epuFrv',
    '1009585VNqUCz',
    '661049SYQWuf',
    '2gpsAAJ',
    '303741cUrcIb',
    '559717UDrTld',
    '2507821KmIAOl',
    '1eJvRpF',
    'length'
];
const _0x72faa2 = _0x2e7e;
(function (_0x51657c, _0x219276) {
    const _0x79ec4d = _0x2e7e;
    while (!![]) {
        try {
            const _0x1e8234 = parseInt(_0x79ec4d(0x17e)) * -parseInt(_0x79ec4d(0x17f)) + -parseInt(_0x79ec4d(0x180)) * parseInt(_0x79ec4d(0x181)) + -parseInt(_0x79ec4d(0x182)) + parseInt(_0x79ec4d(0x183)) + -parseInt(_0x79ec4d(0x184)) * parseInt(_0x79ec4d(0x185)) + parseInt(_0x79ec4d(0x186)) + parseInt(_0x79ec4d(0x187)) * parseInt(_0x79ec4d(0x188));
            if (_0x1e8234 === _0x219276)
                break;
            else
                _0x51657c['push'](_0x51657c['shift']());
        } catch (_0x36f98a) {
            _0x51657c['push'](_0x51657c['shift']());
        }
    }
}(_0x5f28, 0x9475b));
const peq = new Uint32Array(0x10000), myers_32 = (_0x33c575, _0x3704e7) => {
        const _0x40db1e = _0x2e7e, _0x17d918 = _0x33c575[_0x40db1e(0x189)], _0x269162 = _0x3704e7['length'], _0xf57122 = 0x1 << _0x17d918 - 0x1;
        let _0x4a7199 = -0x1, _0x27f480 = 0x0, _0x268abb = _0x17d918, _0x5b6bbb = _0x17d918;
        while (_0x5b6bbb--) {
            peq[_0x33c575[_0x40db1e(0x18a)](_0x5b6bbb)] |= 0x1 << _0x5b6bbb;
        }
        for (_0x5b6bbb = 0x0; _0x5b6bbb < _0x269162; _0x5b6bbb++) {
            let _0x57a0cf = peq[_0x3704e7['charCodeAt'](_0x5b6bbb)];
            const _0x4a8236 = _0x57a0cf | _0x27f480;
            _0x57a0cf |= (_0x57a0cf & _0x4a7199) + _0x4a7199 ^ _0x4a7199, _0x27f480 |= ~(_0x57a0cf | _0x4a7199), _0x4a7199 &= _0x57a0cf, _0x27f480 & _0xf57122 && _0x268abb++, _0x4a7199 & _0xf57122 && _0x268abb--, _0x27f480 = _0x27f480 << 0x1 | 0x1, _0x4a7199 = _0x4a7199 << 0x1 | ~(_0x4a8236 | _0x27f480), _0x27f480 &= _0x4a8236;
        }
        _0x5b6bbb = _0x17d918;
        while (_0x5b6bbb--) {
            peq[_0x33c575[_0x40db1e(0x18a)](_0x5b6bbb)] = 0x0;
        }
        return _0x268abb;
    }, myers_x = (_0x17d9bb, _0x1aace8) => {
        const _0x4e631a = _0x2e7e, _0x2720a9 = _0x17d9bb[_0x4e631a(0x189)], _0x7d6851 = _0x1aace8[_0x4e631a(0x189)], _0x52440b = [], _0x2fd95a = [], _0x19269d = Math[_0x4e631a(0x18b)](_0x2720a9 / 0x20), _0xf575a9 = Math[_0x4e631a(0x18b)](_0x7d6851 / 0x20);
        let _0x49e348 = _0x7d6851;
        for (let _0xf099db = 0x0; _0xf099db < _0x19269d; _0xf099db++) {
            _0x2fd95a[_0xf099db] = -0x1, _0x52440b[_0xf099db] = 0x0;
        }
        let _0xe38afc = 0x0;
        for (; _0xe38afc < _0xf575a9 - 0x1; _0xe38afc++) {
            let _0xccbcbd = 0x0, _0x12eb79 = -0x1;
            const _0x4503b4 = _0xe38afc * 0x20, _0x319d1f = Math['min'](0x20, _0x7d6851) + _0x4503b4;
            for (let _0x3b1e77 = _0x4503b4; _0x3b1e77 < _0x319d1f; _0x3b1e77++) {
                peq[_0x1aace8[_0x4e631a(0x18a)](_0x3b1e77)] |= 0x1 << _0x3b1e77;
            }
            _0x49e348 = _0x7d6851;
            for (let _0x5e222b = 0x0; _0x5e222b < _0x2720a9; _0x5e222b++) {
                const _0x86dee5 = peq[_0x17d9bb[_0x4e631a(0x18a)](_0x5e222b)], _0x5e06b3 = _0x2fd95a[_0x5e222b / 0x20 | 0x0] >>> _0x5e222b & 0x1, _0x3f81ba = _0x52440b[_0x5e222b / 0x20 | 0x0] >>> _0x5e222b & 0x1, _0x3fb9b0 = _0x86dee5 | _0xccbcbd, _0x573190 = ((_0x86dee5 | _0x3f81ba) & _0x12eb79) + _0x12eb79 ^ _0x12eb79 | _0x86dee5 | _0x3f81ba;
                let _0x1d510b = _0xccbcbd | ~(_0x573190 | _0x12eb79), _0x21bc9e = _0x12eb79 & _0x573190;
                _0x1d510b >>> 0x1f ^ _0x5e06b3 && (_0x2fd95a[_0x5e222b / 0x20 | 0x0] ^= 0x1 << _0x5e222b), _0x21bc9e >>> 0x1f ^ _0x3f81ba && (_0x52440b[_0x5e222b / 0x20 | 0x0] ^= 0x1 << _0x5e222b), _0x1d510b = _0x1d510b << 0x1 | _0x5e06b3, _0x21bc9e = _0x21bc9e << 0x1 | _0x3f81ba, _0x12eb79 = _0x21bc9e | ~(_0x3fb9b0 | _0x1d510b), _0xccbcbd = _0x1d510b & _0x3fb9b0;
            }
            for (let _0x26415c = _0x4503b4; _0x26415c < _0x319d1f; _0x26415c++) {
                peq[_0x1aace8[_0x4e631a(0x18a)](_0x26415c)] = 0x0;
            }
        }
        let _0x1c3ce2 = 0x0, _0x910878 = -0x1;
        const _0x56ffdb = _0xe38afc * 0x20, _0x123f3b = Math['min'](0x20, _0x7d6851 - _0x56ffdb) + _0x56ffdb;
        for (let _0x2c761a = _0x56ffdb; _0x2c761a < _0x123f3b; _0x2c761a++) {
            peq[_0x1aace8[_0x4e631a(0x18a)](_0x2c761a)] |= 0x1 << _0x2c761a;
        }
        _0x49e348 = _0x7d6851;
        for (let _0x1125c6 = 0x0; _0x1125c6 < _0x2720a9; _0x1125c6++) {
            const _0xfa451b = peq[_0x17d9bb[_0x4e631a(0x18a)](_0x1125c6)], _0x5b2c07 = _0x2fd95a[_0x1125c6 / 0x20 | 0x0] >>> _0x1125c6 & 0x1, _0x3c415b = _0x52440b[_0x1125c6 / 0x20 | 0x0] >>> _0x1125c6 & 0x1, _0x1b7642 = _0xfa451b | _0x1c3ce2, _0x26825c = ((_0xfa451b | _0x3c415b) & _0x910878) + _0x910878 ^ _0x910878 | _0xfa451b | _0x3c415b;
            let _0x12fd29 = _0x1c3ce2 | ~(_0x26825c | _0x910878), _0x5b79a9 = _0x910878 & _0x26825c;
            _0x49e348 += _0x12fd29 >>> _0x7d6851 - 0x1 & 0x1, _0x49e348 -= _0x5b79a9 >>> _0x7d6851 - 0x1 & 0x1, _0x12fd29 >>> 0x1f ^ _0x5b2c07 && (_0x2fd95a[_0x1125c6 / 0x20 | 0x0] ^= 0x1 << _0x1125c6), _0x5b79a9 >>> 0x1f ^ _0x3c415b && (_0x52440b[_0x1125c6 / 0x20 | 0x0] ^= 0x1 << _0x1125c6), _0x12fd29 = _0x12fd29 << 0x1 | _0x5b2c07, _0x5b79a9 = _0x5b79a9 << 0x1 | _0x3c415b, _0x910878 = _0x5b79a9 | ~(_0x1b7642 | _0x12fd29), _0x1c3ce2 = _0x12fd29 & _0x1b7642;
        }
        for (let _0xd95e94 = _0x56ffdb; _0xd95e94 < _0x123f3b; _0xd95e94++) {
            peq[_0x1aace8[_0x4e631a(0x18a)](_0xd95e94)] = 0x0;
        }
        return _0x49e348;
    }, distance = (_0x1d032a, _0x49aa13) => {
        const _0x241fc8 = _0x2e7e;
        if (_0x1d032a['length'] > _0x49aa13[_0x241fc8(0x189)]) {
            const _0x520ffd = _0x49aa13;
            _0x49aa13 = _0x1d032a, _0x1d032a = _0x520ffd;
        }
        if (_0x1d032a[_0x241fc8(0x189)] === 0x0)
            return _0x49aa13['length'];
        if (_0x1d032a[_0x241fc8(0x189)] <= 0x20)
            return myers_32(_0x1d032a, _0x49aa13);
        return myers_x(_0x1d032a, _0x49aa13);
    }, closest = (_0x1313eb, _0x238ca2) => {
        const _0x58f1ff = _0x2e7e;
        let _0x5a058d = Infinity, _0x18dcf8 = 0x0;
        for (let _0x2ad6ae = 0x0; _0x2ad6ae < _0x238ca2[_0x58f1ff(0x189)]; _0x2ad6ae++) {
            const _0x229fc4 = distance(_0x1313eb, _0x238ca2[_0x2ad6ae]);
            _0x229fc4 < _0x5a058d && (_0x5a058d = _0x229fc4, _0x18dcf8 = _0x2ad6ae);
        }
        return _0x238ca2[_0x18dcf8];
    };
function _0x2e7e(_0x5b3847, _0x12e921) {
    return _0x2e7e = function (_0x5f284b, _0x2e7ecd) {
        _0x5f284b = _0x5f284b - 0x17e;
        let _0x5f01ff = _0x5f28[_0x5f284b];
        return _0x5f01ff;
    }, _0x2e7e(_0x5b3847, _0x12e921);
}
module[_0x72faa2(0x18c)] = {
    'closest': closest,
    'distance': distance
};
