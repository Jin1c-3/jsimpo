const t=require("tap");const{EventEmitter}=require("events");const redactCwd=e=>{const o=e=>e.replace(/\\+/g,"/").replace(/\r\n/g,"\n");const n=e=>e.replace(new RegExp(o(process.cwd()),"g"),"{CWD}");const t=e=>e.replace(o(process.execPath),"/path/to/node").replace(o(process.env.HOME),"~/");return t(n(o(e)))};t.cleanSnapshot=e=>redactCwd(e);let result="";const configDefs=require("../../lib/utils/config");const definitions=Object.entries(configDefs.definitions).filter(([e,o])=>{return["init-author-name","init.author.name","init-version","init.version"].includes(e)}).reduce((e,[o,n])=>{e[o]=n;return e},{});const defaults={"init-author-name":"","init-version":"1.0.0","init.author.name":"","init.version":"1.0.0"};const cliConfig={editor:"vi",json:false,location:"user",long:false,cat:true,chai:true,dog:true};const npm={log:{warn:()=>null,info:()=>null,enableProgress:()=>null,disableProgress:()=>null},config:{data:new Map(Object.entries({default:{data:defaults,source:"default values"},global:{data:{},source:"/etc/npmrc"},cli:{data:cliConfig,source:"command line options"}})),get(e){return cliConfig[e]},validate(){return true}},output:e=>{result=e}};const usageUtil=()=>"usage instructions";const mocks={"../../lib/utils/config/index.js":{defaults:defaults,definitions:definitions},"../../lib/utils/usage.js":usageUtil};const Config=t.mock("../../lib/config.js",mocks);const config=new Config(npm);t.test("config no args",o=>{config.exec([],e=>{o.match(e,/usage instructions/,"should not error out on empty locations");o.end()})});t.test("config ignores workspaces",n=>{npm.log.warn=(e,o)=>{n.equal(e,"config","should warn with expected title");n.equal(o,"This command does not support workspaces.","should warn with unsupported option msg")};config.execWorkspaces([],[],e=>{n.match(e,/usage instructions/,"should not error out when workspaces are defined");npm.log.warn=()=>null;n.end()})});t.test("config list",o=>{o.plan(2);npm.config.find=()=>"cli";result="";o.teardown(()=>{result="";delete npm.config.find});config.exec(["list"],e=>{o.error(e,"npm config list");o.matchSnapshot(result,"should list configs")})});t.test("config list overrides",o=>{o.plan(2);npm.config.data.set("user",{data:{"init.author.name":"Foo","//private-reg.npmjs.org/:_authThoken":"f00ba1"},source:"~/.npmrc"});cliConfig["init.author.name"]="Bar";npm.config.find=()=>"cli";result="";o.teardown(()=>{result="";npm.config.data.delete("user");delete cliConfig["init.author.name"];delete npm.config.find});config.exec(["list"],e=>{o.error(e,"npm config list");o.matchSnapshot(result,"should list overridden configs")})});t.test("config list --long",o=>{o.plan(2);npm.config.find=e=>e in cliConfig?"cli":"default";cliConfig.long=true;result="";o.teardown(()=>{delete npm.config.find;cliConfig.long=false;result=""});config.exec(["list"],e=>{o.error(e,"npm config list --long");o.matchSnapshot(result,"should list all configs")})});t.test("config list --json",o=>{o.plan(2);cliConfig.json=true;result="";npm.config.list=[{"//private-reg.npmjs.org/:_authThoken":"f00ba1",...npm.config.data.get("cli").data}];const e=npm.config.get;npm.config.get=e=>npm.config.list[0][e];o.teardown(()=>{delete npm.config.list;cliConfig.json=false;npm.config.get=e;result=""});config.exec(["list"],e=>{o.error(e,"npm config list --json");o.same(JSON.parse(result),{editor:"vi",json:true,location:"user",long:false,cat:true,chai:true,dog:true},"should list configs usin json")})});t.test("config delete no args",o=>{config.exec(["delete"],e=>{o.match(e,{message:"\nUsage: usage instructions"});o.end()})});t.test("config delete key",n=>{n.plan(4);npm.config.delete=(e,o)=>{n.equal(e,"foo","should delete expected keyword");n.equal(o,"user","should delete key from user config by default")};npm.config.save=e=>{n.equal(e,"user","should save user config post-delete")};config.exec(["delete","foo"],e=>{n.error(e,"npm config delete key")});n.teardown(()=>{delete npm.config.delete;delete npm.config.save})});t.test("config delete multiple key",n=>{n.plan(6);const t=["foo","bar"];npm.config.delete=(e,o)=>{n.equal(e,t.shift(),"should delete expected keyword");n.equal(o,"user","should delete key from user config by default")};npm.config.save=e=>{n.equal(e,"user","should save user config post-delete")};config.exec(["delete","foo","bar"],e=>{n.error(e,"npm config delete keys")});n.teardown(()=>{delete npm.config.delete;delete npm.config.save})});t.test("config delete key --location=global",n=>{n.plan(4);npm.config.delete=(e,o)=>{n.equal(e,"foo","should delete expected keyword from global configs");n.equal(o,"global","should delete key from global config by default")};npm.config.save=e=>{n.equal(e,"global","should save global config post-delete")};cliConfig.location="global";config.exec(["delete","foo"],e=>{n.error(e,"npm config delete key --location=global")});n.teardown(()=>{cliConfig.location="user";delete npm.config.delete;delete npm.config.save})});t.test("config set no args",o=>{config.exec(["set"],e=>{o.match(e,{message:"\nUsage: usage instructions"});o.end()})});t.test("config set key",t=>{t.plan(5);npm.config.set=(e,o,n)=>{t.equal(e,"foo","should set expected key to user config");t.equal(o,"bar","should set expected value to user config");t.equal(n,"user","should set key/val in user config by default")};npm.config.save=e=>{t.equal(e,"user","should save user config")};config.exec(["set","foo","bar"],e=>{t.error(e,"npm config set key")});t.teardown(()=>{delete npm.config.set;delete npm.config.save})});t.test("config set key=val",t=>{t.plan(5);npm.config.set=(e,o,n)=>{t.equal(e,"foo","should set expected key to user config");t.equal(o,"bar","should set expected value to user config");t.equal(n,"user","should set key/val in user config by default")};npm.config.save=e=>{t.equal(e,"user","should save user config")};config.exec(["set","foo=bar"],e=>{t.error(e,"npm config set key")});t.teardown(()=>{delete npm.config.set;delete npm.config.save})});t.test("config set multiple keys",i=>{i.plan(11);const l=[["foo","bar"],["bar","baz"],["asdf",""]];const e=["foo","bar","bar=baz","asdf"];npm.config.set=(e,o,n)=>{const[t,s]=l.shift();i.equal(e,t,"should set expected key to user config");i.equal(o,s,"should set expected value to user config");i.equal(n,"user","should set key/val in user config by default")};npm.config.save=e=>{i.equal(e,"user","should save user config")};config.exec(["set",...e],e=>{i.error(e,"npm config set key")});i.teardown(()=>{delete npm.config.set;delete npm.config.save})});t.test("config set key to empty value",t=>{t.plan(5);npm.config.set=(e,o,n)=>{t.equal(e,"foo","should set expected key to user config");t.equal(o,"",'should set "" to user config');t.equal(n,"user","should set key/val in user config by default")};npm.config.save=e=>{t.equal(e,"user","should save user config")};config.exec(["set","foo"],e=>{t.error(e,"npm config set key to empty value")});t.teardown(()=>{delete npm.config.set;delete npm.config.save})});t.test("config set invalid key",n=>{n.plan(3);const e=npm.config.validate;npm.config.save=()=>null;npm.config.set=()=>null;npm.config.validate=()=>false;npm.log.warn=(e,o)=>{n.equal(e,"config","should warn with expected title");n.equal(o,"omitting invalid config values","should use expected msg")};n.teardown(()=>{npm.config.validate=e;delete npm.config.save;delete npm.config.set;npm.log.warn=()=>null});config.exec(["set","foo","bar"],e=>{n.error(e,"npm config set invalid key")})});t.test("config set key --location=global",t=>{t.plan(5);npm.config.set=(e,o,n)=>{t.equal(e,"foo","should set expected key to global config");t.equal(o,"bar","should set expected value to global config");t.equal(n,"global","should set key/val in global config")};npm.config.save=e=>{t.equal(e,"global","should save global config")};cliConfig.location="global";config.exec(["set","foo","bar"],e=>{t.error(e,"npm config set key --location=global")});t.teardown(()=>{cliConfig.location="user";delete npm.config.set;delete npm.config.save})});t.test("config get no args",o=>{o.plan(2);npm.config.find=()=>"cli";result="";o.teardown(()=>{result="";delete npm.config.find});config.exec(["get"],e=>{o.error(e,"npm config get no args");o.matchSnapshot(result,"should list configs on config get no args")})});t.test("config get key",o=>{o.plan(2);const e=npm.config.get;npm.config.get=e=>{o.equal(e,"foo","should use expected key");return"bar"};npm.config.save=e=>{throw new Error("should not save")};config.exec(["get","foo"],e=>{o.error(e,"npm config get key")});o.teardown(()=>{npm.config.get=e;delete npm.config.save})});t.test("config get multiple keys",o=>{o.plan(4);const n=["foo","bar"];const e=npm.config.get;npm.config.get=e=>{o.equal(e,n.shift(),"should use expected key");return"asdf"};npm.config.save=e=>{throw new Error("should not save")};config.exec(["get","foo","bar"],e=>{o.error(e,"npm config get multiple keys");o.equal(result,"foo=asdf\nbar=asdf")});o.teardown(()=>{result="";npm.config.get=e;delete npm.config.save})});t.test("config get private key",o=>{config.exec(["get","//private-reg.npmjs.org/:_authThoken"],e=>{o.match(e,/The \/\/private-reg.npmjs.org\/:_authThoken option is protected, and cannot be retrieved in this way/,"should throw unable to retrieve error");o.end()})});t.test("config edit",s=>{s.plan(12);const t=`//registry.npmjs.org/:_authToken=0000000
init.author.name=Foo
sign-git-commit=true`;npm.config.data.set("user",{source:"~/.npmrc"});npm.config.save=async e=>{s.equal(e,"user","should save to user config by default")};const i={...mocks,"mkdirp-infer-owner":async()=>null,fs:{readFile(e,o,n){n(null,t)},writeFile(e,o,n,t){s.equal(e,"~/.npmrc","should save to expected file location");s.matchSnapshot(o,"should write config file");t()}},child_process:{spawn:(e,o)=>{s.equal(e,"vi","should use default editor");s.strictSame(o,["~/.npmrc"],"should match user source data");const n=new EventEmitter;process.nextTick(()=>{n.emit("exit",0)});return n}}};const e=s.mock("../../lib/config.js",i);const o=new e(npm);o.exec(["edit"],e=>{s.error(e,"npm config edit");i.fs.readFile=(e,o,n)=>{n(new Error("ERR"))};const o=s.mock("../../lib/config.js",i);const n=new o(npm);n.exec(["edit"],e=>{s.error(e,"npm config edit")})});s.teardown(()=>{npm.config.data.delete("user");delete npm.config.save})});t.test("config edit --location=global",s=>{s.plan(6);cliConfig.location="global";const t="init.author.name=Foo";npm.config.data.set("global",{source:"/etc/npmrc"});npm.config.save=async e=>{s.equal(e,"global","should save to global config")};const e={...mocks,"mkdirp-infer-owner":async()=>null,fs:{readFile(e,o,n){n(null,t)},writeFile(e,o,n,t){s.equal(e,"/etc/npmrc","should save to global file location");s.matchSnapshot(o,"should write global config file");t()}},child_process:{spawn:(e,o,n)=>{s.equal(e,"vi","should use default editor");s.strictSame(o,["/etc/npmrc"],"should match global source data");const t=new EventEmitter;process.nextTick(()=>{t.emit("exit",137)});return t}}};const o=s.mock("../../lib/config.js",e);const n=new o(npm);n.exec(["edit"],e=>{s.match(e,/exited with code: 137/,"propagated exit code from editor")});s.teardown(()=>{cliConfig.location="user";npm.config.data.delete("user");delete npm.config.save})});t.test("completion",n=>{const{completion:t}=config;const e=(e,o)=>{n.resolveMatch(t({conf:{argv:{remain:e}}}),o,e.join(" "))};e(["npm","foo"],[]);e(["npm","config"],["get","set","delete","ls","rm","edit","list"]);e(["npm","config","set","foo"],[]);const o=[...Object.keys(definitions)];e(["npm","config","get"],o);e(["npm","config","set"],o);e(["npm","config","delete"],o);e(["npm","config","rm"],o);e(["npm","config","edit"],[]);e(["npm","config","list"],[]);e(["npm","config","ls"],[]);const s=t({conf:{argv:{remain:["npm","config"]}},partialWord:"l"});n.resolveMatch(s,["get","set","delete","ls","rm","edit"],"npm config");n.end()});