import BasePlatform from"./platform.base";import{_getParentNode,getRelativePosition,supportsEventListenerOptions,readUsedSize,getMaximumSize}from"../helpers/helpers.dom";import{throttled}from"../helpers/helpers.extras";import{isNullOrUndef}from"../helpers/helpers.core";const EXPANDO_KEY="$chartjs";const EVENT_TYPES={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};const isNullOrEmpty=e=>e===null||e==="";function initCanvas(e,t){const n=e.style;const i=e.getAttribute("height");const s=e.getAttribute("width");e[EXPANDO_KEY]={initial:{height:i,width:s,style:{display:n.display,height:n.height,width:n.width}}};n.display=n.display||"block";n.boxSizing=n.boxSizing||"border-box";if(isNullOrEmpty(s)){const r=readUsedSize(e,"width");if(r!==undefined){e.width=r}}if(isNullOrEmpty(i)){if(e.style.height===""){e.height=e.width/(t||2)}else{const o=readUsedSize(e,"height");if(o!==undefined){e.height=o}}}return e}const eventListenerOptions=supportsEventListenerOptions?{passive:true}:false;function addListener(e,t,n){e.addEventListener(t,n,eventListenerOptions)}function removeListener(e,t,n){e.canvas.removeEventListener(t,n,eventListenerOptions)}function fromNativeEvent(e,t){const n=EVENT_TYPES[e.type]||e.type;const{x:i,y:s}=getRelativePosition(e,t);return{type:n,chart:t,native:e,x:i!==undefined?i:null,y:s!==undefined?s:null}}function createAttachObserver(e,t,i){const s=e.canvas;const n=new MutationObserver(e=>{for(const t of e){for(const n of t.addedNodes){if(n===s||n.contains(s)){return i()}}}});n.observe(document,{childList:true,subtree:true});return n}function createDetachObserver(e,t,i){const s=e.canvas;const n=new MutationObserver(e=>{for(const t of e){for(const n of t.removedNodes){if(n===s||n.contains(s)){return i()}}}});n.observe(document,{childList:true,subtree:true});return n}const drpListeningCharts=new Map;let oldDevicePixelRatio=0;function onWindowResize(){const n=window.devicePixelRatio;if(n===oldDevicePixelRatio){return}oldDevicePixelRatio=n;drpListeningCharts.forEach((e,t)=>{if(t.currentDevicePixelRatio!==n){e()}})}function listenDevicePixelRatioChanges(e,t){if(!drpListeningCharts.size){window.addEventListener("resize",onWindowResize)}drpListeningCharts.set(e,t)}function unlistenDevicePixelRatioChanges(e){drpListeningCharts.delete(e);if(!drpListeningCharts.size){window.removeEventListener("resize",onWindowResize)}}function createResizeObserver(e,t,i){const n=e.canvas;const s=n&&_getParentNode(n);if(!s){return}const r=throttled((e,t)=>{const n=s.clientWidth;i(e,t);if(n<s.clientWidth){i()}},window);const o=new ResizeObserver(e=>{const t=e[0];const n=t.contentRect.width;const i=t.contentRect.height;if(n===0&&i===0){return}r(n,i)});o.observe(s);listenDevicePixelRatioChanges(e,r);return o}function releaseObserver(e,t,n){if(n){n.disconnect()}if(t==="resize"){unlistenDevicePixelRatioChanges(e)}}function createProxyAndListen(t,e,n){const i=t.canvas;const s=throttled(e=>{if(t.ctx!==null){n(fromNativeEvent(e,t))}},t,e=>{const t=e[0];return[t,t.offsetX,t.offsetY]});addListener(i,e,s);return s}export default class DomPlatform extends BasePlatform{acquireContext(e,t){const n=e&&e.getContext&&e.getContext("2d");if(n&&n.canvas===e){initCanvas(e,t);return n}return null}releaseContext(e){const n=e.canvas;if(!n[EXPANDO_KEY]){return false}const i=n[EXPANDO_KEY].initial;["height","width"].forEach(e=>{const t=i[e];if(isNullOrUndef(t)){n.removeAttribute(e)}else{n.setAttribute(e,t)}});const t=i.style||{};Object.keys(t).forEach(e=>{n.style[e]=t[e]});n.width=n.width;delete n[EXPANDO_KEY];return true}addEventListener(e,t,n){this.removeEventListener(e,t);const i=e.$proxies||(e.$proxies={});const s={attach:createAttachObserver,detach:createDetachObserver,resize:createResizeObserver};const r=s[t]||createProxyAndListen;i[t]=r(e,t,n)}removeEventListener(e,t){const n=e.$proxies||(e.$proxies={});const i=n[t];if(!i){return}const s={attach:releaseObserver,detach:releaseObserver,resize:releaseObserver};const r=s[t]||removeListener;r(e,t,i);n[t]=undefined}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(e,t,n,i){return getMaximumSize(e,t,n,i)}isAttached(e){const t=_getParentNode(e);return!!(t&&t.isConnected)}}