"use strict";const BbPromise=require("bluebird");const config=require("@serverless/utils/config");const ServerlessError=require("../serverless-error");const cliCommandsSchema=require("../cli/commands-schema");const muteConsoleLog=require("../utils/log/muteConsoleLog");const tabtabOptions=require("../utils/tabCompletion/tabtabOptions");const isNpmPackageWritable=require("../utils/npmPackage/isWritable");const isNpmGlobalPackage=require("../utils/npmPackage/isGlobal");const renderCommandHelp=require("../cli/render-help/command");const validProviders=new Set(["aws"]);const validShells=new Set(["bash","zsh","fish"]);const humanReadableProvidersList=`"${Array.from(validProviders)}"`;const isWindows=process.platform==="win32";const noSupportErrorMessage=isWindows?'Auto update can only be set for "serverless" installed by npm globally':'Auto update can only be set for "serverless" installed by npm globally or '+"standalone installation";class Config{constructor(e,s){this.serverless=e;this.options=s;this.commands={config:{...cliCommandsSchema.get("config"),commands:{credentials:{validProviders:validProviders}}}};this.commands.config.commands.tabcompletion={type:"container",commands:{install:{...cliCommandsSchema.get("config tabcompletion install")},uninstall:{...cliCommandsSchema.get("config tabcompletion uninstall")}}};this.hooks={"config:config":async()=>this.updateConfig(),"before:config:credentials:config":()=>this.validate(),"config:tabcompletion:install:install":async()=>this.tabtabCompletionInstall(),"config:tabcompletion:uninstall:uninstall":async()=>this.tabtabCompletionUninstall()}}validate(){const e=this.options.provider.toLowerCase();if(!validProviders.has(e)){const s=[`Provider "${e}" is not supported.`,` Supported providers are: ${humanReadableProvidersList}.`].join("");throw new ServerlessError(s,"INVALID_PROVIDER")}}async updateConfig(){if(this.options.autoupdate==null){renderCommandHelp(this.serverless.processedInput.commands.join(" "));return}if(this.options.autoupdate){if(config.get("autoUpdate.enabled")){this.serverless.cli.log("Auto update is already turned on");return}if(this.serverless.isLocallyInstalled){throw new ServerlessError(noSupportErrorMessage,"AUTO_UPDATE_NOT_SUPPORTED")}if(this.serverless.isStandaloneExecutable){if(process.platform==="win32"){throw new ServerlessError(noSupportErrorMessage,"AUTO_UPDATE_NOT_SUPPORTED")}}else{if(!isNpmGlobalPackage()){throw new ServerlessError(noSupportErrorMessage,"AUTO_UPDATE_NOT_SUPPORTED")}if(!await isNpmPackageWritable()){throw new ServerlessError("Auto update cannot be set, due to missing write access to npm global installation","AUTO_UPDATE_NOT_SET_MISSING_WRITE_ACCESS")}}config.set("autoUpdate.enabled",true);this.serverless.cli.log('Auto update successfully turned on (Turn off at any time with "serverless config --no-autoupdate")')}else{if(!config.get("autoUpdate.enabled")){this.serverless.cli.log("Auto update is already turned off");return}config.set("autoUpdate.enabled",false);this.serverless.cli.log('Auto update successfully turned off (Turn on at any time with "serverless config --autoupdate")')}}async tabtabCompletionInstall(){return BbPromise.try(()=>{const o=this.serverless.processedInput.options.shell||"bash";if(!validShells.has(o)){throw new ServerlessError(`Shell "${o}" is not supported. Supported shells: ${Array.from(validShells)}.`,"TABCOMPLETION_INVALID_SHELL_ARGUMENT")}const t=(()=>{if(this.serverless.processedInput.options.location){return this.serverless.processedInput.options.location}const{BASH_LOCATION:e,FISH_LOCATION:s,ZSH_LOCATION:t}=require("tabtab/lib/constants");switch(o){case"bash":return e;case"zsh":return t;case"fish":return s;default:throw new Error("Unexpected shell choice")}})();const{install:r}=require("tabtab/lib/installer");return muteConsoleLog(()=>tabtabOptions.reduce((e,s)=>e.then(()=>r(Object.assign({location:t},s))),BbPromise.resolve())).then(()=>this.serverless.cli.log(`Tab autocompletion setup for ${o}. Make sure to reload your SHELL.`))})}async tabtabCompletionUninstall(){return BbPromise.try(()=>{const{uninstall:t}=require("tabtab/lib/installer");return muteConsoleLog(()=>tabtabOptions.reduce((e,s)=>e.then(()=>t(s)),BbPromise.resolve())).then(()=>this.serverless.cli.log("Tab autocompletion uninstalled (for all configured shells)."))})}}module.exports=Config;