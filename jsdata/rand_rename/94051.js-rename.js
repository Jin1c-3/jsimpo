require("../spec_helper");const R=require("ramda");const _=require("lodash");const path=require("path");const EE=require("events");const http=require("http");const Promise=require("bluebird");const electron=require("electron");const commitInfo=require("@cypress/commit-info");const Fixtures=require("../support/helpers/fixtures");const snapshot=require("snap-shot-it");const stripAnsi=require("strip-ansi");const debug=require("debug")("test");const pkg=require("@packages/root");const detect=require("@packages/launcher/lib/detect");const launch=require("@packages/launcher/lib/browsers");const extension=require("@packages/extension");const argsUtil=require(`${root}lib/util/args`);const{fs}=require(`${root}lib/util/fs`);const ciProvider=require(`${root}lib/util/ci_provider`);const settings=require(`${root}lib/util/settings`);const Events=require(`${root}lib/gui/events`);const Windows=require(`${root}lib/gui/windows`);const interactiveMode=require(`${root}lib/modes/interactive-e2e`);const runMode=require(`${root}lib/modes/run`);const api=require(`${root}lib/api`);const cwd=require(`${root}lib/cwd`);const user=require(`${root}lib/user`);const config=require(`${root}lib/config`);const cache=require(`${root}lib/cache`);const errors=require(`${root}lib/errors`);const plugins=require(`${root}lib/plugins`);const cypress=require(`${root}lib/cypress`);const ProjectBase=require(`${root}lib/project-base`).ProjectBase;const{getId}=require(`${root}lib/project_static`);const{ServerE2E}=require(`${root}lib/server-e2e`);const Reporter=require(`${root}lib/reporter`);const Watchers=require(`${root}lib/watchers`);const browsers=require(`${root}lib/browsers`);const videoCapture=require(`${root}lib/video_capture`);const browserUtils=require(`${root}lib/browsers/utils`);const chromeBrowser=require(`${root}lib/browsers/chrome`);const openProject=require(`${root}lib/open_project`);const env=require(`${root}lib/util/env`);const v=require(`${root}lib/util/validation`);const system=require(`${root}lib/util/system`);const appData=require(`${root}lib/util/app_data`);const electronApp=require("../../lib/util/electron-app");const savedState=require(`${root}lib/saved_state`);const TYPICAL_BROWSERS=[{name:"chrome",family:"chromium",channel:"stable",displayName:"Chrome",version:"60.0.3112.101",path:"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",majorVersion:"60"},{name:"chromium",family:"chromium",channel:"stable",displayName:"Chromium",version:"49.0.2609.0",path:"/Users/bmann/Downloads/chrome-mac/Chromium.app/Contents/MacOS/Chromium",majorVersion:"49"},{name:"chrome",family:"chromium",channel:"canary",displayName:"Canary",version:"62.0.3197.0",path:"/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",majorVersion:"62"}];const ELECTRON_BROWSER={name:"electron",family:"chromium",displayName:"Electron",path:"",version:"99.101.1234",majorVersion:99};const previousCwd=process.cwd();const snapshotConsoleLogs=function(e){const t=_.chain(console.log.args).map(e=>{return e.join(" ")}).join("\n").value();process.chdir(previousCwd);return snapshot(e,stripAnsi(t))};describe("lib/cypress",()=>{require("mocha-banner").register();beforeEach(function(){this.timeout(8e3);cache.__removeSync();Fixtures.scaffold();this.todosPath=Fixtures.projectPath("todos");this.pristinePath=Fixtures.projectPath("pristine");this.noScaffolding=Fixtures.projectPath("no-scaffolding");this.recordPath=Fixtures.projectPath("record");this.pluginConfig=Fixtures.projectPath("plugin-config");this.pluginBrowser=Fixtures.projectPath("plugin-browser");this.idsPath=Fixtures.projectPath("ids");sinon.stub(videoCapture,"start").resolves({});sinon.stub(plugins,"init").resolves(undefined);sinon.stub(electronApp,"isRunning").returns(true);sinon.stub(extension,"setHostAndPath").resolves();sinon.stub(detect,"detect").resolves(TYPICAL_BROWSERS);sinon.stub(process,"exit");sinon.stub(ServerE2E.prototype,"reset");sinon.stub(errors,"warning").callThrough().withArgs("INVOKED_BINARY_OUTSIDE_NPM_MODULE").returns(null);sinon.spy(errors,"log");sinon.spy(errors,"logException");sinon.spy(console,"log");sinon.stub(process,"versions").value({chrome:ELECTRON_BROWSER.version,electron:"123.45.6789"});this.expectExitWith=e=>{expect(process.exit).to.be.calledWith(e)};this.expectExitWithErr=(e,t,r)=>{expect(errors.log,"error was logged").to.be.calledWithMatch({type:e});expect(process.exit,"process.exit was called").to.be.calledWith(1);const s=errors.log.getCall(0).args[0];if(t){expect(s.message,"error text").to.include(t)}if(r){expect(s.message,"second error text").to.include(r)}return s}});afterEach(async()=>{try{await openProject.close()}catch(e){}Fixtures.remove()});context("test browsers",()=>{it("has valid browsers",()=>{expect(v.isValidBrowserList("browsers",TYPICAL_BROWSERS)).to.be.true});it("has valid electron browser",()=>{expect(v.isValidBrowserList("browsers",[ELECTRON_BROWSER])).to.be.true});it("allows browser major to be a number",()=>{const e={name:"Edge Beta",family:"chromium",displayName:"Edge Beta",version:"80.0.328.2",path:"/some/path",majorVersion:80};expect(v.isValidBrowserList("browsers",[e])).to.be.true});it("validates returned list",()=>{return browserUtils.getBrowsers().then(e=>{expect(v.isValidBrowserList("browsers",e)).to.be.true})})});context("error handling",function(){it("exits if config cannot be parsed",function(){return cypress.start(["--config","xyz"]).then(()=>{const e=this.expectExitWithErr("COULD_NOT_PARSE_ARGUMENTS");snapshot("could not parse config error",stripAnsi(e.message))})});it("exits if env cannot be parsed",function(){return cypress.start(["--env","a123"]).then(()=>{const e=this.expectExitWithErr("COULD_NOT_PARSE_ARGUMENTS");snapshot("could not parse env error",stripAnsi(e.message))})});it("exits if reporter options cannot be parsed",function(){return cypress.start(["--reporterOptions","nonono"]).then(()=>{const e=this.expectExitWithErr("COULD_NOT_PARSE_ARGUMENTS");snapshot("could not parse reporter options error",stripAnsi(e.message))})})});context("invalid config",function(){beforeEach(function(){this.win={on:sinon.stub(),webContents:{on:sinon.stub()}};sinon.stub(electron.app,"on").withArgs("ready").yieldsAsync();sinon.stub(Windows,"open").resolves(this.win)});it("shows warning if config is not valid",function(){return cypress.start(["--config=test=false","--cwd=/foo/bar"]).then(()=>{expect(errors.warning).to.be.calledWith("INVALID_CONFIG_OPTION");expect(console.log).to.be.calledWithMatch("`test` is not a valid configuration option");expect(console.log).to.be.calledWithMatch("https://on.cypress.io/configuration")})});it("shows warning when multiple config are not valid",function(){return cypress.start(["--config=test=false,foo=bar","--cwd=/foo/bar"]).then(()=>{expect(errors.warning).to.be.calledWith("INVALID_CONFIG_OPTION");expect(console.log).to.be.calledWithMatch("`test` is not a valid configuration option");expect(console.log).to.be.calledWithMatch("`foo` is not a valid configuration option");expect(console.log).to.be.calledWithMatch("https://on.cypress.io/configuration");snapshotConsoleLogs("INVALID_CONFIG_OPTION")})});it("does not show warning if config is valid",function(){return cypress.start(["--config=trashAssetsBeforeRuns=false"]).then(()=>{expect(errors.warning).to.not.be.calledWith("INVALID_CONFIG_OPTION")})})});context("--run-project",()=>{beforeEach(()=>{sinon.stub(electron.app,"on").withArgs("ready").yieldsAsync();sinon.stub(runMode,"waitForSocketConnection").resolves();sinon.stub(runMode,"listenForProjectEnd").resolves({stats:{failures:0}});sinon.stub(browsers,"open");sinon.stub(commitInfo,"getRemoteOrigin").resolves("remoteOrigin")});it("runs project headlessly and exits with exit code 0",function(){return cypress.start([`--run-project=${this.todosPath}`]).then(()=>{expect(browsers.open).to.be.calledWithMatch(ELECTRON_BROWSER);this.expectExitWith(0)})});it("sets --headed false if --headless",function(){sinon.spy(cypress,"startInMode");return cypress.start([`--run-project=${this.todosPath}`,"--headless"]).then(()=>{expect(browsers.open).to.be.calledWithMatch(ELECTRON_BROWSER);this.expectExitWith(0);expect(cypress.startInMode).to.be.calledOnce;expect(cypress.startInMode).to.be.calledWith("run");const e=cypress.startInMode.firstCall.args[1];expect(e).to.include({headless:true,headed:false})})});it("throws an error if both --headed and --headless are true",function(){expect(()=>cypress.start([`--run-project=${this.todosPath}`,"--headless","--headed"])).to.throw("Impossible options: both headless and headed are true")});describe("strips --",()=>{beforeEach(()=>{sinon.spy(argsUtil,"toObject")});it("strips leading",function(){return cypress.start(["--",`--run-project=${this.todosPath}`]).then(()=>{expect(argsUtil.toObject).to.have.been.calledWith([`--run-project=${this.todosPath}`]);expect(browsers.open).to.be.calledWithMatch(ELECTRON_BROWSER);this.expectExitWith(0)})});it("strips in the middle",function(){return cypress.start([`--run-project=${this.todosPath}`,"--","--browser=electron"]).then(()=>{expect(argsUtil.toObject).to.have.been.calledWith([`--run-project=${this.todosPath}`,"--browser=electron"]);expect(browsers.open).to.be.calledWithMatch(ELECTRON_BROWSER);this.expectExitWith(0)})})});it("runs project headlessly and exits with exit code 10",function(){sinon.stub(runMode,"runSpecs").resolves({totalFailed:10});return cypress.start([`--run-project=${this.todosPath}`]).then(()=>{this.expectExitWith(10)})});it("does not generate a project id even if missing one",function(){sinon.stub(api,"createProject");return user.set({authToken:"auth-token-123"}).then(()=>{return cypress.start([`--run-project=${this.noScaffolding}`])}).then(()=>{this.expectExitWith(0)}).then(()=>{expect(api.createProject).not.to.be.called;return new ProjectBase({projectRoot:this.noScaffolding,testingType:"e2e"}).getProjectId().then(()=>{throw new Error("should have caught error but did not")}).catch(e=>{expect(e.type).to.eq("NO_PROJECT_ID")})})});it("does not add project to the global cache",function(){return cache.getProjectRoots().then(e=>{expect(e.length).to.eq(0);return cypress.start([`--run-project=${this.todosPath}`])}).then(()=>{return cache.getProjectRoots()}).then(e=>{expect(e.length).to.eq(0)})});it("runs project by relative spec and exits with status 0",function(){const e=path.relative(cwd(),this.todosPath);return cypress.start([`--run-project=${this.todosPath}`,`--spec=${e}/tests/test2.coffee`]).then(()=>{expect(browsers.open).to.be.calledWithMatch(ELECTRON_BROWSER,{url:"http://localhost:8888/__/#/tests/integration/test2.coffee"});this.expectExitWith(0)})});it("runs project by specific spec with default configuration",function(){return cypress.start([`--run-project=${this.idsPath}`,`--spec=${this.idsPath}/cypress/integration/bar.js`,"--config","port=2020"]).then(()=>{expect(browsers.open).to.be.calledWithMatch(ELECTRON_BROWSER,{url:"http://localhost:2020/__/#/tests/integration/bar.js"});this.expectExitWith(0)})});it("runs project by specific absolute spec and exits with status 0",function(){return cypress.start([`--run-project=${this.todosPath}`,`--spec=${this.todosPath}/tests/test2.coffee`]).then(()=>{expect(browsers.open).to.be.calledWithMatch(ELECTRON_BROWSER,{url:"http://localhost:8888/__/#/tests/integration/test2.coffee"});this.expectExitWith(0)})});it("runs project by limiting spec files via config.testFiles string glob pattern",function(){return cypress.start([`--run-project=${this.todosPath}`,`--config=testFiles=${this.todosPath}/tests/test2.coffee`]).then(()=>{expect(browsers.open).to.be.calledWithMatch(ELECTRON_BROWSER,{url:"http://localhost:8888/__/#/tests/integration/test2.coffee"});this.expectExitWith(0)})});it("runs project by limiting spec files via config.testFiles as a JSON array of string glob patterns",function(){return cypress.start([`--run-project=${this.todosPath}`,'--config=testFiles=["**/test2.coffee","**/test1.js"]']).then(()=>{expect(browsers.open).to.be.calledWithMatch(ELECTRON_BROWSER,{url:"http://localhost:8888/__/#/tests/integration/test2.coffee"})}).then(()=>{expect(browsers.open).to.be.calledWithMatch(ELECTRON_BROWSER,{url:"http://localhost:8888/__/#/tests/integration/test1.js"});this.expectExitWith(0)})});it("does not watch settings or plugins in run mode",function(){const e=sinon.spy(Watchers.prototype,"watch");const t=sinon.spy(Watchers.prototype,"watchTree");return cypress.start([`--run-project=${this.pluginConfig}`]).then(()=>{expect(t).not.to.be.called;expect(e).not.to.be.called;this.expectExitWith(0)})});it("scaffolds out integration and example specs if they do not exist when not runMode",function(){return config.get(this.pristinePath).then(e=>{return fs.statAsync(e.integrationFolder).then(()=>{throw new Error("integrationFolder should not exist!")}).catch(()=>{return cypress.start([`--run-project=${this.pristinePath}`,"--no-run-mode"])}).then(()=>{return fs.statAsync(e.integrationFolder)}).then(()=>{return Promise.join(fs.statAsync(path.join(e.integrationFolder,"1-getting-started","todo.spec.js")),fs.statAsync(path.join(e.integrationFolder,"2-advanced-examples","actions.spec.js")),fs.statAsync(path.join(e.integrationFolder,"2-advanced-examples","files.spec.js")),fs.statAsync(path.join(e.integrationFolder,"2-advanced-examples","viewport.spec.js")))})})});it("does not scaffold when headless and exits with error when no existing project",function(){const e=function(e,t){if(!e.isRejected()){throw new Error(`File or folder was scaffolded at index: ${t}`)}expect(e.reason()).to.have.property("code","ENOENT")};return Promise.all([fs.statAsync(path.join(this.pristinePath,"cypress")).reflect(),fs.statAsync(path.join(this.pristinePath,"cypress.json")).reflect()]).each(e).then(()=>{return cypress.start([`--run-project=${this.pristinePath}`])}).then(()=>{return Promise.all([fs.statAsync(path.join(this.pristinePath,"cypress")).reflect(),fs.statAsync(path.join(this.pristinePath,"cypress.json")).reflect()])}).each(e).then(()=>{this.expectExitWithErr("CONFIG_FILE_NOT_FOUND",this.pristinePath)})});it("does not scaffold integration or example specs when runMode",function(){return settings.write(this.pristinePath,{}).then(()=>{return cypress.start([`--run-project=${this.pristinePath}`])}).then(()=>{return fs.statAsync(path.join(this.pristinePath,"cypress","integration"))}).then(()=>{throw new Error("integration folder should not exist!")}).catch({code:"ENOENT"},()=>{})});it("scaffolds out fixtures + files if they do not exist",function(){return config.get(this.pristinePath).then(e=>{return fs.statAsync(e.fixturesFolder).then(()=>{throw new Error("fixturesFolder should not exist!")}).catch(()=>{return cypress.start([`--run-project=${this.pristinePath}`,"--no-run-mode"])}).then(()=>{return fs.statAsync(e.fixturesFolder)}).then(()=>{return fs.statAsync(path.join(e.fixturesFolder,"example.json"))})})});it("scaffolds out support + files if they do not exist",function(){const e=path.join(this.pristinePath,"cypress/support");return config.get(this.pristinePath).then(()=>{return fs.statAsync(e).then(()=>{throw new Error("supportFolder should not exist!")}).catch({code:"ENOENT"},()=>{return cypress.start([`--run-project=${this.pristinePath}`,"--no-run-mode"])}).then(()=>{return fs.statAsync(e)}).then(()=>{return fs.statAsync(path.join(e,"index.js"))}).then(()=>{return fs.statAsync(path.join(e,"commands.js"))})})});it("removes fixtures when they exist and fixturesFolder is false",function(e){config.get(this.idsPath).then(e=>{this.cfg=e;return fs.statAsync(this.cfg.fixturesFolder)}).then(()=>{return settings.read(this.idsPath)}).then(e=>{e.fixturesFolder=false;return settings.write(this.idsPath,e)}).then(()=>{return cypress.start([`--run-project=${this.idsPath}`])}).then(()=>{return fs.statAsync(this.cfg.fixturesFolder).then(()=>{throw new Error("fixturesFolder should not exist!")}).catch(()=>{return e()})})});it("runs project headlessly and displays gui",function(){return cypress.start([`--run-project=${this.todosPath}`,"--headed"]).then(()=>{expect(browsers.open).to.be.calledWithMatch(ELECTRON_BROWSER,{proxyServer:"http://localhost:8888",show:true});this.expectExitWith(0)})});it("turns on reporting",function(){sinon.spy(Reporter,"create");return cypress.start([`--run-project=${this.todosPath}`]).then(()=>{expect(Reporter.create).to.be.calledWith("spec");this.expectExitWith(0)})});it("can change the reporter to nyan",function(){sinon.spy(Reporter,"create");return cypress.start([`--run-project=${this.todosPath}`,"--reporter=nyan"]).then(()=>{expect(Reporter.create).to.be.calledWith("nyan");this.expectExitWith(0)})});it("can change the reporter with cypress.json",function(){sinon.spy(Reporter,"create");return config.get(this.idsPath).then(e=>{this.cfg=e;return settings.read(this.idsPath)}).then(e=>{e.reporter="dot";return settings.write(this.idsPath,e)}).then(()=>{return cypress.start([`--run-project=${this.idsPath}`])}).then(()=>{expect(Reporter.create).to.be.calledWith("dot");this.expectExitWith(0)})});it("runs tests even when user isn't logged in",function(){return user.set({}).then(()=>{return cypress.start([`--run-project=${this.todosPath}`])}).then(()=>{this.expectExitWith(0)})});it("logs warning when projectId and key but no record option",function(){return cypress.start([`--run-project=${this.todosPath}`,"--key=asdf"]).then(()=>{expect(errors.warning).to.be.calledWith("PROJECT_ID_AND_KEY_BUT_MISSING_RECORD_OPTION","abc123");expect(console.log).to.be.calledWithMatch("You also provided your Record Key, but you did not pass the --record flag.");expect(console.log).to.be.calledWithMatch("cypress run --record");expect(console.log).to.be.calledWithMatch("https://on.cypress.io/recording-project-runs")})});it("logs warning when removing old browser profiles fails",function(){const e=new Error("foo");sinon.stub(browsers,"removeOldProfiles").rejects(e);return cypress.start([`--run-project=${this.todosPath}`]).then(()=>{expect(errors.warning).to.be.calledWith("CANNOT_REMOVE_OLD_BROWSER_PROFILES",e.stack);expect(console.log).to.be.calledWithMatch("Warning: We failed to remove old browser profiles from previous runs.");expect(console.log).to.be.calledWithMatch(e.message)})});it("does not log warning when no projectId",function(){return cypress.start([`--run-project=${this.pristinePath}`,"--key=asdf"]).then(()=>{expect(errors.warning).not.to.be.calledWith("PROJECT_ID_AND_KEY_BUT_MISSING_RECORD_OPTION","abc123");expect(console.log).not.to.be.calledWithMatch("cypress run --key <record_key>")})});it("does not log warning when projectId but --record false",function(){return cypress.start([`--run-project=${this.todosPath}`,"--key=asdf","--record=false"]).then(()=>{expect(errors.warning).not.to.be.calledWith("PROJECT_ID_AND_KEY_BUT_MISSING_RECORD_OPTION","abc123");expect(console.log).not.to.be.calledWithMatch("cypress run --key <record_key>")})});it("logs error when supportFile doesn't exist",function(){return settings.write(this.idsPath,{supportFile:"/does/not/exist"}).then(()=>{return cypress.start([`--run-project=${this.idsPath}`])}).then(()=>{this.expectExitWithErr("SUPPORT_FILE_NOT_FOUND","Your `supportFile` is set to `/does/not/exist`,")})});it("logs error when browser cannot be found",function(){browsers.open.restore();return cypress.start([`--run-project=${this.idsPath}`,"--browser=foo"]).then(()=>{this.expectExitWithErr("BROWSER_NOT_FOUND_BY_NAME");const e=errors.log.args;const t=_.find(e,e=>{return _.find(e,e=>{return e.message&&e.message.includes("Browser: 'foo' was not found on your system or is not supported by Cypress.")})});expect(t,"foo should not be found").to.be.ok;const r=_.find(e,e=>{return _.find(e,e=>{return e.message&&e.message.includes("Cypress supports the following browsers:")})});expect(r,"supported browsers should be listed").to.be.ok;const s=_.find(e,e=>{return _.find(e,e=>{return e.message&&e.message.includes("Available browsers found on your system are:\n- chrome\n- chromium\n- chrome:canary\n- electron")})});expect(s,"browser names should be listed").to.be.ok})});describe("no specs found",function(){it("logs error and exits when spec file was specified and does not exist",function(){return cypress.start([`--run-project=${this.todosPath}`,"--spec=path/to/spec"]).then(()=>{this.expectExitWithErr("NO_SPECS_FOUND","path/to/spec");this.expectExitWithErr("NO_SPECS_FOUND","We searched for any files matching this glob pattern:");this.expectExitWithErr("NO_SPECS_FOUND",this.todosPath)})});it("logs error and exits when spec absolute file was specified and does not exist",function(){return cypress.start([`--run-project=${this.todosPath}`,`--spec=${this.todosPath}/tests/path/to/spec`]).then(()=>{this.expectExitWithErr("NO_SPECS_FOUND","tests/path/to/spec");this.expectExitWithErr("NO_SPECS_FOUND",this.todosPath)})});it("logs error and exits when no specs were found at all",function(){return cypress.start([`--run-project=${this.todosPath}`,"--config=integrationFolder=cypress/specs"]).then(()=>{this.expectExitWithErr("NO_SPECS_FOUND","We searched for any files inside of this folder:");this.expectExitWithErr("NO_SPECS_FOUND","cypress/specs")})})});it("logs error and exits when project has cypress.json syntax error",function(){return fs.writeFileAsync(`${this.todosPath}/cypress.json`,"{'foo': 'bar}").then(()=>{return cypress.start([`--run-project=${this.todosPath}`])}).then(()=>{this.expectExitWithErr("ERROR_READING_FILE",this.todosPath)})});it("logs error and exits when project has cypress.env.json syntax error",function(){return fs.writeFileAsync(`${this.todosPath}/cypress.env.json`,"{'foo': 'bar}").then(()=>{return cypress.start([`--run-project=${this.todosPath}`])}).then(()=>{this.expectExitWithErr("ERROR_READING_FILE",this.todosPath)})});it("logs error and exits when project has invalid cypress.json values",function(){return settings.write(this.todosPath,{baseUrl:"localhost:9999"}).then(()=>{return cypress.start([`--run-project=${this.todosPath}`])}).then(()=>{this.expectExitWithErr("SETTINGS_VALIDATION_ERROR","cypress.json")})});it("logs error and exits when project has invalid config values from the CLI",function(){return cypress.start([`--run-project=${this.todosPath}`,"--config=baseUrl=localhost:9999"]).then(()=>{this.expectExitWithErr("CONFIG_VALIDATION_ERROR","localhost:9999");this.expectExitWithErr("CONFIG_VALIDATION_ERROR","We found an invalid configuration value")})});it("logs error and exits when project has invalid config values from env vars",function(){process.env.CYPRESS_BASE_URL="localhost:9999";return cypress.start([`--run-project=${this.todosPath}`]).then(()=>{this.expectExitWithErr("CONFIG_VALIDATION_ERROR","localhost:9999");this.expectExitWithErr("CONFIG_VALIDATION_ERROR","We found an invalid configuration value")})});const e=[{old:"blacklistHosts",new:"blockHosts"}];e.forEach(function(e){it(`logs error and exits when using an old configuration option: ${e.old}`,function(){return cypress.start([`--run-project=${this.todosPath}`,`--config=${e.old}=''`]).then(()=>{this.expectExitWithErr("RENAMED_CONFIG_OPTION",e.old);this.expectExitWithErr("RENAMED_CONFIG_OPTION",e.new)})})});it("logs error and exits when project folder has read permissions only and cannot write cypress.json",function(){if(process.geteuid()===0){return}const e=path.resolve("./permissions");const t=path.join(e,"cypress.json");return fs.outputFileAsync(t,"{}").then(()=>{return fs.chmodAsync(e,"555")}).then(()=>{return cypress.start([`--run-project=${e}`])}).then(()=>{return fs.chmodAsync(e,"777")}).then(()=>{return fs.removeAsync(e)}).then(()=>{this.expectExitWithErr("ERROR_READING_FILE",path.join(e,"cypress.json"))})});it("logs error and exits when reporter does not exist",function(){return cypress.start([`--run-project=${this.todosPath}`,"--reporter","foobarbaz"]).then(()=>{this.expectExitWithErr("INVALID_REPORTER_NAME","foobarbaz")})});describe("state",()=>{beforeEach(function(){return appData.remove().then(()=>{return savedState.formStatePath(this.todosPath)}).then(e=>{this.statePath=appData.projectsPath(e)})});it("does not save project state",function(){return cypress.start([`--run-project=${this.todosPath}`,`--spec=${this.todosPath}/tests/test2.coffee`]).then(()=>{this.expectExitWith(0);return openProject.getProject().saveState()}).then(()=>{return fs.statAsync(this.statePath).then(()=>{throw new Error(`saved state should not exist but it did here: ${this.statePath}`)}).catch({code:"ENOENT"},()=>{})})})});describe("morgan",()=>{it("sets morgan to false",function(){return cypress.start([`--run-project=${this.todosPath}`]).then(()=>{expect(openProject.getProject().cfg.morgan).to.be.false;this.expectExitWith(0)})})});describe("config overrides",()=>{it("can override default values",function(){return cypress.start([`--run-project=${this.todosPath}`,"--config=requestTimeout=1234,videoCompression=false"]).then(()=>{const{cfg:e}=openProject.getProject();expect(e.videoCompression).to.be.false;expect(e.requestTimeout).to.eq(1234);expect(e.resolved.videoCompression).to.deep.eq({value:false,from:"cli"});expect(e.resolved.requestTimeout).to.deep.eq({value:1234,from:"cli"});this.expectExitWith(0)})});it("can override values in plugins",function(){plugins.init.restore();return cypress.start([`--run-project=${this.pluginConfig}`,"--config=requestTimeout=1234,videoCompression=false","--env=foo=foo,bar=bar"]).then(()=>{const{cfg:e}=openProject.getProject();expect(e.videoCompression).to.eq(20);expect(e.defaultCommandTimeout).to.eq(500);expect(e.env).to.deep.eq({foo:"bar",bar:"bar"});expect(e.resolved.videoCompression).to.deep.eq({value:20,from:"plugin"});expect(e.resolved.requestTimeout).to.deep.eq({value:1234,from:"cli"});expect(e.resolved.env.foo).to.deep.eq({value:"bar",from:"plugin"});expect(e.resolved.env.bar).to.deep.eq({value:"bar",from:"cli"});this.expectExitWith(0)})})});describe("plugins",()=>{beforeEach(()=>{plugins.init.restore();browsers.open.restore();const e=new EE;e.kill=()=>{return e.emit("exit")};e.destroy=()=>{return e.emit("closed")};e.isDestroyed=()=>{return false};e.loadURL=()=>{};e.focusOnWebView=()=>{};e.webContents={debugger:{on:sinon.stub(),attach:sinon.stub(),sendCommand:sinon.stub().resolves()},getOSProcessId:sinon.stub(),setUserAgent:sinon.stub(),session:{clearCache:sinon.stub().resolves(),setProxy:sinon.stub().resolves(),setUserAgent:sinon.stub(),on:sinon.stub(),removeListener:sinon.stub()}};e.maximize=sinon.stub;e.setSize=sinon.stub;sinon.stub(launch,"launch").resolves(e);sinon.stub(Windows,"create").returns(e)});context("before:browser:launch",()=>{it("chrome",function(){const e={ensureMinimumProtocolVersion:sinon.stub().resolves(),close:sinon.stub().resolves(),on:sinon.stub(),send:sinon.stub()};sinon.stub(chromeBrowser,"_writeExtension").resolves();sinon.stub(chromeBrowser,"_connectToChromeRemoteInterface").resolves(e);sinon.stub(chromeBrowser,"_navigateUsingCRI").resolves();sinon.stub(chromeBrowser,"_handleDownloads").resolves();sinon.stub(chromeBrowser,"_setAutomation").returns();return cypress.start([`--run-project=${this.pluginBrowser}`,"--browser=chrome"]).then(()=>{const{args:e}=launch.launch.firstCall;const t=_.find(TYPICAL_BROWSERS,{name:"chrome"});const r=R.merge(t,{isHeadless:true,isHeaded:false});expect(e[0],"found and used Chrome").to.deep.eq(r);const s=e[2];expect(s.slice(0,4),"first 4 custom launch arguments to Chrome").to.deep.eq(["chrome","foo","bar","baz"]);this.expectExitWith(0);expect(chromeBrowser._navigateUsingCRI).to.have.been.calledOnce;expect(chromeBrowser._setAutomation).to.have.been.calledOnce;expect(chromeBrowser._connectToChromeRemoteInterface).to.have.been.calledOnce})});it("electron",function(){const e=sinon.stub();videoCapture.start.returns({writeVideoFrame:e});return cypress.start([`--run-project=${this.pluginBrowser}`,"--browser=electron"]).then(()=>{expect(Windows.create).to.be.calledWithMatch(this.pluginBrowser,{browser:"electron",foo:"bar",onNewWindow:sinon.match.func,onScreencastFrame:sinon.match.func});this.expectExitWith(0)})})})});describe("--port",()=>{beforeEach(()=>{return runMode.listenForProjectEnd.resolves({stats:{failures:0}})});it("can change the default port to 5544",function(){const e=sinon.spy(http.Server.prototype,"listen");const t=sinon.spy(ServerE2E.prototype,"open");return cypress.start([`--run-project=${this.todosPath}`,"--port=5544"]).then(()=>{expect(openProject.getProject().cfg.port).to.eq(5544);expect(e).to.be.calledWith(5544);expect(t).to.be.calledWithMatch({port:5544});this.expectExitWith(0)})});it("logs error and exits when port is in use",async function(){sinon.stub(ProjectBase.prototype,"getAutomation").returns({use:()=>{}});let e=http.createServer();e=Promise.promisifyAll(e);return e.listenAsync(5544,"127.0.0.1").then(()=>{return cypress.start([`--run-project=${this.todosPath}`,"--port=5544"])}).then(()=>{this.expectExitWithErr("PORT_IN_USE_SHORT","5544")})})});describe("--env",()=>{beforeEach(()=>{process.env=_.omit(process.env,"CYPRESS_DEBUG");return runMode.listenForProjectEnd.resolves({stats:{failures:0}})});it("can set specific environment variables",function(){return cypress.start([`--run-project=${this.todosPath}`,"--video=false","--env","version=0.12.1,foo=bar,host=http://localhost:8888,baz=quux=dolor"]).then(()=>{expect(openProject.getProject().cfg.env).to.deep.eq({version:"0.12.1",foo:"bar",host:"http://localhost:8888",baz:"quux=dolor"});this.expectExitWith(0)})});it("parses environment variables with empty values",function(){return cypress.start([`--run-project=${this.todosPath}`,"--video=false","--env=FOO=,BAR=,BAZ=ipsum"]).then(()=>{expect(openProject.getProject().cfg.env).to.deep.eq({FOO:"",BAR:"",BAZ:"ipsum"});this.expectExitWith(0)})})});describe("--config-file",()=>{it("false does not require cypress.json to run",function(){return fs.statAsync(path.join(this.pristinePath,"cypress.json")).then(()=>{throw new Error("cypress.json should not exist")}).catch({code:"ENOENT"},()=>{return cypress.start([`--run-project=${this.pristinePath}`,"--no-run-mode","--config-file","false"]).then(()=>{this.expectExitWith(0)})})});it("with a custom config file fails when it doesn't exist",function(){this.filename="abcdefgh.test.json";return fs.statAsync(path.join(this.todosPath,this.filename)).then(()=>{throw new Error(`${this.filename} should not exist`)}).catch({code:"ENOENT"},()=>{return cypress.start([`--run-project=${this.todosPath}`,"--no-run-mode","--config-file",this.filename]).then(()=>{this.expectExitWithErr("CONFIG_FILE_NOT_FOUND",this.filename,this.todosPath)})})})})});context("--record",()=>{beforeEach(function(){sinon.stub(api,"createRun").resolves();sinon.stub(electron.app,"on").withArgs("ready").yieldsAsync();sinon.stub(browsers,"open");sinon.stub(runMode,"waitForSocketConnection").resolves();sinon.stub(runMode,"waitForTestsToFinishRunning").resolves({stats:{tests:1,passes:2,failures:3,pending:4,skipped:5,wallClockDuration:6},tests:[],hooks:[],video:"path/to/video",shouldUploadVideo:true,screenshots:[],config:{},spec:{}});return Promise.all([user.set({}),getId(this.todosPath).then(e=>{this.projectId=e})])});it("uses process.env.CYPRESS_PROJECT_ID",function(){sinon.stub(env,"get").withArgs("CYPRESS_PROJECT_ID").returns(this.projectId);return cypress.start(["--cwd=/foo/bar",`--run-project=${this.noScaffolding}`,"--record","--key=token-123"]).then(()=>{expect(api.createRun).to.be.calledWithMatch({projectId:this.projectId});expect(errors.warning).not.to.be.called;this.expectExitWith(3)})});it("uses process.env.CYPRESS_RECORD_KEY",function(){sinon.stub(env,"get").withArgs("CYPRESS_PROJECT_ID").returns("foo-project-123").withArgs("CYPRESS_RECORD_KEY").returns("token");return cypress.start(["--cwd=/foo/bar",`--run-project=${this.noScaffolding}`,"--record"]).then(()=>{expect(api.createRun).to.be.calledWithMatch({projectId:"foo-project-123",recordKey:"token"});expect(errors.warning).not.to.be.called;this.expectExitWith(3)})});it("errors and exits when using --group but ciBuildId could not be generated",function(){sinon.stub(ciProvider,"provider").returns(null);return cypress.start([`--run-project=${this.recordPath}`,"--record","--key=token-123","--group=e2e-tests"]).then(()=>{this.expectExitWithErr("INDETERMINATE_CI_BUILD_ID");return snapshotConsoleLogs("INDETERMINATE_CI_BUILD_ID-group 1")})});it("errors and exits when using --parallel but ciBuildId could not be generated",function(){sinon.stub(ciProvider,"provider").returns(null);return cypress.start([`--run-project=${this.recordPath}`,"--record","--key=token-123","--parallel"]).then(()=>{this.expectExitWithErr("INDETERMINATE_CI_BUILD_ID");return snapshotConsoleLogs("INDETERMINATE_CI_BUILD_ID-parallel 1")})});it("errors and exits when using --parallel and --group but ciBuildId could not be generated",function(){sinon.stub(ciProvider,"provider").returns(null);return cypress.start([`--run-project=${this.recordPath}`,"--record","--key=token-123","--group=e2e-tests-chrome","--parallel"]).then(()=>{this.expectExitWithErr("INDETERMINATE_CI_BUILD_ID");return snapshotConsoleLogs("INDETERMINATE_CI_BUILD_ID-parallel-group 1")})});it("errors and exits when using --ci-build-id with no group or parallelization",function(){return cypress.start([`--run-project=${this.recordPath}`,"--record","--key=token-123","--ci-build-id=ciBuildId123"]).then(()=>{this.expectExitWithErr("INCORRECT_CI_BUILD_ID_USAGE");return snapshotConsoleLogs("INCORRECT_CI_BUILD_ID_USAGE 1")})});it("errors and exits when using --ci-build-id without recording",function(){return cypress.start([`--run-project=${this.recordPath}`,"--ci-build-id=ciBuildId123"]).then(()=>{this.expectExitWithErr("RECORD_PARAMS_WITHOUT_RECORDING");return snapshotConsoleLogs("RECORD_PARAMS_WITHOUT_RECORDING-ciBuildId 1")})});it("errors and exits when using --group without recording",function(){return cypress.start([`--run-project=${this.recordPath}`,"--group=e2e-tests"]).then(()=>{this.expectExitWithErr("RECORD_PARAMS_WITHOUT_RECORDING");return snapshotConsoleLogs("RECORD_PARAMS_WITHOUT_RECORDING-group 1")})});it("errors and exits when using --parallel without recording",function(){return cypress.start([`--run-project=${this.recordPath}`,"--parallel"]).then(()=>{this.expectExitWithErr("RECORD_PARAMS_WITHOUT_RECORDING");return snapshotConsoleLogs("RECORD_PARAMS_WITHOUT_RECORDING-parallel 1")})});it("errors and exits when using --tag without recording",function(){return cypress.start([`--run-project=${this.recordPath}`,"--tag=nightly"]).then(()=>{this.expectExitWithErr("RECORD_PARAMS_WITHOUT_RECORDING");return snapshotConsoleLogs("RECORD_PARAMS_WITHOUT_RECORDING-tag 1")})});it("errors and exits when using --group and --parallel without recording",function(){return cypress.start([`--run-project=${this.recordPath}`,"--tag=nightly","--group=electron-smoke-tests","--parallel"]).then(()=>{this.expectExitWithErr("RECORD_PARAMS_WITHOUT_RECORDING");return snapshotConsoleLogs("RECORD_PARAMS_WITHOUT_RECORDING-group-parallel 1")})});it("errors and exits when group name is not unique and explicitly passed ciBuildId",function(){const e=new Error;e.statusCode=422;e.error={code:"RUN_GROUP_NAME_NOT_UNIQUE",payload:{runUrl:"https://dashboard.cypress.io/runs/12345"}};api.createRun.rejects(e);return cypress.start([`--run-project=${this.recordPath}`,"--record","--key=token-123","--group=electron-smoke-tests","--ciBuildId=ciBuildId123"]).then(()=>{this.expectExitWithErr("DASHBOARD_RUN_GROUP_NAME_NOT_UNIQUE");return snapshotConsoleLogs("DASHBOARD_RUN_GROUP_NAME_NOT_UNIQUE 1")})});it("errors and exits when parallel group params are different",function(){sinon.stub(system,"info").returns({osName:"darwin",osVersion:"v1"});sinon.stub(browsers,"ensureAndGetByNameOrPath").resolves({version:"59.1.2.3",displayName:"Electron"});const e=new Error;e.statusCode=422;e.error={code:"PARALLEL_GROUP_PARAMS_MISMATCH",payload:{runUrl:"https://dashboard.cypress.io/runs/12345"}};api.createRun.rejects(e);return cypress.start([`--run-project=${this.recordPath}`,"--record","--key=token-123","--parallel","--group=electron-smoke-tests","--ciBuildId=ciBuildId123"]).then(()=>{this.expectExitWithErr("DASHBOARD_PARALLEL_GROUP_PARAMS_MISMATCH");return snapshotConsoleLogs("DASHBOARD_PARALLEL_GROUP_PARAMS_MISMATCH 1")})});it("errors and exits when parallel is not allowed",function(){const e=new Error;e.statusCode=422;e.error={code:"PARALLEL_DISALLOWED",payload:{runUrl:"https://dashboard.cypress.io/runs/12345"}};api.createRun.rejects(e);return cypress.start([`--run-project=${this.recordPath}`,"--record","--key=token-123","--parallel","--group=electron-smoke-tests","--ciBuildId=ciBuildId123"]).then(()=>{this.expectExitWithErr("DASHBOARD_PARALLEL_DISALLOWED");return snapshotConsoleLogs("DASHBOARD_PARALLEL_DISALLOWED 1")})});it("errors and exits when parallel is required",function(){const e=new Error;e.statusCode=422;e.error={code:"PARALLEL_REQUIRED",payload:{runUrl:"https://dashboard.cypress.io/runs/12345"}};api.createRun.rejects(e);return cypress.start([`--run-project=${this.recordPath}`,"--record","--key=token-123","--parallel","--tag=nightly","--group=electron-smoke-tests","--ciBuildId=ciBuildId123"]).then(()=>{this.expectExitWithErr("DASHBOARD_PARALLEL_REQUIRED");return snapshotConsoleLogs("DASHBOARD_PARALLEL_REQUIRED 1")})});it("errors and exits when run is already complete",function(){const e=new Error;e.statusCode=422;e.error={code:"ALREADY_COMPLETE",payload:{runUrl:"https://dashboard.cypress.io/runs/12345"}};api.createRun.rejects(e);return cypress.start([`--run-project=${this.recordPath}`,"--record","--key=token-123","--tag=nightly","--group=electron-smoke-tests","--ciBuildId=ciBuildId123"]).then(()=>{this.expectExitWithErr("DASHBOARD_ALREADY_COMPLETE");return snapshotConsoleLogs("DASHBOARD_ALREADY_COMPLETE 1")})});it("errors and exits when run is stale",function(){const e=new Error;e.statusCode=422;e.error={code:"STALE_RUN",payload:{runUrl:"https://dashboard.cypress.io/runs/12345"}};api.createRun.rejects(e);return cypress.start([`--run-project=${this.recordPath}`,"--record","--key=token-123","--parallel","--tag=nightly","--group=electron-smoke-tests","--ciBuildId=ciBuildId123"]).then(()=>{this.expectExitWithErr("DASHBOARD_STALE_RUN");return snapshotConsoleLogs("DASHBOARD_STALE_RUN 1")})})});context("--return-pkg",()=>{beforeEach(()=>{console.log.restore();sinon.stub(console,"log")});it("logs package.json and exits",function(){return cypress.start(["--return-pkg"]).then(()=>{expect(console.log).to.be.calledWithMatch('{"name":"cypress"');this.expectExitWith(0)})})});context("--version",()=>{beforeEach(()=>{console.log.restore();sinon.stub(console,"log")});it("logs version and exits",function(){return cypress.start(["--version"]).then(()=>{expect(console.log).to.be.calledWith(pkg.version);this.expectExitWith(0)})})});context("--smoke-test",()=>{beforeEach(()=>{console.log.restore();sinon.stub(console,"log")});it("logs pong value and exits",function(){return cypress.start(["--smoke-test","--ping=abc123"]).then(()=>{expect(console.log).to.be.calledWith("abc123");this.expectExitWith(0)})})});context("interactive",()=>{beforeEach(function(){this.win={on:sinon.stub(),webContents:{on:sinon.stub()}};sinon.stub(electron.app,"on").withArgs("ready").yieldsAsync();sinon.stub(Windows,"open").resolves(this.win);sinon.stub(ServerE2E.prototype,"startWebsockets");sinon.spy(Events,"start");sinon.stub(electron.ipcMain,"on")});it("passes options to interactiveMode.ready",()=>{sinon.stub(interactiveMode,"ready");return cypress.start(["--updating","--port=2121","--config=pageLoadTimeout=1000"]).then(()=>{expect(interactiveMode.ready).to.be.calledWithMatch({updating:true,config:{port:2121,pageLoadTimeout:1e3}})})});it("passes options to Events.start",()=>{return cypress.start(["--port=2121","--config=pageLoadTimeout=1000"]).then(()=>{expect(Events.start).to.be.calledWithMatch({config:{pageLoadTimeout:1e3,port:2121}})})});it("passes filtered options to Project#open and sets cli config",function(){const r=sinon.stub(ServerE2E.prototype,"open").resolves([]);process.env.CYPRESS_FILE_SERVER_FOLDER="foo";process.env.CYPRESS_BASE_URL="http://localhost";process.env.CYPRESS_port="2222";process.env.CYPRESS_responseTimeout="5555";process.env.CYPRESS_watch_for_file_changes="false";return user.set({name:"brian",authToken:"auth-token-123"}).then(()=>{return settings.read(this.todosPath)}).then(e=>{e.baseUrl="http://localhost:8080";return settings.write(this.todosPath,e)}).then(()=>{return cypress.start(["--port=2121","--config","pageLoadTimeout=1000","--foo=bar","--env=baz=baz"])}).then(()=>{const e=Events.start.firstCall.args[0];return Events.handleEvent(e,{},{},123,"open:project",this.todosPath)}).then(()=>{const e=openProject.getProject().options;expect(e.port).to.eq(2121);expect(e.pageLoadTimeout).to.eq(1e3);expect(e.report).to.eq(false);expect(e.env).to.eql({baz:"baz"});expect(r).to.be.called;const t=r.getCall(0).args[0];expect(t.fileServerFolder).to.eq(path.join(this.todosPath,"foo"));expect(t.pageLoadTimeout).to.eq(1e3);expect(t.port).to.eq(2121);expect(t.baseUrl).to.eq("http://localhost");expect(t.watchForFileChanges).to.be.false;expect(t.responseTimeout).to.eq(5555);expect(t.env.baz).to.eq("baz");expect(t.env).not.to.have.property("fileServerFolder");expect(t.env).not.to.have.property("port");expect(t.env).not.to.have.property("BASE_URL");expect(t.env).not.to.have.property("watchForFileChanges");expect(t.env).not.to.have.property("responseTimeout");expect(t.resolved.fileServerFolder).to.deep.eq({value:"foo",from:"env"});expect(t.resolved.pageLoadTimeout).to.deep.eq({value:1e3,from:"cli"});expect(t.resolved.port).to.deep.eq({value:2121,from:"cli"});expect(t.resolved.baseUrl).to.deep.eq({value:"http://localhost",from:"env"});expect(t.resolved.watchForFileChanges).to.deep.eq({value:false,from:"env"});expect(t.resolved.responseTimeout).to.deep.eq({value:5555,from:"env"});expect(t.resolved.env.baz).to.deep.eq({value:"baz",from:"cli"})})});it("sends warning when baseUrl cannot be verified",function(){const t=new EE;const r={sender:{send:sinon.stub()}};const e={message:"Blah blah baseUrl blah blah"};sinon.stub(ServerE2E.prototype,"open").resolves([2121,e]);return cypress.start(["--port=2121","--config","pageLoadTimeout=1000","--foo=bar","--env=baz=baz"]).then(()=>{const e=Events.start.firstCall.args[0];Events.handleEvent(e,t,r,123,"on:project:warning");return Events.handleEvent(e,t,r,123,"open:project",this.todosPath)}).then(()=>{expect(r.sender.send.withArgs("response").firstCall.args[1].data).to.eql(e)})});describe("--config-file",()=>{beforeEach(function(){this.filename="foo.bar.baz.asdf.quux.json";this.open=sinon.stub(ServerE2E.prototype,"open").resolves([])});it("reads config from a custom config file",function(){sinon.stub(fs,"readJsonAsync");fs.readJsonAsync.withArgs(path.join(this.pristinePath,this.filename)).resolves({env:{foo:"bar"},port:2020});fs.readJsonAsync.callThrough();return cypress.start([`--config-file=${this.filename}`]).then(()=>{const e=Events.start.firstCall.args[0];return Events.handleEvent(e,{},{},123,"open:project",this.pristinePath)}).then(()=>{expect(this.open).to.be.called;const e=this.open.getCall(0).args[0];expect(e.env.foo).to.equal("bar");expect(e.port).to.equal(2020)})});it("creates custom config file if it does not exist",function(){return cypress.start([`--config-file=${this.filename}`]).then(()=>{debug("cypress started with config %s",this.filename);const e=Events.start.firstCall.args[0];debug("first call arguments %o",Events.start.firstCall.args);return Events.handleEvent(e,{},{},123,"open:project",this.pristinePath)}).then(()=>{expect(this.open,"open was called").to.be.called;return fs.readJsonAsync(path.join(this.pristinePath,this.filename)).then(e=>{expect(e,"json file is empty").to.deep.equal({})})})})})});context("--cwd",()=>{beforeEach(()=>{errors.warning.restore();sinon.stub(electron.app,"on").withArgs("ready").yieldsAsync();sinon.stub(interactiveMode,"ready").resolves();sinon.spy(errors,"warning")});it("shows warning if Cypress has been started directly",()=>{return cypress.start().then(()=>{expect(errors.warning).to.be.calledWith("INVOKED_BINARY_OUTSIDE_NPM_MODULE");expect(console.log).to.be.calledWithMatch("It looks like you are running the Cypress binary directly.");expect(console.log).to.be.calledWithMatch("https://on.cypress.io/installing-cypress")})});it("does not show warning if finds --cwd",()=>{return cypress.start(["--cwd=/foo/bar"]).then(()=>{expect(errors.warning).not.to.be.called})})});context("no args",()=>{beforeEach(()=>{sinon.stub(electron.app,"on").withArgs("ready").yieldsAsync();sinon.stub(interactiveMode,"ready").resolves()});it("runs interactiveMode and does not exit",()=>{return cypress.start().then(()=>{expect(interactiveMode.ready).to.be.calledOnce})})})});