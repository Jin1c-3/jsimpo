"use strict";const common=require("../common");if(!common.hasCrypto)common.skip("missing crypto");const assert=require("assert");const fs=require("fs");const fixtures=require("../common/fixtures");const tls=require("tls");function filenamePEM(t){return fixtures.path("keys",`${t}.pem`)}function loadPEM(t){return fs.readFileSync(filenamePEM(t))}const caCert=loadPEM("ca1-cert");const opts={host:"www.nodejs.org",port:443,rejectUnauthorized:true};tls.connect(opts,common.mustCall(end));opts.ca=caCert;tls.connect(opts,fail).on("error",common.mustCall(t=>{assert.strictEqual(t.message,"unable to get local issuer certificate")}));function fail(){assert.fail("should fail to connect")}opts.secureContext=tls.createSecureContext();tls.connect(opts,common.mustCall(end));opts.secureContext.context.addCACert(caCert);tls.connect(opts,common.mustCall(end));function end(){this.end()}