"use strict";require("../common");const stream=require("stream");const REPL=require("internal/repl");const assert=require("assert");const inspect=require("util").inspect;const{REPL_MODE_SLOPPY,REPL_MODE_STRICT}=require("repl");const tests=[{env:{},expected:{terminal:true,useColors:true}},{env:{NODE_DISABLE_COLORS:"1"},expected:{terminal:true,useColors:false}},{env:{NODE_NO_READLINE:"1"},expected:{terminal:false,useColors:false}},{env:{TERM:"dumb"},expected:{terminal:true,useColors:false}},{env:{NODE_NO_READLINE:"1",NODE_DISABLE_COLORS:"1"},expected:{terminal:false,useColors:false}},{env:{NODE_NO_READLINE:"0"},expected:{terminal:true,useColors:true}},{env:{NODE_REPL_MODE:"sloppy"},expected:{terminal:true,useColors:true,replMode:REPL_MODE_SLOPPY}},{env:{NODE_REPL_MODE:"strict"},expected:{terminal:true,useColors:true,replMode:REPL_MODE_STRICT}}];function run(e){const s=e.env;const n=e.expected;const t={terminal:true,input:new stream.Readable({read(){}}),output:new stream.Writable({write(){}})};Object.assign(process.env,s);REPL.createInternalRepl(process.env,t,function(e,t){assert.ifError(e);assert.strictEqual(t.terminal,n.terminal,`Expected ${inspect(n)} with ${inspect(s)}`);assert.strictEqual(t.useColors,n.useColors,`Expected ${inspect(n)} with ${inspect(s)}`);assert.strictEqual(t.replMode,n.replMode||REPL_MODE_SLOPPY,`Expected ${inspect(n)} with ${inspect(s)}`);for(const r of Object.keys(s)){delete process.env[r]}t.close()})}tests.forEach(run);