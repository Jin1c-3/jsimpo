const BinaryMiddleware=require("../lib/serialization/BinaryMiddleware");const SerializerMiddleware=require("../lib/serialization/SerializerMiddleware");const cont=(r,l)=>{const t=[];for(let e=0;e<l;e++){t.push(r[e%r.length])}return t};const mw=new BinaryMiddleware;const other={other:true};const resolveLazy=e=>{if(SerializerMiddleware.isLazy(e)){const r=e();if(Array.isArray(r))return{resolvesTo:r.map(resolveLazy)};return{resolvesTo:resolveLazy(r)}}return e};describe("BinaryMiddleware",()=>{const e=[true,false,null,"","hi","hi".repeat(200),"ðŸ˜€","ðŸ˜€".repeat(200),Buffer.from("hello"),1,11,256,-1,-11,-256,-1.25,SerializerMiddleware.createLazy([5],other)];const r=[...e,SerializerMiddleware.createLazy([SerializerMiddleware.createLazy([5],other)],mw),SerializerMiddleware.createLazy([1,SerializerMiddleware.createLazy([2],mw),SerializerMiddleware.createLazy([5],other),4],mw)];r.push(SerializerMiddleware.createLazy(r.slice(),mw));r.push(SerializerMiddleware.createLazy(r.slice(),other));e.push(undefined);const l=[...r.map(e=>[e]),[(true,true)],[false,true],[true,false],[false,false],[false,false,false],[false,true,false,true],[true,true,true],[false,false,false],cont([false,true,false,true],5),cont([true],5),cont([false],5),cont([false,true,false,true],6),cont([true],6),cont([false],6),cont([false,true,false,true],7),cont([false,true,false,true],8),cont([false,true,false,true],9),cont([false,true,false,true],132),cont([false,true,false,true],133),cont([false,true,false,true],134),cont([false,true,false,true],135),cont([false,true,false,true],1e4),cont([true],135),[null],[null,null],[null,null,null],cont([null],4),cont([null],100),cont([null],300),cont([-20],20),cont([400],20),cont([5.5],20)];for(const a of[1,100]){for(const i of l){for(const n of e){for(const s of e){if(a>1&&s!==undefined)continue;let t=[n,...i,s].filter(e=>e!==undefined);if(t.length*a>2e5)continue;if(t.length===0)continue;let e=JSON.stringify(t.map(resolveLazy));if(e.length>100)e=e.slice(0,50)+" ... "+e.slice(-50);it(`should serialize ${a} x ${e} (${t.length}) correctly`,()=>{const e=cont(t,t.length*a);const r=mw.serialize(e,{});const l=mw.deserialize(r,{});expect(l.map(resolveLazy)).toEqual(e.map(resolveLazy))})}}}}});