"use strict";const cloudinary=require("cloudinary").v2;const intoStream=require("into-stream");const{errors}=require("strapi-plugin-upload");module.exports={init(r){cloudinary.config(r);return{upload(t,u={}){return new Promise((o,i)=>{const r={resource_type:"auto",public_id:t.hash};if(t.ext){r.filename=`${t.hash}${t.ext}`}const e=cloudinary.uploader.upload_stream({...r,...u},(r,e)=>{if(r){if(r.message.includes("File size too large")){return i(errors.entityTooLarge())}return i(errors.unknownError(`Error uploading to cloudinary: ${r.message}`))}if(e.resource_type==="video"){t.previewUrl=cloudinary.url(`${e.public_id}.gif`,{video_sampling:6,delay:200,width:250,crop:"scale",resource_type:"video"})}t.url=e.secure_url;t.provider_metadata={public_id:e.public_id,resource_type:e.resource_type};o()});intoStream(t.buffer).pipe(e)})},async delete(r,e={}){try{const{resource_type:o,public_id:i}=r.provider_metadata;const t=await cloudinary.uploader.destroy(i,{invalidate:true,resource_type:o||"image",...e});if(t.result!=="ok"&&t.result!=="not found"){throw errors.unknownError(`Error deleting on cloudinary: ${t.result}`)}}catch(r){throw errors.unknownError(`Error deleting on cloudinary: ${r.message}`)}}}}};