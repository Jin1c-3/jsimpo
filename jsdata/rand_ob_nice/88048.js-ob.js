'use strict';
const URL_AVATAR_ICONS = ["\u00aa\u00b5\u00ba\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0-\u08b4\u08b6-\u08bd\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fd5\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ae\ua7b0-\ua7b7\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc", 
"length", "QxiOI", "zbGLG", "eGMIR", "SAnAW", "split", "wCdIS", "wHMxE", "fromCharCode", "CdIfB", "EIqjm", "cxbQS", "test", "pCWYR", "RgUEN", "1089318XTRsOY", "8UxVdDS", "71634masBrn", "49123OgTLKt", "1IRAkEh", "1450614MUwcAL", "992416LxXfSV", "1264106nCPcTZ", "123jFJyVE", "12403dtHgNF", "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 
"class enum extends super const export import", "enum", "implements interface let package private protected public static yield", "eval arguments", "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", " const class extends export import super"];
const makePredicate = m;
(function(data, val) {
  const toMonths = m;
  for (; !![];) {
    try {
      const nodeval = parseInt(toMonths(492)) + -parseInt(toMonths(493)) * parseInt(toMonths(494)) + -parseInt(toMonths(495)) * -parseInt(toMonths(496)) + -parseInt(toMonths(497)) + -parseInt(toMonths(498)) + parseInt(toMonths(499)) + -parseInt(toMonths(500)) * -parseInt(toMonths(501));
      if (nodeval === val) {
        break;
      } else {
        data["push"](data["shift"]());
      }
    } catch (_0x532f7d) {
      data["push"](data["shift"]());
    }
  }
})(URL_AVATAR_ICONS, -1213632 + 1 * -297149 + -1 * -2422795);
const URL_ICON_CAMERA = {
  3 : makePredicate(502),
  5 : makePredicate(503),
  6 : makePredicate(504),
  "strict" : makePredicate(505),
  "strictBind" : makePredicate(506)
};
export{
  URL_ICON_CAMERA as reservedWords
};
var requireSemicolonChars = makePredicate(507);
const URL_ICON_DRIVE_DOCUMENT = {
  5 : requireSemicolonChars,
  6 : requireSemicolonChars + makePredicate(508)
};
export{
  URL_ICON_DRIVE_DOCUMENT as keywords
};
let nonASCIIidentifierStartChars = makePredicate(509);
let nonASCIIidentifierChars = "\u200c\u200d\u00b7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d4-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d01-\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1cf8\u1cf9\u1dc0-\u1df5\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
const requireCompilers = new RegExp("[" + nonASCIIidentifierStartChars + "]");
const rpm_traffic = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
const astralIdentifierStartCodes = [1 * -164 + -1 * -4805 + -7 * 663, 4912 + -4553 + -29 * 12, 5835 + -709 + -6 * 854, -7 * 603 + -1952 * -5 + -5514, 3534 + 999 + -4531, -6802 + 1 * 1985 + 4835, -7334 + -2301 + -23 * -419, 2 * -1879 + -1 * -4969 + 2 * -605, -10 * -977 + 4182 + -13950, 47 * -159 + 242 + 7245, 3884 + 7592 * 1 + 1 * -11473, 1 * 1706 + -8925 + 452 * 16, -10 * -601 + -5 * 323 + -40 * 109, 2 * -2115 + -1247 * 6 + 11834, 6750 + -2114 * 2 + 613 * -4, -5441 * -1 + 4446 + -9835, 1934 * -4 + 
1573 + 6431, -9403 + -1 * 2978 + 12409, 2522 * -1 + -3099 * -1 + -573, 23 * -142 + 9681 + 6367 * -1, 8798 + 4384 * 1 + -22 * 597, 3903 + 3166 + 6 * -1173, 8776 + -1641 * -5 + 16964 * -1, 3251 + -973 + 563 * -4, -191 * 32 + 1581 + 4537, 1381 * 3 + 1118 + -5224, 1741 * 4 + 125 * 63 + -14828, 727 * -1 + -2431 + 3187, -7221 + 8 * -269 + -1172 * -8, -299 * 1 + -9612 + 4973 * 2, 8257 + -6E3 + -2252, -1 * -2065 + 139 + -13 * 169, -933 * -10 + -7402 + -1926, -2900 + -8455 + 37 * 307, -5115 + 3 * -1643 + 
10087, 2 * 4321 + 4844 * 1 + -9 * 1481, -9027 + -7768 + 14 * 1201, 8675 + 4449 + 1 * -13089, 1997 * 1 + 33 * -205 + 4773, -4249 * -2 + 12 * 679 + -16611, 1757 + 5 * -1057 + 3533, 3909 + -7560 + 3690, 6851 + 8038 + -14880, 1 * -2717 + 1837 + 931, 7644 + 5008 + 1 * -12495, -2 * 1906 + 1047 + 3075, -2715 + 252 + 2473, -7506 + 2543 + 4984, 752 + -906 * -1 + -1647, 6 * 293 + -1194 + -557, -4123 + -3862 + 8138, 9257 + -1217 + -1607 * 5, 9961 + -8656 * -1 + -18614, 7112 + 2819 * 1 + -9931, 86 * 23 + 9694 + 
1167 * -10, -16 * -135 + -6798 + -1 * -4681, 9 * 353 + 9320 + -12495, 1 * -9716 + -1 * -3725 + 5992, -7464 + -1516 + 8984, -3 * -1051 + 193 * 5 + -4118, -9 * 502 + 1788 + -3 * -911, 2 * -3785 + 3455 + 4137, 5717 + -8069 + 2363, -803 * -10 + -5882 + -1 * 2126, -502 * -4 + -7236 + 5238, -5998 + -2 * 3049 + -3 * -4042, -106 * 40 + 824 * -7 + 10074, 3460 + 8 * 1121 + 6205 * -2, 7444 + 1207 * 1 + 8649 * -1, 3453 + 6 * 807 + -4147 * 2, -3 * 251 + 7351 * 1 + -6587, 3442 + 589 * -13 + 4236, -24 * 192 + -2230 + 
761 * 9, -23 * -287 + -4 * 126 + 6072 * -1, -1878 + 3 * -2139 + -8366 * -1, 15 * -283 + 9229 + -1643 * 3, -1154 + 542 + -619 * -1, 8012 + -4914 + -1 * 3097, -5222 + 237 * 1 + 5050, 685 * 1 + -107 * 3 + -1 * 364, 7861 + 4212 + -12057, 2347 * -3 + 2098 + 4946, -4 * -232 + 5850 + -484 * 14, -953 + -3352 + 1 * 4307, -577 * -13 + 4798 + 3 * -4099, 339 * 18 + 362 * -1 + -5714, -8324 + -307 * 9 + 11132, 701 * -11 + -3122 + 10861, -2305 + -2941 + 5250, -9984 + 3009 + 7003, 22 * -241 + 265 * -2 + 163 * 36, 
-1822 + -7 * -127 + 940, -8534 + 3068 + 5468, 7061 + -1 * 5555 + 29 * -51, 1009 + 6718 * 1 + -7699, -52 * 158 + 8991 + -722, -922 + 8188 + -7255, -1 * 3109 + 9573 * -1 + 12703, 7276 + -8289 + 4 * 256, -283 * 7 + 8159 + -6160, -1 * -3923 + -1465 + -1222 * 2, 1186 * -7 + 4734 + 3585, 9871 + 69 * 29 + -11761, -5784 + 7591 + -1735, 1 * -4259 + 6300 + -1985, -1 * 2267 + 2930 + -613, 43 * 4 + -1 * 7913 + -15 * -517, -7281 + 8021 + -690, 1 * -6515 + -3136 + -4 * -2609, 7656 + -1 * 7493 + -1 * 111, -1019 + 
194 * 13 + 1 * -1427, 8971 + 545 * 1 + -9472 * 1, -7 * -622 + -6424 + 2103, 8699 + 5299 * -1 + 844 * -4, 2496 + -8750 + -571 * -11, -9 * -173 + -5067 + 3545 * 1, -1864 + -577 * 13 + 9407, -9423 + 373 * 12 + 4981, -7516 + -331 * -29 + 297 * -7, 2407 * -1 + -1391 * -1 + 1016, -9523 + -1 * -5218 + 4318, -4101 + -9986 + 14134, -2331 * 2 + 3727 * 1 + -5 * -190, -52 * 59 + -1777 * 3 + 8402, 9259 + 295 * 2 + -1 * 9827, -52 * 114 + 9047 * -1 + -25 * -599, 1921 + -33 * 281 + -3677 * -2, -369 * 2 + -2 * 184 + 
553 * 2, -1 * 6956 + -4042 + 11034, 51 * 149 + 227 + 411 * -19, 1 * -2955 + -854 + 3811, -3758 + -1350 + -4 * -1283, 7984 + 5184 + 21 * -623, 2612 + 7812 + -10418, 9521 * -1 + 7312 + -2211 * -1, -67 * -7 + -9272 + 1 * 8803, 1 * 3291 + -2930 * -1 + -6219, 6647 * -1 + -5248 * 1 + 11898, -5 * 1745 + 6053 + 2674, 634 + 6897 + -7517, -6232 + 3108 + 3126, 1001 + -8954 + 3981 * 2, -5551 + 29 * 157 + 1 * 1006, 382 * 15 + -4540 + 1144 * -1, -3077 * 1 + -9793 + 12909, -9142 + -8403 + -1 * -17552, 8239 + 11 * 
-657 + -1009, -7098 + -104 * -59 + 9 * 107, -3 * 2873 + 5680 + 2 * 1471, -6006 + 383 * 19 + 1 * -1250, 9 * 795 + -1 * 6249 + -904, 713 * 14 + -1963 + -8013, -7131 + 771 + 6362, -100 * -38 + -167 * 23 + 42, -739 * -1 + -6389 * -1 + -7126, 809 * -1 + -501 * 14 + 7827, -4 * -431 + -8158 * -1 + -9878, -5710 * 1 + 5 * -1251 + 11965, 206 * 41 + 4 * -1556 + 2203 * -1, 7353 + 1 * -7745 + -14 * -28, -2858 + -1 * -4835 + -1964, 6 * 320 + -5 * 1384 + -36 * -139, -458 * -13 + -1256 + 89 * -51, 3304 + -7623 + 
4371, -1 * -8623 + -14 * 267 + -4866, 7 * -1237 + 5656 + 3006 * 1, 47 * -129 + 1976 + -41 * -101, 224 * 9 + -6272 + 4303, 4538 + -2137 * -1 + -6654, -14 * 17 + -3502 + -43 * -87, -229 * 15 + 4052 + -615 * 1, 23 * 328 + 1148 + -8692, 1063 + 270 * -22 + -1 * -5062, 43 * -193 + -1 * 6091 + -3 * -4812, 6371 + -2277 + -4052, 7 * 1091 + 47 * 166 + -15436, 2904 + -9709 + 6842, 1162 + -3490 + -95 * -25, -4 * 1454 + -1 * -2839 + 2998, 4771 + 5375 + -38 * 267, -551 * -9 + 802 * 5 + -151 * 59, -8578 + 6637 + 
661 * 3, 1 * 7919 + 8071 + -15904, 2 * -694 + -6424 + 7837, -4550 + 2848 + 7 * 299, -6730 + -3606 + 1 * 10399, -6695 + 91 * -19 + 8456, 1615 + 1 * -5074 + 3459, 6341 + -3193 + -1 * 2699, 4353 * 1 + 7617 + 2 * -5957, -3773 + 568 * -11 + 17 * 605, -6187 + -3 * -2539 + -1 * 1422, -7 * -993 + -125 * 1 + -3412 * 2, -79 * 27 + 1591 + -1 * -578, -3833 + 47 * 142 + -1 * 2823, 579 + 3779 * 1 + 4358 * -1, 8117 * 1 + -5043 + -336 * 9, -1118 + -3837 * -2 + -6527, 113 + 554 * 2 + -4 * 85, -1485 * -5 + 8535 + 
5013 * -3, -1297 * -3 + 7339 + -11127, -6264 + -5158 + -2883 * -4, 2680 + -5 * -50 + -2912, -91 * -26 + -8 * 351 + 637, 4263 + -1835 * -1 + 197 * -17, -1 * -5061 + 2177 + 1542 * -4, -1 * 4073 + -1 * 3373 + 11496, 6197 * -1 + -2255 + -4517 * -2, 13068 + 1 * 7351 + -11785, 9341 + 5610 + -14383, 3 * 1451 + 5989 + 10334 * -1, -8182 * 1 + 1 * 743 + 7469 * 1, 673 * 2 + -61 * 155 + -8223 * -1, -5 * -579 + -4370 + -376 * -4, 5943 * 1 + 9293 * -1 + 3369, 145 * -41 + 6315 + -323, 2968 + -3 * 243 + -2222, -8646 + 
-4567 * -2 + -485, 948 * -4 + 171 * -25 + 8099, -9 * 233 + -1951 * 4 + 9921, 10 * 525 + 1 * -8663 + 263 * 13, 11 * 469 + -2092 * 3 + 5 * 227, -2 * -2131 + 1123 + -4504, 9671 * 1 + 1877 * -3 + -1986 * 2, -1633 + -5382 + -1 * -7027, 3262 + 7975 + -11237, 546 * -11 + 1153 * -7 + 14144, -1263 * -5 + -1 * 3239 + -3064, 1844 + 9339 + -11118, 3934 + -7076 + 2 * 1571, -1 * 3079 + -9009 + 404 * 30, 2249 * -3 + -1695 * -6 + -1 * -2701, 3964 * 2 + -9706 + -29 * -62, 11 * -321 + 1141 + 3144, 18476 + 18070 + 
-15 * 1804, -5371 + -7833 + -695 * -19, -1 * -6017 + 66 * -71 + 1740, -4654 + 1488 + 3272, 761 + 15 * 447 + -373 * 20, -6469 + -4285 + -1 * -10766, -8569 + 4955 * -2 + 18483, -9574 + -1 * -49 + 1 * 9533, 1 * 549 + -9483 + 8942, -2 * -3412 + -7032 + 1 * 217, 1 * -185 + 2383 + 1 * 3793, 8073 + 5 * 1388 + -14929, -1 * 7055 + -2674 + -37 * -263, -419 * 23 + -1614 + 11321, 4393 * 1 + -167 * -49 + -12574, 3042 + -1 * 6351 + 1655 * 2, -9971 * -1 + 1 * 5435 + -15403, 1355 * 1 + -3210 + 1855, 9052 + -1315 + 
-2578 * 3, -1306 * -2 + 457 * -16 + 1 * 4701, 4 * 672 + 705 * 4 + -5505, -13 * 373 + -38 * -92 + 1356, -4453 + -1812 + 6267 * 1, 8139 + -86 * -83 + 7633 * -2, -9509 * -1 + 4963 + -14470, -3575 + -3 * -1069 + 368, 922 + -6603 + 5683, 3864 + -137 * 53 + -3403 * -1, 4717 + -5150 + -15 * -29, 6479 + -8851 + 1 * 2436, 1 * -499 + 3470 + -2969 * 1, -4380 + -2858 + 7241 * 1, -1229 * 3 + 110 * 60 + -2910, 4562 + -3680 + -175 * 5, 11 * 113 + 13 * 436 + -6909, -4 * 801 + 6747 + 3 * -1179, -8516 + 89 * -26 + 
16 * 677, 7109 * 1 + 6988 + -14070, -4664 * 1 + -25 * -87 + 2491 * 1, -5976 * -1 + 83 * 49 + 502 * -20, 6 * 781 + 3168 + 4 * -1963, 3159 * -2 + 1 * -4978 + -565 * -20, 4565 * 1 + -1 * 4565 + -1 * -2, 8531 + -5551 + -2980, -12 * -580 + -5234 + 287 * -6, 1 * -4425 + 18 * 406 + -2877, 41 + -692 + 653 * 1, 8354 * -1 + -9953 + 18646, -884 + -3467 + 4354, -9349 + -1331 * 7 + 18690, 4543 + 1631 + -6172, -1731 + -8406 + -9 * -1129, 9354 + -41 * -196 + -17388, -2912 + -1633 + -75 * -61, 3 * 146 + 6237 + -6673, 
-9501 + 8340 + -3 * -395, 2539 * 2 + 4219 * 2 + -13514, 17 * -425 + 5 * -1832 + 469 * 35, 8214 + 4525 + -1 * 12737, 7173 + -5 * -1873 + -8257 * 2, 861 + 834 + -1693, -29 * 11 + 3 * 1831 + -5144, -2415 + 8779 * 1 + -2 * 3181, 531 * 4 + 1 * -6233 + 4133, 817 + -43 * -73 + -3954, -933 * -3 + -3 * 2969 + 6138, 388 * 14 + 25 * 194 + 1028 * -10, -5881 + -229 * 4 + 6821, 2383 + 8485 * -1 + -6104 * -1, 1477 + -2 * 4714 + 7958 * 1, 6582 * -1 + 1 * -4072 + 14803, 6753 + -4783 * -2 + -16123, -1 * -5867 + -29 * 
-84 + -1 * 8243, -6 * 642 + -8208 + 1 * 12127, 564 + -1427 + 2076, 6221 + 786 + 412 * -17, 6 * -703 + -6280 + 42 * 250, -5 * -73 + 2 * -2318 + 4297, 6719 + 7619 + -14336, 24 + -146 * -16 + -2359, -4 * -64 + 1 * -2363 + -111 * -19, -1 * 5839 + 1 * 4813 + 1026, 7160 + 5996 + -13153, 1 * -9547 + -3340 * 1 + 12887, 3329 + 1 * 5777 + -9104, -169 * -24 + 3491 * 2 + -11029, 1305 + 1678 + -2981, -6066 + 3 * 2284 + 27 * -29, 9526 + -5805 + -1 * 3719, -973 * -7 + 1 * 6089 + -12900, 1047 + 604 * -4 + 1371, 
9822 + -2708 * -1 + -12530, 619 * 9 + -17 * -393 + -12245, -4079 + -2830 + -6909 * -1, -3 * -3019 + 3294 * 3 + -18934, 199 * -30 + -7180 + 13150, -5 * -727 + -1 * 7737 + -12 * -342, -4786 + -341 * 6 + -28 * -244, 8832 + -139 * -39 + -1 * 14251, -244 * 26 + 8779 + -1 * 2435, 202 * 13 + -5855 + 1077 * 3, 1 * 9343 + 6 * 85 + -1 * 9851, 8423 * 1 + -7451 + -2 * 485, 3 * 431 + 13 * -277 + 2309, -6836 + -3505 + 10343, -1 * -18 + 9123 * 1 + -9141, 8478 + -9226 + 751, -7360 + -7435 + 11 * 1345, -2 * 2518 + 
3098 + 1940, -4488 + -8017 + 5 * 2501, 6834 + -7417 * -1 + -14249 * 1, -117 + -5505 + 5622, 193 * 8 + 1 * -7678 + 6136, 6311 + -9355 + -761 * -4, -1687 * -1 + -5531 + 3846, -1845 + 1337 + 254 * 2, -5101 + 1 * 8149 + -3046, 1 * -7229 + 3022 * -1 + 10252, 9989 + -7566 + 269 * -9, -384 * 9 + -17 * -185 + 311, -2065 + -1064 + 522 * 6, -4665 * 2 + -5119 * 1 + 14452, 8171 * -1 + 5843 * 1 + -1165 * -2, -13 * -97 + -9573 + -1 * -8318, -8429 + 7829 * 1 + 301 * 2, 11 * -113 + -563 + 1809, -1523 * -3 + -7085 + 
-1 * -2518, 1759 * 3 + -1 * -5189 + -10463, 261 * -7 + 37 * -19 + 3 * 844, -89 * 27 + -8315 * 1 + 10718, -1900 + 6264 + -3 * 1454, 4749 * 2 + -6234 + -3255, -1588 * 1 + -921 + 2511, 397 * 22 + -1499 + 7219 * -1, 21 * -331 + 2337 * -1 + 9294, 23 * -230 + 1158 * -5 + -3694 * -3, 4 * -1699 + 9416 + -2618, 7853 + 7377 + -15226, 709 * -14 + 8836 + -1 * -1092, -175 * 39 + 2062 + 4779, -8691 + -6114 * -1 + -1 * -6998, -7 * 1963 + 15177 + 41274, 6804 + -8401 + 149 * 11, 9493 * 1 + 7709 + -13054, 1754 + 53 * 
-169 + 111 * 65, 2559 * 1 + -121 * 51 + 3833, 731 + 6202 * -1 + -391 * -14, 8724 + -11 * 326 + -89 * -7, -4264 + 2961 + 313 * 38, -6952 + -414 + 7907];
const astralIdentifierCodes = [-7103 + 3 * 998 + 4618, 5251 * -1 + -1 * -6904 + -1653, 1 * -223 + 2227 + 1777 * -1, -7449 + -1979 + -2 * -4714, 7307 + 4224 + -19 * 599, 1 * 3277 + 344 + -3617, 116 * -86 + 6746 * 1 + 3524, -116 * -5 + -5775 + 5204, -9587 + 5960 + 9 * 555, 3235 + -6866 + 3633, -1693 * -2 + 4544 + -8 * 991, 6482 + -3664 * 1 + -2817, -4189 * -1 + -6577 * -1 + -10760, -6040 + -7152 + 13195, -6385 + -1548 + 3987 * 2, 1862 + 2963 + -53 * 91, -3443 + 5 * -317 + 5033, 3 * -471 + -8107 + -1904 * 
-5, -4 * -2197 + -7559 + 1063 * -1, -5531 + 1723 * 5 + -1 * 3083, -6 * 300 + 787 + 2319, -3256 + -9678 + 12936, 5 * 1411 + 9809 * 1 + -41 * 410, -1975 * 2 + 355 + 3609, -1034 * 5 + -17 * -37 + -4573 * -1, -4815 + -96 * 43 + 8952, 1483 * 2 + -1242 + 7 * -244, 6127 + -8116 + -1 * -1992, -1 * 7717 + 5 * -545 + -1748 * -6, 2 * 1537 + -3902 + 838, -2410 + 13 * 251 + -799, 1 * 4453 + 7805 + -1361 * 9, 369 + -4 * -2099 + -8758, 8121 + 2975 * 3 + 17044 * -1, -1 * 3707 + 373 * 17 + -2597, 2 * -206 + 6 * -475 + 
3275, -4795 + -9740 + 14537, 826 * 2 + -1 * 8175 + 6532, -10 * 831 + 3909 + 4453 * 1, 6512 + -1923 + -4589, 6346 + -2367 + -3966, -1382 + -5660 + -587 * -12, -2828 + 7549 + -4672, 3197 + 9961 * 1 + -13145, -34 * 182 + 1 * 7688 + -5 * 298, -1 * 429 + -641 * -3 + -1 * 1492, -41 * 145 + -3239 * -3 + -3768, 1 * -6719 + 3541 + 3187, 3 * -417 + 694 * 3 + 44 * -17, 4496 + -1 * 3229 + 4 * -314, -27 * 2 + 4068 + -4007, 5363 + -163 * -17 + 83 * -98, -2057 + -1 * -9151 + -6933, -2250 + 3839 * 1 + -1578, 9262 * 
-1 + 9497 * -1 + -695 * -27, 3315 + 7540 + 493 * -22, -5741 * 1 + 141 * 50 + -62 * 21, -933 + -8612 + 9548, 1 * -2929 + 9031 + -6045, -3 * 3319 + -3403 + 13360, -5701 + 7 * 1232 + -23 * 127, 1651 + -3855 + -10 * -221, 3843 + -41 * 239 + 59 * 101, -7163 + 2083 + 5081, -348 * 3 + 908 + -1 * -139, 5896 + -2545 * 3 + 1 * 1741, -1 * -7526 + -5 * 1469 + -171, -10 * 526 + 8815 * 1 + -3555, -5746 + -9801 + 2593 * 6, 6797 + -7921 + 1125, 1 * 4965 + 7833 + 2559 * -5, -167 * -51 + 2 * -1741 + 1 * -5029, 9837 + 
-8413 + -1420, -5450 + -3567 * 1 + -31 * -291, -7101 + 1 * -6343 + 13637 * 1, -3056 + 3911 * -2 + 10895, -6791 + -881 + -46 * -167, 2825 + -1 * 947 + 267 * -7, -6025 + 5 * 835 + 1937, 2 * -1902 + -3945 + 7768, -8505 + -108 * -25 + 5818, -7070 + 1 * -2669 + 4874 * 2, 4936 + 8856 + -13578, 128 * 57 + 9868 + -17158 * 1, -7782 + 676 + 7109 * 1, 3940 + -130 * 14 + -2112, 2074 * -2 + -9565 + 1963 * 7, -364 * 8 + 1 * -862 + 3775, 2906 * 2 + 219 + -1487 * 4, -1814 + -8717 + 199 * 53, 5149 + -1028 + 1 * -4105, 
5676 + 9 * 757 + 1040 * -12, 6019 * -1 + 4493 * -2 + -15087 * -1, 1591 + 13 * -332 + 2737, -8 * -186 + -5 * -877 + -5864, 8060 + 1534 + -9585, -8467 + -243 * 41 + -2 * -9257, -2660 + 7020 + -2 * 2173, 3889 + 5453 + -9337, -6997 + 6957 + -7 * -7, -827 * 6 + 513 + -168 * -29, 7191 + 1 * -3989 + -1 * 3193, 9877 + 5304 + -14343, -1822 + -5793 * 1 + 7622, -2082 * 3 + -9473 + 15721, -15 * 178 + 5094 + -2417, 1 * -1235 + 1 * 9103 + -7851, 1 * 9433 + 4263 + -13687, 8129 + -5811 + -2261, 9396 + 4466 + -13841, 
1 * -6869 + 4485 + 2386, -5273 + 1961 + 25 * 133, -4264 * -5 + -9231 + 7793, 614 * 2 + 5 * -605 + -14 * -129, 2414 + 9284 + -11563, 8745 + -6052 + 1 * -2689, 5617 * 1 + 2693 * 2 + -10943, -9 * 951 + -9808 + -967 * -19, 1 * -277 + 12 * 401 + -4509 * 1, 7481 * 1 + -2880 * -1 + -10352, 1 * 6009 + 9675 + 38 * -386, 9958 + 299 * -25 + 1219 * -2, 7481 * -1 + -3971 + 11469, 5596 * 1 + 8408 + -14001, 32497 + 139 * 8 + 106 * -131, -7120 + 127 * 64 + -1007, -3977 + 297 * -18 + 14642, -1 * 7479 + 1091 * -7 + 
15120, 8789 + 2394 + -11179 * 1, 1 * -6673 + 5888 + 790, 5999 * -1 + 98 + 5910, -4017 * 1 + -1755 + -5779 * -1, 2 * -269 + -3279 + 4 * 955, 1764 + -2507 + 749, 1677 + -8176 + -1306 * -5, -1990 * 1 + 3104 * -2 + 8201 * 1, 8219 * -1 + 1 * -8641 + 17009 * 1, 764 * 11 + 3496 + 6 * -1983, 1342 + 1 * -7391 + 7467, -8335 + -1245 + 9629, -773 * 1 + -1543 * 6 + -4 * -2636, -6860 + 1 * -4127 + 11041, 1 * 2427 + 1041 + -3463 * 1, -2 * 4201 + 21 * -71 + 1657 * 6, 5001 * 1 + 1931 + -43 * 161, 237 * 12 + 2 * 2806 + 
1 * -8456, 1 * 469 + -3 * -3005 + 1 * -9469, 149 * -66 + 5497 * -1 + -15331 * -1, 19 * 146 + 144 * 17 + -5199, -134 * -12 + 3172 + -4776, 1 * 3045 + 4603 + -7646, 6222 + -3 * 881 + -3565, 1956 + 8706 + -9301, 5572 + -6756 + 1190, 139 * 67 + 2647 + -11958, 7561 + -1 * -3481 + -11026, 4903 + -8116 + 134 * 24, 49 * 35 + 364 * -14 + 3387, 362 + -4903 * 1 + 4543 * 1, 7220 * 1 + 6563 + -2 * 6891, 13 * 733 + -3613 + -2957 * 2, 9270 + 8579 + -17845, 324 + 3123 + -1233, 3744 + 880 + -2309 * 2, -1 * 9151 + 
-2 * 4882 + -3805 * -5, 8047 + -1416 + -6625, 1 * -9539 + -13 * -65 + 8700, -101 * -44 + 2164 + 6599 * -1, -19259 * -79 + -1034555 * -1 + 3 * -587843, 2576 * -3 + 7177 + -10 * -79];
function m(b, i) {
  return m = function(value, i) {
    value = value - (-3932 + 3 * 2513 + -3115);
    let d = URL_AVATAR_ICONS[value];
    return d;
  }, m(b, i);
}
function isInAstralSet(code, set) {
  const now = makePredicate;
  const _lodashLangIsNumber2 = {
    "IaXOq" : function(progressOld, progressNew) {
      return progressOld < progressNew;
    },
    "QxiOI" : function(_num1, _num2) {
      return _num1 > _num2;
    },
    "zbGLG" : function(formatters, customFormatters) {
      return formatters + customFormatters;
    },
    "eGMIR" : function(nTilesLoaded, nTilesToLoad) {
      return nTilesLoaded >= nTilesToLoad;
    }
  };
  let value = 119244 + 306 * -251 + 23098;
  for (let i = -1 * -5250 + -1 * 2281 + -1 * 2969; _lodashLangIsNumber2["IaXOq"](i, set[now(510)]); i = i + (-3121 * 1 + 36 * -221 + 11079)) {
    value = value + set[i];
    if (_lodashLangIsNumber2[now(511)](value, code)) {
      return ![];
    }
    value = value + set[_lodashLangIsNumber2[now(512)](i, -3959 + -6022 + 9982 * 1)];
    if (_lodashLangIsNumber2[now(513)](value, code)) {
      return !![];
    }
  }
}
function isIdentifierStart(code, next) {
  const rel2Mstr = makePredicate;
  const same = {
    "SAnAW" : "3|1|4|6|5|0|2",
    "wCdIS" : function(name, initialValue) {
      return name === initialValue;
    },
    "rERPw" : function(progressOld, progressNew) {
      return progressOld < progressNew;
    },
    "wHMxE" : function(progressOld, progressNew) {
      return progressOld < progressNew;
    },
    "saOSy" : function(mid_OR_high, high_OR_null) {
      return mid_OR_high <= high_OR_null;
    },
    "YiPQx" : function(nTilesLoaded, nTilesToLoad) {
      return nTilesLoaded >= nTilesToLoad;
    },
    "CdIfB" : function(progressOld, progressNew) {
      return progressOld < progressNew;
    }
  };
  const callbackVals = same[rel2Mstr(514)][rel2Mstr(515)]("|");
  let callbackCount = 8274 + 9 * -831 + -53 * 15;
  for (; !![];) {
    switch(callbackVals[callbackCount++]) {
      case "0":
        if (same[rel2Mstr(516)](next, ![])) {
          return ![];
        }
        continue;
      case "1":
        if (same["rERPw"](code, -983 * -4 + 1653 + -67 * 82)) {
          return !![];
        }
        continue;
      case "2":
        return isInAstralSet(code, astralIdentifierStartCodes);
      case "3":
        if (same["rERPw"](code, 7118 * -1 + 472 + 6711)) {
          return code === -5548 + 43 * 73 + 2445;
        }
        continue;
      case "4":
        if (same[rel2Mstr(517)](code, 3 * 1934 + -47 * 117 + -206)) {
          return same["wCdIS"](code, -164 + 4 * -11 + 303);
        }
        continue;
      case "5":
        if (same["saOSy"](code, 30916 + -101148 + 135767)) {
          return same["YiPQx"](code, 8667 + -5511 + -1493 * 2) && requireCompilers["test"](String[rel2Mstr(518)](code));
        }
        continue;
      case "6":
        if (same[rel2Mstr(519)](code, 3 * -48 + 3017 + 250 * -11)) {
          return !![];
        }
        continue;
    }
    break;
  }
}
export{
  isIdentifierStart as isIdentifierStart
};
function isIdentifierChar(code, rules) {
  const now = makePredicate;
  const c = {
    "EIqjm" : function(progressOld, progressNew) {
      return progressOld < progressNew;
    },
    "cxbQS" : function(progressOld, progressNew) {
      return progressOld < progressNew;
    },
    "usvao" : function(nTilesLoaded, nTilesToLoad) {
      return nTilesLoaded >= nTilesToLoad;
    },
    "pCWYR" : function(name, initialValue) {
      return name === initialValue;
    },
    "RgUEN" : function(require, load, callback) {
      return require(load, callback);
    }
  };
  if (code < -3089 + -15 * -75 + -1006 * -2) {
    return code === 166 * 43 + -9147 + 5 * 409;
  }
  if (code < 2412 + -1 * 8728 + 6374 * 1) {
    return !![];
  }
  if (c["EIqjm"](code, 7237 + -11 * 577 + -33 * 25)) {
    return ![];
  }
  if (c[now(520)](code, 1 * -5314 + -8612 + 14017)) {
    return !![];
  }
  if (c["cxbQS"](code, 9124 + -278 * -35 + -18757 * 1)) {
    return code === 7123 + 2496 + -9524 * 1;
  }
  if (c[now(521)](code, -4096 * -2 + -1109 * 8 + 803)) {
    return !![];
  }
  if (code <= -119 * -953 + 505 * 146 + -121602) {
    return c["usvao"](code, -4468 + -780 * 5 + -1423 * -6) && rpm_traffic[now(522)](String[now(518)](code));
  }
  if (c[now(523)](rules, ![])) {
    return ![];
  }
  return c[now(524)](isInAstralSet, code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
}
export{
  isIdentifierChar as isIdentifierChar
};

