'use strict';// Tests below are not from WPT.
require('../common');const assert=require('assert');function makeIterableFunc(_0x396d18){return Object['assign'](()=>{},{[Symbol['iterator']](){return _0x396d18[Symbol['iterator']]();}});}{const iterableError={'code':'ERR_ARG_NOT_ITERABLE','name':'TypeError','message':'Query\x20pairs\x20must\x20be\x20iterable'};const tupleError={'code':'ERR_INVALID_TUPLE','name':'TypeError','message':'Each\x20query\x20pair\x20must\x20be\x20an\x20iterable\x20[name,\x20value]\x20tuple'};let params;params=new URLSearchParams(undefined);assert['strictEqual'](params['toString'](),'');params=new URLSearchParams(null);assert['strictEqual'](params['toString'](),'');params=new URLSearchParams(makeIterableFunc([['key','val'],['key2','val2']]));assert['strictEqual'](params['toString'](),'key=val&key2=val2');params=new URLSearchParams(makeIterableFunc([['key','val'],['key2','val2']]['map'](makeIterableFunc)));assert['strictEqual'](params['toString'](),'key=val&key2=val2');assert['throws'](()=>new URLSearchParams([[0x1]]),tupleError);assert['throws'](()=>new URLSearchParams([[0x1,0x2,0x3]]),tupleError);assert['throws'](()=>new URLSearchParams({[Symbol['iterator']]:0x2a}),iterableError);assert['throws'](()=>new URLSearchParams([{}]),tupleError);assert['throws'](()=>new URLSearchParams(['a']),tupleError);assert['throws'](()=>new URLSearchParams([null]),tupleError);assert['throws'](()=>new URLSearchParams([{[Symbol['iterator']]:0x2a}]),tupleError);}{const obj={'toString'(){var _0x1b4aaa={'dVKMT':'toString'};throw new Error(_0x1b4aaa['dVKMT']);},'valueOf'(){throw new Error('valueOf');}};const sym=Symbol();const toStringError=/^Error: toString$/;const symbolError=/^TypeError: Cannot convert a Symbol value to a string$/;assert['throws'](()=>new URLSearchParams({'a':obj}),toStringError);assert['throws'](()=>new URLSearchParams([['a',obj]]),toStringError);assert['throws'](()=>new URLSearchParams(sym),symbolError);assert['throws'](()=>new URLSearchParams({[sym]:'a'}),symbolError);assert['throws'](()=>new URLSearchParams({'a':sym}),symbolError);assert['throws'](()=>new URLSearchParams([[sym,'a']]),symbolError);assert['throws'](()=>new URLSearchParams([['a',sym]]),symbolError);}