import{Meteor}from'meteor/meteor';import{Roles}from'../../../../app/models';import{Logger}from'../../../../app/logger';import{settings}from'../../../../app/settings';import{Team}from'../../../../server/sdk';const logger=new Logger('ldapEnterprise');const mustBeAnArrayOfStrings=array=>Array['isArray'](array)&&array['length']&&array['every'](item=>typeof item==='string');const validateRoleMapping=mappedRoles=>{var Hhclgm={'afilp':'Users','yCSLn':'Please\x20verify\x20your\x20mapping\x20for\x20LDAP\x20X\x20RocketChat\x20Roles.\x20There\x20is\x20some\x20invalid\x20Rocket\x20Chat\x20Role.'};const allRocketChatUserRoles=Roles['find']({'scope':Hhclgm['afilp']})['fetch']()['map'](role=>role['_id']);const mappedRocketChatRoles=Object['values'](mappedRoles);const validRolesMapping=mappedRocketChatRoles['every'](roles=>roles['every'](role=>allRocketChatUserRoles['includes'](role)));if(!validRolesMapping){throw new Error(Hhclgm['yCSLn']);}};const validateLDAPRolesMappingStructure=mappedRoles=>{var JIsitI={'FDFKP':function(x,y){return x===y;},'LqRjX':'ONOzG'};const mappedRocketChatRoles=Object['values'](mappedRoles);const validStructureMapping=mappedRocketChatRoles['every'](mustBeAnArrayOfStrings);if(!validStructureMapping){if(JIsitI['FDFKP'](JIsitI['LqRjX'],JIsitI['LqRjX'])){throw new Error('Please verify your mapping for LDAP X RocketChat Roles. The structure is invalid, the structure should be an object like: {key: LdapRole, value: [An array of rocket.chat roles]}');}else{Meteor['users']['update']({'_id':userId},{'$set':{'roles':roles}});}}};const validateLDAPTeamsMappingStructure=mappedTeams=>{var PTLlTs={'vmWec':'Please verify your mapping for LDAP X RocketChat Teams. The structure is invalid, the structure should be an object like: {key: LdapTeam, value: [An array of rocket.chat teams]}'};const mappedRocketChatTeams=Object['values'](mappedTeams);const validStructureMapping=mappedRocketChatTeams['every'](mustBeAnArrayOfStrings);if(!validStructureMapping){throw new Error(PTLlTs['vmWec']);}};export const getLdapRolesByUsername=(username,ldap)=>{var CXuQHE={'ngHbj':'LDAP_Query_To_Get_User_Groups','HugEP':'sub','MHiBT':function(callee,param1){return callee(param1);}};const searchOptions={'filter':settings['get'](CXuQHE['ngHbj'])['replace'](/#{username}/g,username),'scope':ldap['options']['User_Search_Scope']||CXuQHE['HugEP'],'sizeLimit':ldap['options']['Search_Size_Limit']};const getLdapRoles=ldapUserGroups=>ldapUserGroups['filter'](field=>field&&field['ou'])['map'](field=>field['ou']);const ldapUserGroups=ldap['searchAllSync'](ldap['options']['BaseDN'],searchOptions);return Array['isArray'](ldapUserGroups)?CXuQHE['MHiBT'](getLdapRoles,ldapUserGroups):[];};export const getLdapTeamsByUsername=(username,ldap)=>{var eTXCGk={'hsAqb':'LDAP_Query_To_Get_User_Teams','QLyRm':'sub'};const searchOptions={'filter':settings['get'](eTXCGk['hsAqb'])['replace'](/#{username}/g,username),'scope':ldap['options']['User_Search_Scope']||eTXCGk['QLyRm'],'sizeLimit':ldap['options']['Search_Size_Limit']};const ldapUserGroups=ldap['searchAllSync'](ldap['options']['BaseDN'],searchOptions);if(!Array['isArray'](ldapUserGroups)){return[];}return ldapUserGroups['filter'](field=>field&&field['ou'])['map'](field=>field['ou'])['flat']();};export const getRocketChatRolesByLdapRoles=(mappedRoles,ldapUserRoles)=>{var SbZIqV={'Kcpwc':'LDAP_Default_Role_To_User','itgeQ':'The LDAP user has no role, so we set the default role value','GqaTQ':function(x,y){return x===y;},'ZgDKs':'MWquF'};const mappedLdapRoles=Object['keys'](mappedRoles);if(!ldapUserRoles['length']){logger['error'](SbZIqV['itgeQ']);return[settings['get'](SbZIqV['Kcpwc'])];}const unmappedLdapRoles=ldapUserRoles['filter'](ldapRole=>!mappedLdapRoles['includes'](ldapRole));const getRocketChatMappedRoles=(acc,role)=>acc['concat'](mappedRoles[role]);const removeRepeatedRoles=(acc,role)=>acc['includes'](role)?acc:acc['concat'](role);if(unmappedLdapRoles['length']){if(SbZIqV['GqaTQ'](SbZIqV['ZgDKs'],SbZIqV['ZgDKs'])){logger['error']('The following LDAP roles is/are not mapped in Rocket.Chat: "'+unmappedLdapRoles['join'](',\x20')+'". Because it, we set the default LDAP role.');return[settings['get'](SbZIqV['Kcpwc'])];}else{logger['error']('The\x20following\x20LDAP\x20roles\x20is/are\x20not\x20mapped\x20in\x20Rocket.Chat:\x20\x22'+unmappedLdapRoles['join'](',\x20')+'". Because it, we set the default LDAP role.');return[settings['get'](SbZIqV['Kcpwc'])];}}return ldapUserRoles['reduce'](getRocketChatMappedRoles,[])['reduce'](removeRepeatedRoles,[]);};export const getRocketChatTeamsByLdapTeams=(mappedTeams,ldapUserTeams)=>{var BSmIRl={'Aqalx':function(x,y){return x<y;}};const mappedLdapTeams=Object['keys'](mappedTeams);const filteredTeams=ldapUserTeams['filter'](ldapTeam=>mappedLdapTeams['includes'](ldapTeam));if(BSmIRl['Aqalx'](filteredTeams['length'],ldapUserTeams['length'])){const unmappedLdapTeams=ldapUserTeams['filter'](ldapRole=>!mappedLdapTeams['includes'](ldapRole));logger['error']('The\x20following\x20LDAP\x20teams\x20are\x20not\x20mapped\x20in\x20Rocket.Chat:\x20\x22'+unmappedLdapTeams['join'](',\x20')+'\x22.');}if(!filteredTeams['length']){return[];}return[...new Set(filteredTeams['map'](ldapTeam=>mappedTeams[ldapTeam])['flat']())];};export const updateUserUsingMappedLdapRoles=(userId,roles)=>{Meteor['users']['update']({'_id':userId},{'$set':{'roles':roles}});};async function updateUserUsingMappedLdapTeamsAsync(userId,teamNames,map){const allTeamNames=[...new Set(Object['values'](map)['flat']())];const allTeams=await Team['listByNames'](allTeamNames,{'projection':{'_id':0x1,'name':0x1}});const inTeamIds=allTeams['filter'](({name})=>teamNames['includes'](name))['map'](({_id})=>_id);const notInTeamIds=allTeams['filter'](({name})=>!teamNames['includes'](name))['map'](({_id})=>_id);const currentTeams=await Team['listTeamsBySubscriberUserId'](userId,{'projection':{'teamId':0x1}});const currentTeamIds=await currentTeams['map'](({teamId})=>teamId);const teamsToRemove=currentTeamIds['filter'](teamId=>notInTeamIds['includes'](teamId));const teamsToAdd=inTeamIds['filter'](teamId=>!currentTeamIds['includes'](teamId));await Team['insertMemberOnTeams'](userId,teamsToAdd);await Team['removeMemberFromTeams'](userId,teamsToRemove);}export const updateUserUsingMappedLdapTeams=(userId,teamNames,map)=>Promise['await'](updateUserUsingMappedLdapTeamsAsync(userId,teamNames,map));export const validateLDAPRolesMappingChanges=()=>{var lOaYwD={'cWHJr':'Please verify your mapping for LDAP X RocketChat Roles. The structure is invalid, the structure should be an object like: {key: LdapRole, value: [An array of rocket.chat roles]}','nPtre':'quLCm','fAKEY':function(callee,param1){return callee(param1);},'GXOtA':'LDAP_Roles_To_Rocket_Chat_Roles'};settings['get'](lOaYwD['GXOtA'],(key,value)=>{var imIKOt={'aCcqu':lOaYwD['cWHJr']};try{if(lOaYwD['nPtre']==='lZtIu'){throw new Error(imIKOt['aCcqu']);}else{if(value){const mappedRoles=JSON['parse'](value);lOaYwD['fAKEY'](validateLDAPRolesMappingStructure,mappedRoles);validateRoleMapping(mappedRoles);}}}catch(_0x1e7db3){logger['error'](_0x1e7db3);}});};export const validateLDAPTeamsMappingChanges=()=>{var gfQcuT={'hlGoc':function(callee,param1){return callee(param1);},'javrh':function(callee,param1){return callee(param1);},'mTsxI':function(x,y){return x===y;},'GYHaC':'SMfxK','QDYzs':'lEGHz','TjtYF':'BVWzA','GuiBr':'LDAP_Groups_To_Rocket_Chat_Teams'};settings['get'](gfQcuT['GuiBr'],(key,value)=>{try{if(gfQcuT['mTsxI']('NTjOI',gfQcuT['GYHaC'])){const _0x45ddf2=JSON['parse'](value);gfQcuT['hlGoc'](validateLDAPRolesMappingStructure,_0x45ddf2);gfQcuT['hlGoc'](validateRoleMapping,_0x45ddf2);}else{if(value){if(gfQcuT['mTsxI'](gfQcuT['QDYzs'],gfQcuT['TjtYF'])){if(value){const _0x59aedc=JSON['parse'](value);gfQcuT['javrh'](validateLDAPTeamsMappingStructure,_0x59aedc);}}else{const mappedTeams=JSON['parse'](value);gfQcuT['javrh'](validateLDAPTeamsMappingStructure,mappedTeams);}}}}catch(_0x53ed80){logger['error'](_0x53ed80);}});};