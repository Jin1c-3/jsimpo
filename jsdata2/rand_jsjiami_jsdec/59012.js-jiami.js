let {session,contextGroup,Protocol}=InspectorTest['start']('Tests that Runtime.evaluate can run with breaks disabled.');session['setupScriptMap']();contextGroup['addScript']('\n    function f() {\n      debugger;\n    } //# sourceURL=test.js');Protocol['Runtime']['enable']();Protocol['Debugger']['enable']();Protocol['Debugger']['onPaused'](_0xae4f22=>{var _0x2086c0={'ZvtGk':'paused'};InspectorTest['log'](_0x2086c0['ZvtGk']);Protocol['Debugger']['resume']();});(async function(){var _0x48c62a={'CbxOj':'Test disableBreaks: false','tsfzn':'debugger;','QwbNX':'Test\x20calling\x20out\x20with\x20disableBreaks:\x20false','TYGpK':'f();','WKcuE':'Test calling out with disableBreaks: true'};InspectorTest['log'](_0x48c62a['CbxOj']);InspectorTest['logMessage'](await Protocol['Runtime']['evaluate']({'expression':_0x48c62a['tsfzn'],'disableBreaks':![]}));InspectorTest['log']('Test disableBreaks: true');InspectorTest['logMessage'](await Protocol['Runtime']['evaluate']({'expression':_0x48c62a['tsfzn'],'disableBreaks':!![]}));InspectorTest['log'](_0x48c62a['QwbNX']);InspectorTest['logMessage'](await Protocol['Runtime']['evaluate']({'expression':_0x48c62a['TYGpK'],'disableBreaks':![]}));InspectorTest['log'](_0x48c62a['WKcuE']);InspectorTest['logMessage'](await Protocol['Runtime']['evaluate']({'expression':_0x48c62a['TYGpK'],'disableBreaks':!![]}));InspectorTest['log']('Test Debugger.pause with disableBreaks: false');InspectorTest['logMessage'](await Protocol['Debugger']['pause']());InspectorTest['logMessage'](await Protocol['Runtime']['evaluate']({'expression':'1','disableBreaks':![]}));InspectorTest['log']('Test\x20Debugger.pause\x20with\x20disableBreaks:\x20true');InspectorTest['logMessage'](await Protocol['Debugger']['pause']());InspectorTest['logMessage'](await Protocol['Runtime']['evaluate']({'expression':'1','disableBreaks':!![]}));InspectorTest['completeTest']();}());