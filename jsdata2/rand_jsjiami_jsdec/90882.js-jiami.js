const log4js=require('log4js');const shell=require('shelljs');const {graphql:baseGraphql}=require('@octokit/graphql');let logger=log4js['getLogger']('sync');require('dotenv')['config']();const token=process['env']['GITHUB_API_TOKEN'];const host='https://'+token+'@github.com';const cacheDir='.cache';const owner='gatsbyjs';const repoBase='gatsby';const sourceRepo='gatsby-i18n-source';const sourceRepoUrl=host+'/'+owner+'/'+sourceRepo;const sourceRepoGitUrl=sourceRepoUrl+'.git';const syncLabelName='sync';function getShortHash(_0x10d701){return _0x10d701['substr'](0x0,0x7);}function cloneOrUpdateRepo(_0x82068b,_0xad35e9){var _0x27765f={'WgHXq':function(_0x3ec549,_0x53b1c2){return _0x3ec549!==_0x53b1c2;}};if(_0x27765f['WgHXq'](shell['ls'](_0x82068b)['code'],0x0)){logger['debug']('cloning '+_0x82068b);shell['exec']('git\x20clone\x20'+_0xad35e9);shell['cd'](_0x82068b);}else{shell['cd'](_0x82068b);shell['exec']('git checkout master');shell['exec']('git pull origin master');}}async function graphql(_0x51a0d5,_0x26933a){var _0x2156ef={'qXbTB':function(_0x37fb19,_0x58f00b,_0xafdd8e){return _0x37fb19(_0x58f00b,_0xafdd8e);},'zezBH':function(_0x51ddb2,_0x345c33){return _0x51ddb2===_0x345c33;},'kHgPG':'Rnxmu','uihyR':'NmHUn'};const _0xaa2f2f=baseGraphql['defaults']({'headers':{'authorization':'token\x20'+token}});try{return await _0x2156ef['qXbTB'](_0xaa2f2f,_0x51a0d5,_0x26933a);}catch(_0xfac381){if(_0x2156ef['zezBH'](_0x2156ef['kHgPG'],_0x2156ef['uihyR'])){logger['info']('We\x20are\x20already\x20up\x20to\x20date\x20with\x20source.');process['exit'](0x0);}else{logger['error'](_0xfac381['message']);return process['exit'](0x1);}}}async function getRepository(_0xa5d275,_0xf4c49e){const {repository}=await graphql('\n      query ($owner: String!, $name: String!, $syncLabel: String!) {\n        repository(owner: $owner, name: $name) {\n          id\n          syncPullRequests: pullRequests(labels: [$syncLabel], first: 1) {\n            nodes {\n              id\n            }\n          }\n          syncLabel: label(name: $syncLabel) {\n            id\n          }\n        }\n      }\n    ',{'owner':_0xa5d275,'name':_0xf4c49e,'syncLabel':syncLabelName});return repository;}async function createLabel(_0x280ef7){const {createLabel}=await graphql('\x0a\x20\x20\x20\x20\x20\x20mutation\x20($input:\x20CreateLabelInput!)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20createLabel(input:\x20$input)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20label\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20id\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20',{'headers':{'accept':'application/vnd.github.bane-preview+json'},'input':_0x280ef7});return createLabel['label'];}async function createPullRequest(_0x118c81){const {createPullRequest}=await graphql('\n      mutation ($input: CreatePullRequestInput!) {\n        createPullRequest(input: $input) {\n          pullRequest {\n            id\n            number\n          }\n        }\n      }\n    ',{'headers':{'accept':'application/vnd.github.shadow-cat-preview+json'},'input':_0x118c81});return createPullRequest['pullRequest'];}async function addLabelToPullRequest(_0x3cc52d,_0x1b3b95){await graphql('\n      mutation ($input: AddLabelsToLabelableInput!) {\n        addLabelsToLabelable(input: $input) {\n          clientMutationId\n        }\n      }\n    ',{'headers':{'accept':'application/vnd.github.bane-preview+json'},'input':{'labelableId':_0x3cc52d['id'],'labelIds':[_0x1b3b95['id']]}});}function conflictPRBody(_0x25380e,_0x5aee8b,_0x33bfd0){return '\nSync conflicts with the source repo. Please update the translations based on updated source content.\n\nFor more information on how to resolve sync conflicts, check out the [guide for syncing translations](https://gatsbyjs.org/contributing/translation/sync-guide/).\n\n<details '+(_0x25380e['length']<=0xa?'open':'')+'>\n<summary>The following '+_0x25380e['length']+' files have conflicts:</summary><br />\n\n'+_0x25380e['map'](_0x1f7353=>'* [ ] '+_0x1f7353)['join']('\x0a')+'\n</details>\n\nOnce all the commits have been fixed, mark this pull request as "Ready for review" and merge it in!\n\nSee all changes since the last sync here:\n\n'+_0x5aee8b+'\n\nNOTE: Do **NOT** squash-merge this pull request. The sync script requires a ref to the source repo in order to work correctly.\n\n## Related PRs\n\n#'+_0x33bfd0+' PR for syncing non-conflicting files\n  ';}function syncPRBody(){return '\nSync all non-conflicting files with the source repo. This PR contains all updates that do not cause any conflicts and can be merged immediately.\n\nNOTE: Do *NOT* squash-merge this pull request. The sync script requires a ref to the source repo in order to work correctly.\n  ';}async function syncTranslationRepo(_0xa17af9){var _0x164485={'obcbL':function(_0x3b566e,_0x2eb07a){return _0x3b566e+_0x2eb07a;},'iBQEl':function(_0x43b93d,_0x3c73ec){return _0x43b93d!==_0x3c73ec;},'HXBNv':function(_0x15d113,_0x5b7e5d,_0xedf846){return _0x15d113(_0x5b7e5d,_0xedf846);},'xzfjd':function(_0x40af3d,_0x38eb38){return _0x40af3d>_0x38eb38;},'gdMAd':'unMUt','VxQpi':'RwnQt','MznpK':function(_0x441266,_0x426285){return _0x441266===_0x426285;},'brEJy':'aGllL','HnZnQ':'GiNZP','tkRXt':function(_0x4c122d,_0xba7025){return _0x4c122d(_0xba7025);},'avKqg':function(_0x212f66,_0xcb7002){return _0x212f66!==_0xcb7002;},'KzDIk':'askgQ','yzlmR':function(_0x1b90e2,_0x194114){return _0x1b90e2!==_0x194114;},'sctNk':function(_0x308c68,_0x497420){return _0x308c68===_0x497420;},'DjiZH':function(_0x5afe85,_0xccaf8d){return _0x5afe85>_0xccaf8d;},'BcfgI':'wzFIz','vNUSY':function(_0x5d423f,_0x3e7f2d){return _0x5d423f(_0x3e7f2d);},'LNcvF':function(_0x490b12,_0x5768ae,_0x2d1ff7,_0xef262a){return _0x490b12(_0x5768ae,_0x2d1ff7,_0xef262a);}};logger=log4js['getLogger'](_0x164485['obcbL']('sync:',_0xa17af9));logger['level']='info';const _0x130fe4=repoBase+'-'+_0xa17af9;const _0x281522=host+'/'+owner+'/'+_0x130fe4;if(_0x164485['iBQEl'](shell['cd'](cacheDir)['code'],0x0)){logger['debug']('creating\x20'+cacheDir);shell['mkdir'](cacheDir);shell['cd'](cacheDir);}cloneOrUpdateRepo(_0x130fe4,_0x281522);shell['exec']('git\x20remote\x20add\x20source\x20'+sourceRepoGitUrl);shell['exec']('git\x20fetch\x20source\x20master');const _0x383ccd=await _0x164485['HXBNv'](getRepository,owner,_0x130fe4);if(_0x164485['xzfjd'](_0x383ccd['syncPullRequests']['nodes']['length'],0x0)){if(_0x164485['gdMAd']===_0x164485['VxQpi']){shell['cd'](repoName);shell['exec']('git checkout master');shell['exec']('git pull origin master');}else{logger['info']('There are currently open sync pull requests. Please ask the language maintainers to merge the existing PR(s) in before opening another one. Exiting...');process['exit'](0x0);}}logger['info']('No\x20currently\x20open\x20sync\x20pull\x20requests.');let _0x4bf816;if(!_0x383ccd['syncLabel']){if(_0x164485['MznpK'](_0x164485['brEJy'],_0x164485['HnZnQ'])){shell['exec']('git rm '+_0x1d9dbe['join']('\x20'),{'silent':!![]});}else{logger['info']('Repository does not have a "'+syncLabelName+'\x22\x20label.\x20Creating\x20one...');_0x4bf816=await _0x164485['tkRXt'](createLabel,{'repositoryId':_0x383ccd['id'],'name':syncLabelName,'description':'Sync with translation source. Used by @gatsbybot to track open sync pull requests.','color':'fbca04'});}}else{if(_0x164485['avKqg'](_0x164485['KzDIk'],_0x164485['KzDIk'])){logger['debug']('creating\x20'+cacheDir);shell['mkdir'](cacheDir);shell['cd'](cacheDir);}else{logger['info']('Repository has an existing '+syncLabelName+' label.');_0x4bf816=_0x383ccd['syncLabel'];}}const _0x3f2082=shell['exec']('git merge-base origin/master source/master',{'silent':!![]})['stdout']['replace']('\x0a','');const _0x52c14d=_0x164485['tkRXt'](getShortHash,_0x3f2082);const _0x2928a6=shell['exec']('git rev-parse source/master',{'silent':!![]})['stdout']['replace']('\x0a','');const _0x3ec9a1=_0x164485['tkRXt'](getShortHash,_0x2928a6);logger['info']('Syncing with source (no conflicts)...');const _0xe6ae0b='sync-'+_0x3ec9a1;if(_0x164485['yzlmR'](shell['exec']('git checkout '+_0xe6ae0b,{'silent':!![]})['code'],0x0)){shell['exec']('git\x20checkout\x20-b\x20'+_0xe6ae0b);}shell['exec']('git pull source master --no-edit --strategy-option ours',{'silent':!![]});shell['exec']('git\x20diff\x20--name-only\x20--diff-filter=U\x20|\x20xargs\x20git\x20rm');shell['exec']('git commit --no-edit');shell['exec']('git push -u origin '+_0xe6ae0b);logger['info']('Creating sync pull request');const _0x2ea939=await createPullRequest({'repositoryId':_0x383ccd['id'],'baseRefName':'master','headRefName':_0xe6ae0b,'title':'(sync)\x20Sync\x20with\x20'+sourceRepo+' @ '+_0x3ec9a1,'body':syncPRBody(),'maintainerCanModify':!![]});await addLabelToPullRequest(_0x2ea939,_0x4bf816);shell['exec']('git checkout master');const _0x2fd38f=sourceRepoUrl+'/compare/'+_0x52c14d+'..'+_0x3ec9a1;logger['info']('Finding conflicts with source...');const _0xd40a06='conflicts-'+_0x3ec9a1;if(_0x164485['yzlmR'](shell['exec']('git checkout '+_0xd40a06,{'silent':!![]})['code'],0x0)){shell['exec']('git checkout -b '+_0xd40a06);}const _0x519dcc=shell['exec']('git pull source master',{'silent':!![]})['stdout'];if(_0x519dcc['includes']('Already up to date.')){logger['info']('We are already up to date with source.');process['exit'](0x0);}const _0xb5297e=_0x519dcc['split']('\x0a');const _0x2427b9=_0xb5297e['filter'](_0x22b3fb=>_0x22b3fb['startsWith']('CONFLICT (content)'));if(_0x164485['sctNk'](_0x2427b9['length'],0x0)){logger['info']('No conflicting files found. Exiting...');process['exit'](0x0);}const _0x23e64b=_0x2427b9['map'](_0x1acd77=>_0x1acd77['substr'](_0x1acd77['lastIndexOf']('\x20')+0x1));shell['exec']('git\x20reset',{'silent':!![]});shell['exec']('git add '+_0x23e64b['join']('\x20'));const _0x10e72f=_0xb5297e['filter'](_0x224785=>_0x224785['startsWith']('CONFLICT (modify/delete)'));const _0x1d9dbe=_0x10e72f['map'](_0x2239ae=>_0x2239ae['replace']('CONFLICT\x20(modify/delete):\x20','')['split']('\x20')[0x0]);if(_0x164485['DjiZH'](_0x1d9dbe['length'],0x0)){if(_0x164485['BcfgI']!==_0x164485['BcfgI']){logger['info']('Repository has an existing '+syncLabelName+' label.');_0x4bf816=_0x383ccd['syncLabel'];}else{shell['exec']('git rm '+_0x1d9dbe['join']('\x20'),{'silent':!![]});}}shell['exec']('git checkout -- .');shell['exec']('git clean -fd',{'silent':!![]});shell['exec']('git\x20commit\x20-m\x20\x22Commit\x20git\x20conflicts\x22',{'silent':!![]});shell['exec']('git push -u origin '+_0xd40a06);logger['info']('Creating conflicts pull request');const _0x581922=await _0x164485['vNUSY'](createPullRequest,{'repositoryId':_0x383ccd['id'],'baseRefName':'master','headRefName':_0xd40a06,'title':'(sync)\x20Resolve\x20conflicts\x20with\x20'+sourceRepo+' @ '+_0x3ec9a1,'body':_0x164485['LNcvF'](conflictPRBody,_0x23e64b,_0x2fd38f,_0x2ea939['number']),'maintainerCanModify':!![],'draft':!![]});await addLabelToPullRequest(_0x581922,_0x4bf816);}const [langCode]=process['argv']['slice'](0x2);syncTranslationRepo(langCode);