{
    "type": "Program",
    "body": [
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "i"
                    },
                    "init": null
                }
            ],
            "kind": "var"
        },
        {
            "type": "ForStatement",
            "init": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                    "type": "Identifier",
                    "name": "i"
                },
                "right": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0x0"
                }
            },
            "test": {
                "type": "BinaryExpression",
                "operator": "<",
                "left": {
                    "type": "Identifier",
                    "name": "i"
                },
                "right": {
                    "type": "Literal",
                    "value": 10,
                    "raw": "0xa"
                }
            },
            "update": {
                "type": "UpdateExpression",
                "operator": "++",
                "argument": {
                    "type": "Identifier",
                    "name": "i"
                },
                "prefix": false
            },
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "SwitchStatement",
                        "discriminant": {
                            "type": "Identifier",
                            "name": "i"
                        },
                        "cases": [
                            {
                                "type": "SwitchCase",
                                "test": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "0x1"
                                },
                                "consequent": [
                                    {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "BreakStatement",
                                                "label": null
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "z"
                                },
                                "init": {
                                    "type": "Literal",
                                    "value": 3,
                                    "raw": "0x3"
                                }
                            }
                        ],
                        "kind": "const"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "ArrowFunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "Identifier",
                                "name": "z"
                            },
                            "generator": false,
                            "expression": true,
                            "async": false
                        }
                    }
                ]
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "_0x3039"
            },
            "params": [
                {
                    "type": "Identifier",
                    "name": "_0x2264b8"
                },
                {
                    "type": "Identifier",
                    "name": "_0x2e397a"
                }
            ],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ReturnStatement",
                        "argument": {
                            "type": "SequenceExpression",
                            "expressions": [
                                {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "_0x3039"
                                    },
                                    "right": {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "_0x24288e"
                                            },
                                            {
                                                "type": "Identifier",
                                                "name": "_0x3039f5"
                                            }
                                        ],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "_0x24288e"
                                                        },
                                                        "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "-",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "_0x24288e"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": 480,
                                                                "raw": "0x1e0"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "_0x20ee41"
                                                            },
                                                            "init": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "Identifier",
                                                                    "name": "_0x2428"
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "_0x24288e"
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "kind": "let"
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "_0x20ee41"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    }
                                },
                                {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "_0x3039"
                                    },
                                    "arguments": [
                                        {
                                            "type": "Identifier",
                                            "name": "_0x2264b8"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "_0x2e397a"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "expect"
                        },
                        "arguments": [
                            {
                                "type": "Identifier",
                                "name": "i"
                            }
                        ]
                    },
                    "property": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "_0x296d66"
                        },
                        "arguments": [
                            {
                                "type": "Literal",
                                "value": 489,
                                "raw": "0x1e9"
                            }
                        ]
                    }
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 10,
                        "raw": "0xa"
                    }
                ]
            }
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "j"
                    },
                    "init": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0x0"
                    }
                }
            ],
            "kind": "var"
        },
        {
            "type": "ForStatement",
            "init": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                    "type": "Identifier",
                    "name": "i"
                },
                "right": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0x0"
                }
            },
            "test": {
                "type": "BinaryExpression",
                "operator": "<",
                "left": {
                    "type": "Identifier",
                    "name": "i"
                },
                "right": {
                    "type": "Literal",
                    "value": 10,
                    "raw": "0xa"
                }
            },
            "update": {
                "type": "UpdateExpression",
                "operator": "++",
                "argument": {
                    "type": "Identifier",
                    "name": "i"
                },
                "prefix": false
            },
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "SwitchStatement",
                        "discriminant": {
                            "type": "Identifier",
                            "name": "i"
                        },
                        "cases": [
                            {
                                "type": "SwitchCase",
                                "test": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0x0"
                                },
                                "consequent": [
                                    {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ContinueStatement",
                                                "label": null
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                                "type": "Identifier",
                                "name": "j"
                            },
                            "prefix": false
                        }
                    },
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "z"
                                },
                                "init": {
                                    "type": "Literal",
                                    "value": 3,
                                    "raw": "0x3"
                                }
                            }
                        ],
                        "kind": "const"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "ArrowFunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "Identifier",
                                "name": "z"
                            },
                            "generator": false,
                            "expression": true,
                            "async": false
                        }
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "SequenceExpression",
                "expressions": [
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "Identifier",
                                    "name": "expect"
                                },
                                "arguments": [
                                    {
                                        "type": "Identifier",
                                        "name": "j"
                                    }
                                ]
                            },
                            "property": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "Identifier",
                                    "name": "_0x296d66"
                                },
                                "arguments": [
                                    {
                                        "type": "Literal",
                                        "value": 489,
                                        "raw": "0x1e9"
                                    }
                                ]
                            }
                        },
                        "arguments": [
                            {
                                "type": "Literal",
                                "value": 9,
                                "raw": "0x9"
                            }
                        ]
                    },
                    {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                            "type": "Identifier",
                            "name": "j"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0x0"
                        }
                    }
                ]
            }
        },
        {
            "type": "ForStatement",
            "init": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                    "type": "Identifier",
                    "name": "i"
                },
                "right": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0x0"
                }
            },
            "test": {
                "type": "BinaryExpression",
                "operator": "<",
                "left": {
                    "type": "Identifier",
                    "name": "i"
                },
                "right": {
                    "type": "Literal",
                    "value": 10,
                    "raw": "0xa"
                }
            },
            "update": {
                "type": "UpdateExpression",
                "operator": "++",
                "argument": {
                    "type": "Identifier",
                    "name": "i"
                },
                "prefix": false
            },
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "SwitchStatement",
                        "discriminant": {
                            "type": "Identifier",
                            "name": "i"
                        },
                        "cases": [
                            {
                                "type": "SwitchCase",
                                "test": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0x0"
                                },
                                "consequent": [
                                    {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ForStatement",
                                                "init": {
                                                    "type": "VariableDeclaration",
                                                    "declarations": [
                                                        {
                                                            "type": "VariableDeclarator",
                                                            "id": {
                                                                "type": "Identifier",
                                                                "name": "k"
                                                            },
                                                            "init": {
                                                                "type": "Literal",
                                                                "value": 0,
                                                                "raw": "0x0"
                                                            }
                                                        }
                                                    ],
                                                    "kind": "var"
                                                },
                                                "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "<",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "k"
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": 10,
                                                        "raw": "0xa"
                                                    }
                                                },
                                                "update": {
                                                    "type": "UpdateExpression",
                                                    "operator": "++",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "k"
                                                    },
                                                    "prefix": false
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "VariableDeclaration",
                                                            "declarations": [
                                                                {
                                                                    "type": "VariableDeclarator",
                                                                    "id": {
                                                                        "type": "Identifier",
                                                                        "name": "z"
                                                                    },
                                                                    "init": {
                                                                        "type": "Literal",
                                                                        "value": 3,
                                                                        "raw": "0x3"
                                                                    }
                                                                }
                                                            ],
                                                            "kind": "const"
                                                        },
                                                        {
                                                            "type": "ExpressionStatement",
                                                            "expression": {
                                                                "type": "SequenceExpression",
                                                                "expressions": [
                                                                    {
                                                                        "type": "ArrowFunctionExpression",
                                                                        "id": null,
                                                                        "params": [],
                                                                        "body": {
                                                                            "type": "Identifier",
                                                                            "name": "z"
                                                                        },
                                                                        "generator": false,
                                                                        "expression": true,
                                                                        "async": false
                                                                    },
                                                                    {
                                                                        "type": "UpdateExpression",
                                                                        "operator": "++",
                                                                        "argument": {
                                                                            "type": "Identifier",
                                                                            "name": "j"
                                                                        },
                                                                        "prefix": false
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "BreakStatement",
                                                            "label": null
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "BreakStatement",
                                                "label": null
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "z"
                                },
                                "init": {
                                    "type": "Literal",
                                    "value": 3,
                                    "raw": "0x3"
                                }
                            }
                        ],
                        "kind": "const"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "ArrowFunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                                "type": "Identifier",
                                "name": "z"
                            },
                            "generator": false,
                            "expression": true,
                            "async": false
                        }
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "expect"
                        },
                        "arguments": [
                            {
                                "type": "Identifier",
                                "name": "j"
                            }
                        ]
                    },
                    "property": {
                        "type": "Literal",
                        "value": "toBe",
                        "raw": "'toBe'"
                    }
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 1,
                        "raw": "0x1"
                    }
                ]
            }
        }
    ],
    "sourceType": "script"
}