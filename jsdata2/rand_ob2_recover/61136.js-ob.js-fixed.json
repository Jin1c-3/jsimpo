{
    "type": "Program",
    "body": [
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "SequenceExpression",
                "expressions": [
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "Literal",
                                                "value": "use asm",
                                                "raw": "'use asm'"
                                            },
                                            "directive": "use asm"
                                        },
                                        {
                                            "type": "ReturnStatement",
                                            "argument": {
                                                "type": "FunctionExpression",
                                                "id": null,
                                                "params": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0x4b7e4f"
                                                    }
                                                ],
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ForStatement",
                                                            "init": {
                                                                "type": "VariableDeclaration",
                                                                "declarations": [
                                                                    {
                                                                        "type": "VariableDeclarator",
                                                                        "id": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x5bac96"
                                                                        },
                                                                        "init": {
                                                                            "type": "Literal",
                                                                            "value": 0,
                                                                            "raw": "0x0"
                                                                        }
                                                                    }
                                                                ],
                                                                "kind": "var"
                                                            },
                                                            "test": {
                                                                "type": "BinaryExpression",
                                                                "operator": "<",
                                                                "left": {
                                                                    "type": "Identifier",
                                                                    "name": "_0x5bac96"
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": 100000,
                                                                    "raw": "0x186a0"
                                                                }
                                                            },
                                                            "update": {
                                                                "type": "UpdateExpression",
                                                                "operator": "++",
                                                                "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "_0x5bac96"
                                                                },
                                                                "prefix": true
                                                            },
                                                            "body": {
                                                                "type": "BlockStatement",
                                                                "body": []
                                                            }
                                                        },
                                                        {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "_0x4b7e4f"
                                                            }
                                                        }
                                                    ]
                                                },
                                                "generator": false,
                                                "expression": false,
                                                "async": false
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "arguments": []
                        },
                        "arguments": [
                            {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                    "type": "ThisExpression"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": "i",
                                    "raw": "'i'"
                                }
                            }
                        ]
                    }
                ]
            }
        }
    ],
    "sourceType": "script"
}