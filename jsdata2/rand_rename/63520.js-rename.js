(function r(){assertEquals(1,String.raw.length)})();(function r(){assertThrows("String.raw()",TypeError)})();(function r(){assertThrows("String.raw([])",TypeError)})();(function r(){var a=[];a.raw={};assertEquals("",String.raw(a));a.raw={lengt:0};assertEquals("",String.raw(a))})();(function r(){var a=[];a.raw={length:0};assertEquals("",String.raw(a));assertEquals("",String.raw(a,"a","b","c"));a.raw=[];assertEquals("",String.raw(a));assertEquals("",String.raw(a,"a","b","c"))})();(function r(){var a=[];a.raw={length:-85};assertEquals("",String.raw(a));assertEquals("",String.raw(a,"a","b","c"));a.raw=[];assertEquals("",String.raw(a));assertEquals("",String.raw(a,"a","b","c"))})();(function r(){var a=[];a.raw={length:NaN};assertEquals("",String.raw(a));assertEquals("",String.raw(a,"a","b","c"));a.raw=[];assertEquals("",String.raw(a));assertEquals("",String.raw(a,"a","b","c"))})();(function r(){var a=[];a.raw=["a"];assertEquals("a",String.raw(a))})();(function r(){var a=[];a.raw=["a","b"];assertEquals("ab",String.raw(a))})();(function r(){var a=[];a.raw=["a","b"];assertEquals("a!b",String.raw(a,"!"));a.raw=["a","b","c"];assertEquals("abc",String.raw(a));a.raw=["a","b","c"];assertEquals("a!bc",String.raw(a,"!"));a.raw=["a","b","c"];assertEquals("a!b?c",String.raw(a,"!","?"));a.raw=["\n","\r\n","\r"];assertEquals("\nx\r\ny\r",String.raw(a,"x","y"));a.raw=["\n","\r\n","\r"];assertEquals("\n\r\r\r\n\n\r",String.raw(a,"\r\r","\n"))})();(function r(){var a=[];a.raw={length:2,0:"a",1:"b",2:"c"};assertEquals("axb",String.raw(a,"x","y"));a.raw={length:4,0:"a",1:"b",2:"c"};assertEquals("axbycundefined",String.raw(a,"x","y"))})();(function r(){var a={};a.raw={};Object.defineProperties(a,{length:{get:function(){assertUnreachable()},set:function(r){assertUnreachable()}},0:{get:function(){assertUnreachable()},set:function(r){assertUnreachable()}},1:{get:function(){assertUnreachable()},set:function(r){assertUnreachable()}}});Object.defineProperties(a.raw,{length:{get:function(){return 2},set:function(r){assertUnreachable()}},0:{get:function(){return"getter values"},set:function(r){assertUnreachable()}},1:{get:function(){return"are nice"},set:function(r){assertUnreachable()}}});assertEquals("getter values are nice",String.raw(a," "))})();(function r(){var a=[];a.raw=["1."];a.raw[2]=".2";assertEquals("1.undefined.2",String.raw(a))})();(function r(){var a=[];a.raw=[1];function t(){}Object.defineProperty(a.raw,"0",{get:function(){throw new t}});assertThrows(function(){String.raw(a)},t)})();(function r(){var a=[];a.raw=[null,undefined,1,"str",true,false,NaN,Infinity,{}];assertEquals("nullundefined1strtruefalseNaNInfinity[object Object]",String.raw(a));a.raw=["0","1","2","3","4","5","6","7","8","9"];assertEquals("0null1undefined213str4true5false6NaN7Infinity8[object Object]9",String.raw(a,null,void 0,1,"str",true,false,NaN,Infinity,{}))})();(function r(){var a=[];a.raw=[Symbol("foo")];assertThrows(function(){String.raw(a)},TypeError);a.raw=["1","2"];assertThrows(function(){String.raw(a,Symbol("foo"))},TypeError)})();(function r(){var a=[];var t={};function n(){}t.toString=function(){throw new n};a.raw=[t];assertThrows(function(){String.raw(a)},n);a.raw=["1","2"];assertThrows(function(){String.raw(a,t)},n)})();(function r(){var a=[];var t={};function n(){}t.toString=null;t.valueOf=function(){throw new n};a.raw=[t];assertThrows(function(){String.raw(a)},n);a.raw=["1","2"];assertThrows(function(){String.raw(a,t)},n)})();(function r(){var t=[];var n=[];n.raw={};function a(r){var a={};a.toString=null;a.valueOf=function(){t.push("arg"+r);return r};return a}Object.defineProperty(n.raw,"length",{get:function(){t.push("length");return 3}});[1,3,5].forEach(function(r,a){Object.defineProperty(n.raw,a,{get:function(){t.push("raw"+r);return r}})});assertEquals("12345",String.raw(n,a(2),a(4),a(6)));assertEquals(["length","raw1","arg2","raw3","arg4","raw5"],t)})();(function r(){var a=[];var t=[];function n(r){var a="_"+r+"_";return{toString:function(){return r},valueOf:function(){return a}}}function e(a,r){return{get:function(){t.push("get"+a);return r},set:function(r){t.push("set"+a)}}}Object.defineProperties(a,{0:e(0,n("a")),1:e(1,n("b")),2:e(2,n("c"))});assertEquals("-a-b-c-",String.raw`-${a[0]}-${a[1]}-${a[2]}-`);assertArrayEquals(["get0","get1","get2"],t);t.length=0;assertEquals("-a-",String.raw`-${a[0]}-`);assertArrayEquals(["get0"],t)})();