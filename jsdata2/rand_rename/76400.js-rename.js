import{Meteor}from"meteor/meteor";import{Roles}from"../../../../app/models";import{Logger}from"../../../../app/logger";import{settings}from"../../../../app/settings";import{Team}from"../../../../server/sdk";const logger=new Logger("ldapEnterprise");const mustBeAnArrayOfStrings=e=>Array.isArray(e)&&e.length&&e.every(e=>typeof e==="string");const validateRoleMapping=e=>{const t=Roles.find({scope:"Users"}).fetch().map(e=>e._id);const r=Object.values(e);const s=r.every(e=>e.every(e=>t.includes(e)));if(!s){throw new Error("Please verify your mapping for LDAP X RocketChat Roles. There is some invalid Rocket Chat Role.")}};const validateLDAPRolesMappingStructure=e=>{const t=Object.values(e);const r=t.every(mustBeAnArrayOfStrings);if(!r){throw new Error("Please verify your mapping for LDAP X RocketChat Roles. The structure is invalid, the structure should be an object like: {key: LdapRole, value: [An array of rocket.chat roles]}")}};const validateLDAPTeamsMappingStructure=e=>{const t=Object.values(e);const r=t.every(mustBeAnArrayOfStrings);if(!r){throw new Error("Please verify your mapping for LDAP X RocketChat Teams. The structure is invalid, the structure should be an object like: {key: LdapTeam, value: [An array of rocket.chat teams]}")}};export const getLdapRolesByUsername=(e,t)=>{const r={filter:settings.get("LDAP_Query_To_Get_User_Groups").replace(/#{username}/g,e),scope:t.options.User_Search_Scope||"sub",sizeLimit:t.options.Search_Size_Limit};const s=e=>e.filter(e=>e&&e.ou).map(e=>e.ou);const o=t.searchAllSync(t.options.BaseDN,r);return Array.isArray(o)?s(o):[]};export const getLdapTeamsByUsername=(e,t)=>{const r={filter:settings.get("LDAP_Query_To_Get_User_Teams").replace(/#{username}/g,e),scope:t.options.User_Search_Scope||"sub",sizeLimit:t.options.Search_Size_Limit};const s=t.searchAllSync(t.options.BaseDN,r);if(!Array.isArray(s)){return[]}return s.filter(e=>e&&e.ou).map(e=>e.ou).flat()};export const getRocketChatRolesByLdapRoles=(r,e)=>{const t=Object.keys(r);if(!e.length){logger.error("The LDAP user has no role, so we set the default role value");return[settings.get("LDAP_Default_Role_To_User")]}const s=e.filter(e=>!t.includes(e));const o=(e,t)=>e.concat(r[t]);const a=(e,t)=>e.includes(t)?e:e.concat(t);if(s.length){logger.error(`The following LDAP roles is/are not mapped in Rocket.Chat: "${s.join(", ")}". Because it, we set the default LDAP role.`);return[settings.get("LDAP_Default_Role_To_User")]}return e.reduce(o,[]).reduce(a,[])};export const getRocketChatTeamsByLdapTeams=(t,e)=>{const r=Object.keys(t);const s=e.filter(e=>r.includes(e));if(s.length<e.length){const o=e.filter(e=>!r.includes(e));logger.error(`The following LDAP teams are not mapped in Rocket.Chat: "${o.join(", ")}".`)}if(!s.length){return[]}return[...new Set(s.map(e=>t[e]).flat())]};export const updateUserUsingMappedLdapRoles=(e,t)=>{Meteor.users.update({_id:e},{$set:{roles:t}})};async function updateUserUsingMappedLdapTeamsAsync(e,t,r){const s=[...new Set(Object.values(r).flat())];const o=await Team.listByNames(s,{projection:{_id:1,name:1}});const a=o.filter(({name:e})=>t.includes(e)).map(({_id:e})=>e);const n=o.filter(({name:e})=>!t.includes(e)).map(({_id:e})=>e);const i=await Team.listTeamsBySubscriberUserId(e,{projection:{teamId:1}});const c=await i.map(({teamId:e})=>e);const l=c.filter(e=>n.includes(e));const p=a.filter(e=>!c.includes(e));await Team.insertMemberOnTeams(e,p);await Team.removeMemberFromTeams(e,l)}export const updateUserUsingMappedLdapTeams=(e,t,r)=>Promise.await(updateUserUsingMappedLdapTeamsAsync(e,t,r));export const validateLDAPRolesMappingChanges=()=>{settings.get("LDAP_Roles_To_Rocket_Chat_Roles",(e,t)=>{try{if(t){const r=JSON.parse(t);validateLDAPRolesMappingStructure(r);validateRoleMapping(r)}}catch(e){logger.error(e)}})};export const validateLDAPTeamsMappingChanges=()=>{settings.get("LDAP_Groups_To_Rocket_Chat_Teams",(e,t)=>{try{if(t){const r=JSON.parse(t);validateLDAPTeamsMappingStructure(r)}}catch(e){logger.error(e)}})};