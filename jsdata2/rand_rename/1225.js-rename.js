const Gutter=require("../src/gutter");const GutterContainer=require("../src/gutter-container");describe("GutterContainer",()=>{let n=null;const t={scheduleComponentUpdate(){}};beforeEach(()=>{n=new GutterContainer(t)});describe("when initialized",()=>it("it has no gutters",()=>{expect(n.getGutters().length).toBe(0)}));describe("::addGutter",()=>{it("creates a new gutter",()=>{const t=n.addGutter({"test-gutter":"test-gutter",priority:1});expect(n.getGutters()).toEqual([t]);expect(t.priority).toBe(1)});it("throws an error if the provided gutter name is already in use",()=>{const t="test-gutter";n.addGutter({name:t});expect(n.addGutter.bind(null,{name:t})).toThrow()});it("keeps added gutters sorted by ascending priority",()=>{const t=n.addGutter({name:"first",priority:1});const e=n.addGutter({name:"third",priority:3});const r=n.addGutter({name:"second",priority:2});expect(n.getGutters()).toEqual([t,r,e])})});describe("::removeGutter",()=>{let e;beforeEach(function(){n=new GutterContainer(t);e=[];n.onDidRemoveGutter(t=>e.push(t))});it("removes the gutter if it is contained by this GutterContainer",()=>{const t=n.addGutter({"test-gutter":"test-gutter"});expect(n.getGutters()).toEqual([t]);n.removeGutter(t);expect(n.getGutters().length).toBe(0);expect(e).toEqual([t.name])});it("throws an error if the gutter is not within this GutterContainer",()=>{const t={};const e=new GutterContainer(t);const r=new Gutter("gutter-name",e);expect(n.removeGutter.bind(null,r)).toThrow()})});describe("::destroy",()=>it("clears its array of gutters and destroys custom gutters",()=>{const t=n.addGutter({"test-gutter":"test-gutter",priority:1});const e=jasmine.createSpy();t.onDidDestroy(e);n.destroy();expect(e).toHaveBeenCalled();expect(n.getGutters()).toEqual([])}))});