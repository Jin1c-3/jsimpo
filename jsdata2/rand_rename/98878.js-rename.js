"use strict";const expect=require("chai").expect;const AwsProvider=require("../../../../../../../../lib/plugins/aws/provider");const AwsCompileCloudWatchLogEvents=require("../../../../../../../../lib/plugins/aws/package/compile/events/cloudWatchLog");const Serverless=require("../../../../../../../../lib/Serverless");describe("AwsCompileCloudWatchLogEvents",()=>{let e;let o;beforeEach(()=>{e=new Serverless;e.service.provider.compiledCloudFormationTemplate={Resources:{}};e.setProvider("aws",new AwsProvider(e));o=new AwsCompileCloudWatchLogEvents(e);o.serverless.service.service="new-service"});describe("#constructor()",()=>{it("should set the provider variable to an instance of AwsProvider",()=>expect(o.provider).to.be.instanceof(AwsProvider))});describe("#compileCloudWatchLogEvents()",()=>{it("should create corresponding resources when cloudwatchLog events are given",()=>{o.serverless.service.functions={first:{events:[{cloudwatchLog:{logGroup:"/aws/lambda/hello1"}},{cloudwatchLog:{logGroup:"/aws/lambda/hello2"}}]}};o.compileCloudWatchLogEvents();expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Type).to.equal("AWS::Logs::SubscriptionFilter");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Type).to.equal("AWS::Logs::SubscriptionFilter");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal("/aws/lambda/hello1");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Properties.LogGroupName).to.equal("/aws/lambda/hello2");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal("");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Properties.FilterPattern).to.equal("");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionLogsSubscriptionFilterCloudWatchLog.Type).to.equal("AWS::Lambda::Permission")});it("should respect 2 cloudwatchLog events for log group",()=>{o.serverless.service.functions={first:{events:[{cloudwatchLog:{logGroup:"/aws/lambda/hello1"}}]},second:{events:[{cloudwatchLog:{logGroup:"/aws/lambda/hello1"}}]}};o.compileCloudWatchLogEvents();expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Type).to.equal("AWS::Logs::SubscriptionFilter");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal("/aws/lambda/hello1");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal("");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionLogsSubscriptionFilterCloudWatchLog.Type).to.equal("AWS::Lambda::Permission");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondLogsSubscriptionFilterCloudWatchLog1.Type).to.equal("AWS::Logs::SubscriptionFilter");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal("/aws/lambda/hello1");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal("");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.SecondLambdaPermissionLogsSubscriptionFilterCloudWatchLog.Type).to.equal("AWS::Lambda::Permission")});it('should respect "filter" variable',()=>{o.serverless.service.functions={first:{events:[{cloudwatchLog:{logGroup:"/aws/lambda/hello1",filter:"{$.userIdentity.type = Root}"}}]}};o.compileCloudWatchLogEvents();expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal("{$.userIdentity.type = Root}")});it('should respect "filter" variable of plain text',()=>{o.serverless.service.functions={first:{events:[{cloudwatchLog:{logGroup:"/aws/lambda/hello1",filter:'"Total amount" -"level=Debug"'}}]}};o.compileCloudWatchLogEvents();expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal('"Total amount" -"level=Debug"')});it('should respect escaped "filter" variable of plain text',()=>{o.serverless.service.functions={first:{events:[{cloudwatchLog:{logGroup:"/aws/lambda/hello1",filter:'\\"Total amount\\" -\\"level=Debug\\"'}}]}};o.compileCloudWatchLogEvents();expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal('"Total amount" -"level=Debug"')});it('should set an empty string for FilterPattern statement when "filter" variable is not given',()=>{o.serverless.service.functions={first:{events:[{cloudwatchLog:{logGroup:"/aws/lambda/hello1"}}]}};o.compileCloudWatchLogEvents();expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal("")});it("should create corresponding resources when cloudwatchLog events are given as a string",()=>{o.serverless.service.functions={first:{events:[{cloudwatchLog:"/aws/lambda/hello1"},{cloudwatchLog:"/aws/lambda/hello2"}]}};o.compileCloudWatchLogEvents();expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Type).to.equal("AWS::Logs::SubscriptionFilter");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Type).to.equal("AWS::Logs::SubscriptionFilter");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal("/aws/lambda/hello1");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Properties.LogGroupName).to.equal("/aws/lambda/hello2");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal("");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog2.Properties.FilterPattern).to.equal("");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLambdaPermissionLogsSubscriptionFilterCloudWatchLog.Type).to.equal("AWS::Lambda::Permission")});it("should create a longest-common suffix of logGroup to minimize scope",()=>{expect(o.longestCommonSuffix(["/aws/lambda/hello1"])).to.equal("/aws/lambda/hello1");expect(o.longestCommonSuffix(["/aws/lambda/hello1","/aws/lambda/hello2"])).to.equal("/aws/lambda/hello*");expect(o.longestCommonSuffix(["/aws/lambda/hello1","/aws/lambda/hot"])).to.equal("/aws/lambda/h*");expect(o.longestCommonSuffix(["/aws/lambda/hello1","/aws/lambda/tweet"])).to.equal("/aws/lambda/*");expect(o.longestCommonSuffix(["/aws/lambda/hello1","/aws/lex/log1","/aws/lightsail/log1"])).to.equal("/aws/l*");expect(o.longestCommonSuffix(["/aws/lambda/hello1","/aws/batch/log1"])).to.equal("/aws/*");expect(o.longestCommonSuffix(["/aws/*","/aws/lambda/hello"])).to.equal("/aws/*");expect(o.longestCommonSuffix(["/aws/lambda/*","/aws/lambda/hello"])).to.equal("/aws/lambda/*");expect(o.longestCommonSuffix(["/aws/lambda","/aws/lambda/hello"])).to.equal("/aws/lambda*");expect(o.longestCommonSuffix(["/aws/lambda/yada-dev-dummy","/aws/lambda/yada-dev-dummy2"])).to.equal("/aws/lambda/yada-dev-dummy*")});it('should throw an error if "logGroup" is configured more than twice in one CloudFormation stack',()=>{o.serverless.service.functions={first:{events:[{cloudwatchLog:"/aws/lambda/hello1"},{cloudwatchLog:"/aws/lambda/hello2"},{cloudwatchLog:"/aws/lambda/hello1"},{cloudwatchLog:"/aws/lambda/hello1"}]}};expect(()=>o.compileCloudWatchLogEvents()).to.throw(Error);o.serverless.service.functions={first:{events:[{cloudwatchLog:"/aws/lambda/hello1"},{cloudwatchLog:"/aws/lambda/hello2"},{cloudwatchLog:"/aws/lambda/hello1"}]},second:{events:[{cloudwatchLog:"/aws/lambda/hello1"}]}};expect(()=>o.compileCloudWatchLogEvents()).to.throw(Error)});it("should respect variables if multi-line variables are given",()=>{o.serverless.service.functions={first:{events:[{cloudwatchLog:{logGroup:"/aws/lam\nbda/hello1",filter:"{$.userIden\ntity.type = Root}"}}]}};o.compileCloudWatchLogEvents();expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal("/aws/lambda/hello1");expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.FilterPattern).to.equal("{$.userIdentity.type = Root}");o.serverless.service.functions={first:{events:[{cloudwatchLog:"/aws/lam\nbda/hello3"}]}};o.compileCloudWatchLogEvents();expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources.FirstLogsSubscriptionFilterCloudWatchLog1.Properties.LogGroupName).to.equal("/aws/lambda/hello3")});it("should not create corresponding resources when cloudwatchLog event is not given",()=>{o.serverless.service.functions={first:{events:[{}]}};o.compileCloudWatchLogEvents();expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({})});it('should not create corresponding resources when "events" property is not given',()=>{o.serverless.service.functions={first:{}};o.compileCloudWatchLogEvents();expect(o.serverless.service.provider.compiledCloudFormationTemplate.Resources).to.deep.equal({})})})});