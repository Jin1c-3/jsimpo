const path=require("path");const temp=require("temp").track();const dedent=require("dedent");const TextBuffer=require("text-buffer");const TextEditor=require("../src/text-editor");const Workspace=require("../src/workspace");const Project=require("../src/project");const platform=require("./spec-helper-platform");const _=require("underscore-plus");const fstream=require("fstream");const fs=require("fs-plus");const AtomEnvironment=require("../src/atom-environment");const{conditionPromise}=require("./async-spec-helpers");describe("Workspace",()=>{let I;let a;beforeEach(()=>{I=atom.workspace;I.resetFontSize();spyOn(atom.applicationDelegate,"confirm");a=spyOn(atom.applicationDelegate,"setWindowDocumentEdited");atom.project.setPaths([atom.project.getDirectories()[0].resolve("dir")]);waits(1);waitsForPromise(()=>atom.workspace.itemLocationStore.clear())});afterEach(()=>{try{temp.cleanupSync()}catch(e){}});function i(){waitsForPromise(()=>{const e=I.serialize();const t=atom.project.serialize({isUnloading:true});I.destroy();atom.project.destroy();atom.project=new Project({notificationManager:atom.notifications,packageManager:atom.packages,confirm:atom.confirm.bind(atom),applicationDelegate:atom.applicationDelegate,grammarRegistry:atom.grammars});return atom.project.deserialize(t).then(()=>{I=atom.workspace=new Workspace({config:atom.config,project:atom.project,packageManager:atom.packages,grammarRegistry:atom.grammars,styleManager:atom.styles,deserializerManager:atom.deserializers,notificationManager:atom.notifications,applicationDelegate:atom.applicationDelegate,viewRegistry:atom.views,assert:atom.assert.bind(atom),textEditorRegistry:atom.textEditors});I.deserialize(e,atom.deserializers)})})}describe("serialization",()=>{describe("when the workspace contains text editors",()=>{it("constructs the view with the same panes",()=>{const e=atom.workspace.getActivePane();const t=e.splitRight({copyActiveItem:true});const a=t.splitRight({copyActiveItem:true});let o=null;waitsForPromise(()=>atom.workspace.open(null).then(e=>e.setText("An untitled editor.")));waitsForPromise(()=>atom.workspace.open("b").then(e=>t.activateItem(e.copy())));waitsForPromise(()=>atom.workspace.open("../sample.js").then(e=>a.activateItem(e)));runs(()=>{a.activeItem.setCursorScreenPosition([2,4]);o=t.splitDown()});waitsForPromise(()=>atom.workspace.open("../sample.txt").then(e=>o.activateItem(e)));runs(()=>{o.getActiveItem().setCursorScreenPosition([0,2]);t.activate()});i();runs(()=>{expect(atom.workspace.getTextEditors().length).toBe(5);const[e,t,a,o,n]=atom.workspace.getTextEditors();const i=atom.project.getDirectories()[0];expect(i).toBeDefined();expect(e.getPath()).toBe(i.resolve("b"));expect(t.getPath()).toBe(i.resolve("../sample.txt"));expect(t.getCursorScreenPosition()).toEqual([0,2]);expect(o.getPath()).toBe(i.resolve("b"));expect(n.getPath()).toBe(i.resolve("../sample.js"));expect(n.getCursorScreenPosition()).toEqual([2,4]);expect(a.getPath()).toBeUndefined();expect(a.getText()).toBe("An untitled editor.");expect(atom.workspace.getActiveTextEditor().getPath()).toBe(o.getPath());const s=fs.tildify(escapeStringRegex(atom.project.getPaths()[0]));expect(document.title).toMatch(new RegExp(`^${path.basename(o.getLongTitle())} \\u2014 ${s}`))})})});describe("where there are no open panes or editors",()=>{it("constructs the view with no open editors",()=>{atom.workspace.getActivePane().destroy();expect(atom.workspace.getTextEditors().length).toBe(0);i();runs(()=>{expect(atom.workspace.getTextEditors().length).toBe(0)})})})});describe("::open(itemOrURI, options)",()=>{let n=null;beforeEach(()=>{n=[];I.onDidOpen(e=>n.push(e));spyOn(I.getActivePane(),"activate").andCallThrough()});describe("when the 'searchAllPanes' option is false (default)",()=>{describe("when called without a uri or item",()=>{it("adds and activates an empty editor on the active pane",()=>{let t;let a;waitsForPromise(()=>I.open().then(e=>{t=e}));runs(()=>{expect(t.getPath()).toBeUndefined();expect(I.getActivePane().items).toEqual([t]);expect(I.getActivePaneItem()).toBe(t);expect(I.getActivePane().activate).toHaveBeenCalled();expect(n).toEqual([{uri:undefined,pane:I.getActivePane(),item:t,index:0}]);n=[]});waitsForPromise(()=>I.open().then(e=>{a=e}));runs(()=>{expect(a.getPath()).toBeUndefined();expect(I.getActivePane().items).toEqual([t,a]);expect(I.getActivePaneItem()).toBe(a);expect(I.getActivePane().activate).toHaveBeenCalled();expect(n).toEqual([{uri:undefined,pane:I.getActivePane(),item:a,index:1}])})})});describe("when called with a uri",()=>{describe("when the active pane already has an editor for the given uri",()=>{it("activates the existing editor on the active pane",()=>{let t=null;let a=null;let o=null;waitsForPromise(()=>I.open("a").then(e=>{a=e;return I.open("b").then(e=>{o=e;return I.open("a").then(e=>{t=e})})}));runs(()=>{expect(t).toBe(a);expect(I.getActivePaneItem()).toBe(t);expect(I.getActivePane().activate).toHaveBeenCalled();const e=atom.project.getDirectories()[0];expect(e).toBeDefined();expect(n).toEqual([{uri:e.resolve("a"),item:a,pane:atom.workspace.getActivePane(),index:0},{uri:e.resolve("b"),item:o,pane:atom.workspace.getActivePane(),index:1},{uri:e.resolve("a"),item:a,pane:atom.workspace.getActivePane(),index:0}])})});it("finds items in docks",()=>{const e=atom.workspace.getRightDock();const t="atom://test";const a={getURI:()=>t,getDefaultLocation:()=>"left",getElement:()=>document.createElement("div")};e.getActivePane().addItem(a);expect(e.getPaneItems()).toHaveLength(1);waitsForPromise(()=>atom.workspace.open(t,{searchAllPanes:true}));runs(()=>{expect(atom.workspace.getPaneItems()).toHaveLength(1);expect(e.getPaneItems()).toHaveLength(1);expect(e.getPaneItems()[0]).toBe(a)})})});describe("when the 'activateItem' option is false",()=>{it("adds the item to the workspace",()=>{let t;waitsForPromise(()=>I.open("a"));waitsForPromise(()=>I.open("b",{activateItem:false}).then(e=>{t=e}));runs(()=>{expect(I.getPaneItems()).toContain(t);expect(I.getActivePaneItem()).not.toBe(t)})})});describe("when the active pane does not have an editor for the given uri",()=>{beforeEach(()=>{atom.workspace.enablePersistence=true});afterEach(async()=>{await atom.workspace.itemLocationStore.clear();atom.workspace.enablePersistence=false});it("adds and activates a new editor for the given path on the active pane",()=>{let t=null;waitsForPromise(()=>I.open("a").then(e=>{t=e}));runs(()=>{const e=atom.project.getDirectories()[0];expect(e).toBeDefined();expect(t.getURI()).toBe(e.resolve("a"));expect(I.getActivePaneItem()).toBe(t);expect(I.getActivePane().items).toEqual([t]);expect(I.getActivePane().activate).toHaveBeenCalled()})});it("discovers existing editors that are still opening",()=>{let t=null;let a=null;waitsForPromise(()=>Promise.all([I.open("spartacus.txt").then(e=>{t=e}),I.open("spartacus.txt").then(e=>{a=e})]));runs(()=>{expect(t).toEqual(a);expect(I.getActivePane().items).toEqual([t])})});it("uses the location specified by the model's `getDefaultLocation()` method",()=>{const e={getDefaultLocation:jasmine.createSpy().andReturn("right"),getElement:()=>document.createElement("div")};const t=jasmine.createSpy().andReturn(e);const a=atom.workspace.getRightDock();spyOn(atom.workspace.itemLocationStore,"load").andReturn(Promise.resolve());spyOn(atom.workspace,"getOpeners").andReturn([t]);expect(a.getPaneItems()).toHaveLength(0);waitsForPromise(()=>atom.workspace.open("a"));runs(()=>{expect(a.getPaneItems()).toHaveLength(1);expect(t).toHaveBeenCalled();expect(e.getDefaultLocation).toHaveBeenCalled()})});it("prefers the last location the user used for that item",()=>{const t="atom://test";const a={getURI:()=>t,getDefaultLocation:()=>"left",getElement:()=>document.createElement("div")};const e=e=>e===t?a:null;const o=atom.workspace.getRightDock();spyOn(atom.workspace.itemLocationStore,"load").andCallFake(e=>e==="atom://test"?Promise.resolve("right"):Promise.resolve());spyOn(atom.workspace,"getOpeners").andReturn([e]);expect(o.getPaneItems()).toHaveLength(0);waitsForPromise(()=>atom.workspace.open(t));runs(()=>{expect(o.getPaneItems()).toHaveLength(1);expect(o.getPaneItems()[0]).toBe(a)})})})});describe("when an item with the given uri exists in an inactive pane container",()=>{it("activates that item if it is in that container's active pane",async()=>{const e=await atom.workspace.open("a");atom.workspace.getLeftDock().activate();expect(await atom.workspace.open("a",{searchAllPanes:false})).toBe(e);expect(atom.workspace.getActivePaneContainer().getLocation()).toBe("center");expect(atom.workspace.getPaneItems()).toEqual([e]);atom.workspace.getActivePane().splitRight();atom.workspace.getLeftDock().activate();const t=await atom.workspace.open("a",{searchAllPanes:false});expect(t).not.toBe(e);expect(atom.workspace.getActivePaneContainer().getLocation()).toBe("center");expect(atom.workspace.getPaneItems()).toEqual([e,t])})})});describe("when the 'searchAllPanes' option is true",()=>{describe("when an editor for the given uri is already open on an inactive pane",()=>{it("activates the existing editor on the inactive pane, then activates that pane",()=>{let t=null;let a=null;const e=I.getActivePane();const o=I.getActivePane().splitRight();waitsForPromise(()=>{e.activate();return I.open("a").then(e=>{t=e})});waitsForPromise(()=>{o.activate();return I.open("b").then(e=>{a=e})});runs(()=>expect(I.getActivePaneItem()).toBe(a));waitsForPromise(()=>I.open("a",{searchAllPanes:true}));runs(()=>{expect(I.getActivePane()).toBe(e);expect(I.getActivePaneItem()).toBe(t)})});it("discovers existing editors that are still opening in an inactive pane",()=>{let t=null;let a=null;const e=I.getActivePane();const o=I.getActivePane().splitRight();e.activate();const n=I.open("spartacus.txt",{searchAllPanes:true}).then(e=>{t=e});o.activate();const i=I.open("spartacus.txt",{searchAllPanes:true}).then(e=>{a=e});waitsForPromise(()=>Promise.all([n,i]));runs(()=>{expect(t).toBeDefined();expect(a).toBeDefined();expect(t).toEqual(a);expect(I.getActivePane().items).toEqual([t])})});it("activates the pane in the dock with the matching item",()=>{const e=atom.workspace.getRightDock();const t="atom://test";const a={getURI:()=>t,getDefaultLocation:jasmine.createSpy().andReturn("left"),getElement:()=>document.createElement("div")};e.getActivePane().addItem(a);spyOn(e.paneForItem(a),"activate");waitsForPromise(()=>atom.workspace.open(t,{searchAllPanes:true}));runs(()=>expect(e.paneForItem(a).activate).toHaveBeenCalled())})});describe("when no editor for the given uri is open in any pane",()=>{it("opens an editor for the given uri in the active pane",()=>{let t=null;waitsForPromise(()=>I.open("a",{searchAllPanes:true}).then(e=>{t=e}));runs(()=>expect(I.getActivePaneItem()).toBe(t))})})});describe("when attempting to open an editor in a dock",()=>{it("opens the editor in the workspace center",async()=>{await atom.workspace.open("sample.txt",{location:"right"});expect(atom.workspace.getCenter().getActivePaneItem().getFileName()).toEqual("sample.txt")})});describe("when called with an item rather than a URI",()=>{it("adds the item itself to the workspace",async()=>{const e=document.createElement("div");await atom.workspace.open(e);expect(atom.workspace.getActivePaneItem()).toBe(e)});describe("when the active pane already contains the item",()=>{it("activates the item",async()=>{const e=document.createElement("div");await atom.workspace.open(e);await atom.workspace.open();expect(atom.workspace.getActivePaneItem()).not.toBe(e);expect(atom.workspace.getActivePane().getItems().length).toBe(2);await atom.workspace.open(e);expect(atom.workspace.getActivePaneItem()).toBe(e);expect(atom.workspace.getActivePane().getItems().length).toBe(2)})});describe("when the item already exists in another pane",()=>{it("rejects the promise",async()=>{const e=document.createElement("div");await atom.workspace.open(e);await atom.workspace.open(null,{split:"right"});expect(atom.workspace.getActivePaneItem()).not.toBe(e);expect(atom.workspace.getActivePane().getItems().length).toBe(1);let t;try{await atom.workspace.open(e)}catch(e){t=e}expect(t.message).toMatch(/The workspace can only contain one instance of item/)})})});describe("when the 'split' option is set",()=>{describe("when the 'split' option is 'left'",()=>{it("opens the editor in the leftmost pane of the current pane axis",()=>{const e=I.getActivePane();const t=e.splitRight();expect(I.getActivePane()).toBe(t);let a=null;waitsForPromise(()=>I.open("a",{split:"left"}).then(e=>{a=e}));runs(()=>{expect(I.getActivePane()).toBe(e);expect(e.items).toEqual([a]);expect(t.items).toEqual([])});waitsForPromise(()=>{t.focus();return I.open("a",{split:"left"}).then(e=>{a=e})});runs(()=>{expect(I.getActivePane()).toBe(e);expect(e.items).toEqual([a]);expect(t.items).toEqual([])})})});describe("when a pane axis is the leftmost sibling of the current pane",()=>{it("opens the new item in the current pane",()=>{let t=null;const e=I.getActivePane();const a=e.splitLeft();a.splitDown();e.activate();expect(I.getActivePane()).toBe(e);waitsForPromise(()=>I.open("a",{split:"left"}).then(e=>{t=e}));runs(()=>{expect(I.getActivePane()).toBe(e);expect(e.items).toEqual([t])})})});describe("when the 'split' option is 'right'",()=>{it("opens the editor in the rightmost pane of the current pane axis",()=>{let t=null;const a=I.getActivePane();let e=null;waitsForPromise(()=>I.open("a",{split:"right"}).then(e=>{t=e}));runs(()=>{e=I.getPanes().filter(e=>e!==a)[0];expect(I.getActivePane()).toBe(e);expect(a.items).toEqual([]);expect(e.items).toEqual([t])});waitsForPromise(()=>{a.focus();return I.open("a",{split:"right"}).then(e=>{t=e})});runs(()=>{expect(I.getActivePane()).toBe(e);expect(a.items).toEqual([]);expect(e.items).toEqual([t])})});describe("when a pane axis is the rightmost sibling of the current pane",()=>{it("opens the new item in a new pane split to the right of the current pane",()=>{let t=null;const a=I.getActivePane();const e=a.splitRight();e.splitDown();a.activate();expect(I.getActivePane()).toBe(a);let o=null;waitsForPromise(()=>I.open("a",{split:"right"}).then(e=>{t=e}));runs(()=>{o=I.getPanes().filter(e=>e!==a)[0];expect(I.getActivePane()).toBe(o);expect(o.items).toEqual([t]);expect(I.getCenter().paneContainer.root.children[0]).toBe(a);expect(I.getCenter().paneContainer.root.children[1]).toBe(o)})})})});describe("when the 'split' option is 'up'",()=>{it("opens the editor in the topmost pane of the current pane axis",()=>{const e=I.getActivePane();const t=e.splitDown();expect(I.getActivePane()).toBe(t);let a=null;waitsForPromise(()=>I.open("a",{split:"up"}).then(e=>{a=e}));runs(()=>{expect(I.getActivePane()).toBe(e);expect(e.items).toEqual([a]);expect(t.items).toEqual([])});waitsForPromise(()=>{t.focus();return I.open("a",{split:"up"}).then(e=>{a=e})});runs(()=>{expect(I.getActivePane()).toBe(e);expect(e.items).toEqual([a]);expect(t.items).toEqual([])})})});describe("when a pane axis is the topmost sibling of the current pane",()=>{it("opens the new item in the current pane",()=>{let t=null;const e=I.getActivePane();const a=e.splitUp();a.splitRight();e.activate();expect(I.getActivePane()).toBe(e);waitsForPromise(()=>I.open("a",{split:"up"}).then(e=>{t=e}));runs(()=>{expect(I.getActivePane()).toBe(e);expect(e.items).toEqual([t])})})});describe("when the 'split' option is 'down'",()=>{it("opens the editor in the bottommost pane of the current pane axis",()=>{let t=null;const a=I.getActivePane();let e=null;waitsForPromise(()=>I.open("a",{split:"down"}).then(e=>{t=e}));runs(()=>{e=I.getPanes().filter(e=>e!==a)[0];expect(I.getActivePane()).toBe(e);expect(a.items).toEqual([]);expect(e.items).toEqual([t])});waitsForPromise(()=>{a.focus();return I.open("a",{split:"down"}).then(e=>{t=e})});runs(()=>{expect(I.getActivePane()).toBe(e);expect(a.items).toEqual([]);expect(e.items).toEqual([t])})});describe("when a pane axis is the bottommost sibling of the current pane",()=>{it("opens the new item in a new pane split to the bottom of the current pane",()=>{let t=null;const a=I.getActivePane();const e=a.splitDown();a.activate();expect(I.getActivePane()).toBe(a);let o=null;waitsForPromise(()=>I.open("a",{split:"down"}).then(e=>{t=e}));runs(()=>{o=I.getPanes().filter(e=>e!==a)[0];expect(I.getActivePane()).toBe(o);expect(o.items).toEqual([t]);expect(I.getCenter().paneContainer.root.children[0]).toBe(a);expect(I.getCenter().paneContainer.root.children[1]).toBe(e)})})})})});describe("when an initialLine and initialColumn are specified",()=>{it("moves the cursor to the indicated location",()=>{waitsForPromise(()=>I.open("a",{initialLine:1,initialColumn:5}));runs(()=>expect(I.getActiveTextEditor().getCursorBufferPosition()).toEqual([1,5]));waitsForPromise(()=>I.open("a",{initialLine:2,initialColumn:4}));runs(()=>expect(I.getActiveTextEditor().getCursorBufferPosition()).toEqual([2,4]));waitsForPromise(()=>I.open("a",{initialLine:0,initialColumn:0}));runs(()=>expect(I.getActiveTextEditor().getCursorBufferPosition()).toEqual([0,0]));waitsForPromise(()=>I.open("a",{initialLine:NaN,initialColumn:4}));runs(()=>expect(I.getActiveTextEditor().getCursorBufferPosition()).toEqual([0,4]));waitsForPromise(()=>I.open("a",{initialLine:2,initialColumn:NaN}));runs(()=>expect(I.getActiveTextEditor().getCursorBufferPosition()).toEqual([2,0]));waitsForPromise(()=>I.open("a",{initialLine:Infinity,initialColumn:Infinity}));runs(()=>expect(I.getActiveTextEditor().getCursorBufferPosition()).toEqual([2,11]))});it("unfolds the fold containing the line",async()=>{let e;await I.open("../sample-with-many-folds.js");e=I.getActiveTextEditor();e.foldBufferRow(2);expect(e.isFoldedAtBufferRow(2)).toBe(true);expect(e.isFoldedAtBufferRow(3)).toBe(true);await I.open("../sample-with-many-folds.js",{initialLine:2});expect(e.isFoldedAtBufferRow(2)).toBe(false);expect(e.isFoldedAtBufferRow(3)).toBe(false)})});describe("when the file size is over the limit defined in `core.warnOnLargeFileLimit`",()=>{const e=async(e,t)=>{spyOn(fs,"getSizeSync").andReturn(e*1048577);let a=1;atom.applicationDelegate.confirm.andCallFake((e,t)=>t(a));let o=await I.open("sample.js");if(t){expect(o).toBeUndefined();expect(atom.applicationDelegate.confirm).toHaveBeenCalled();atom.applicationDelegate.confirm.reset();a=0;o=await I.open("sample.js");expect(atom.applicationDelegate.confirm).toHaveBeenCalled()}else{expect(o).not.toBeUndefined()}};it("prompts before opening the file",async()=>{atom.config.set("core.warnOnLargeFileLimit",20);await e(20,true)});it("doesn't prompt on files below the limit",async()=>{atom.config.set("core.warnOnLargeFileLimit",30);await e(20,false)});it("prompts for smaller files with a lower limit",async()=>{atom.config.set("core.warnOnLargeFileLimit",5);await e(10,true)})});describe("when passed a path that matches a custom opener",()=>{it("returns the resource returned by the custom opener",()=>{const e=(e,t)=>{if(e!=null?e.match(/\.foo/):undefined){return{foo:e,options:t}}};const t=e=>{if(e!=null?e.match(/^bar:\/\//):undefined){return{bar:e}}};I.addOpener(e);I.addOpener(t);waitsForPromise(()=>{const t=atom.project.getDirectories()[0].resolve("a.foo");return I.open(t,{hey:"there"}).then(e=>expect(e).toEqual({foo:t,options:{hey:"there"}}))});waitsForPromise(()=>I.open("bar://baz").then(e=>expect(e).toEqual({bar:"bar://baz"})))})});it("adds the file to the application's recent documents list",()=>{if(process.platform!=="darwin"){return}spyOn(atom.applicationDelegate,"addRecentDocument");waitsForPromise(()=>I.open());runs(()=>expect(atom.applicationDelegate.addRecentDocument).not.toHaveBeenCalled());waitsForPromise(()=>I.open("something://a/url"));runs(()=>expect(atom.applicationDelegate.addRecentDocument).not.toHaveBeenCalled());waitsForPromise(()=>I.open(__filename));runs(()=>expect(atom.applicationDelegate.addRecentDocument).toHaveBeenCalledWith(__filename))});it("notifies ::onDidAddTextEditor observers",()=>{const e=require.resolve("./fixtures/dir/a");const t=jasmine.createSpy("newEditorHandler");I.onDidAddTextEditor(t);let a=null;waitsForPromise(()=>I.open(e).then(e=>{a=e}));runs(()=>expect(t.argsForCall[0][0].textEditor).toBe(a))});describe("when there is an error opening the file",()=>{let t=null;beforeEach(()=>atom.notifications.onDidAddNotification(t=jasmine.createSpy()));describe("when a file does not exist",()=>{it("creates an empty buffer for the specified path",()=>{waitsForPromise(()=>I.open("not-a-file.md"));runs(()=>{const e=I.getActiveTextEditor();expect(t).not.toHaveBeenCalled();expect(e.getPath()).toContain("not-a-file.md")})})});describe("when the user does not have access to the file",()=>{beforeEach(()=>spyOn(fs,"openSync").andCallFake(e=>{const t=new Error(`EACCES, permission denied '${e}'`);t.path=e;t.code="EACCES";throw t}));it("creates a notification",()=>{waitsForPromise(()=>I.open("file1"));runs(()=>{expect(t).toHaveBeenCalled();const e=t.mostRecentCall.args[0];expect(e.getType()).toBe("warning");expect(e.getMessage()).toContain("Permission denied");expect(e.getMessage()).toContain("file1")})})});describe("when the the operation is not permitted",()=>{beforeEach(()=>spyOn(fs,"openSync").andCallFake(e=>{const t=new Error(`EPERM, operation not permitted '${e}'`);t.path=e;t.code="EPERM";throw t}));it("creates a notification",()=>{waitsForPromise(()=>I.open("file1"));runs(()=>{expect(t).toHaveBeenCalled();const e=t.mostRecentCall.args[0];expect(e.getType()).toBe("warning");expect(e.getMessage()).toContain("Unable to open");expect(e.getMessage()).toContain("file1")})})});describe("when the the file is already open in windows",()=>{beforeEach(()=>spyOn(fs,"openSync").andCallFake(e=>{const t=new Error(`EBUSY, resource busy or locked '${e}'`);t.path=e;t.code="EBUSY";throw t}));it("creates a notification",()=>{waitsForPromise(()=>I.open("file1"));runs(()=>{expect(t).toHaveBeenCalled();const e=t.mostRecentCall.args[0];expect(e.getType()).toBe("warning");expect(e.getMessage()).toContain("Unable to open");expect(e.getMessage()).toContain("file1")})})});describe("when there is an unhandled error",()=>{beforeEach(()=>spyOn(fs,"openSync").andCallFake(e=>{throw new Error("I dont even know what is happening right now!!")}));it("rejects the promise",()=>{waitsFor(t=>{I.open("file1").catch(e=>{expect(e.message).toBe("I dont even know what is happening right now!!");t()})})})})});describe("when the file is already open in pending state",()=>{it("should terminate the pending state",()=>{let t=null;let a=null;waitsForPromise(()=>atom.workspace.open("sample.js",{pending:true}).then(e=>{t=e;a=atom.workspace.getActivePane()}));runs(()=>expect(a.getPendingItem()).toEqual(t));waitsForPromise(()=>atom.workspace.open("sample.js"));runs(()=>expect(a.getPendingItem()).toBeNull())})});describe("when opening will switch from a pending tab to a permanent tab",()=>{it("keeps the pending tab open",()=>{let t=null;let a=null;waitsForPromise(()=>atom.workspace.open("sample.txt").then(e=>{t=e}));waitsForPromise(()=>atom.workspace.open("sample2.txt",{pending:true}).then(e=>{a=e}));runs(()=>{const e=atom.workspace.getActivePane();e.activateItem(t);expect(e.getItems().length).toBe(2);expect(e.getItems()).toEqual([t,a])})})});describe("when replacing a pending item which is the last item in a second pane",()=>{it("does not destroy the pane even if core.destroyEmptyPanes is on",()=>{atom.config.set("core.destroyEmptyPanes",true);let t=null;let a=null;const e=atom.workspace.getActivePane();let o=null;waitsForPromise(()=>atom.workspace.open("sample.js",{pending:true,split:"right"}).then(e=>{t=e;o=atom.workspace.getActivePane();spyOn(o,"destroy").andCallThrough()}));runs(()=>{expect(e).not.toBe(o);expect(atom.workspace.getActivePane()).toBe(o);expect(atom.workspace.getActivePane().getItems().length).toBe(1);expect(o.getPendingItem()).toBe(t)});waitsForPromise(()=>atom.workspace.open("sample.txt",{pending:true}).then(e=>{a=e}));runs(()=>{expect(o.getPendingItem()).toBe(a);expect(o.destroy.callCount).toBe(0)})})});describe("when opening an editor with a buffer that isn't part of the project",()=>{it("adds the buffer to the project",async()=>{const e=new TextBuffer;const t=new TextEditor({buffer:e});await atom.workspace.open(t);expect(atom.project.getBuffers().map(e=>e.id)).toContain(e.id);expect(e.getLanguageMode().getLanguageId()).toBe("text.plain.null-grammar")})})});describe("finding items in the workspace",()=>{it("can identify the pane and pane container for a given item or URI",()=>{const e="atom://test-pane-for-item";const t={element:document.createElement("div"),getURI(){return e}};atom.workspace.getActivePane().activateItem(t);expect(atom.workspace.paneForItem(t)).toBe(atom.workspace.getCenter().getActivePane());expect(atom.workspace.paneContainerForItem(t)).toBe(atom.workspace.getCenter());expect(atom.workspace.paneForURI(e)).toBe(atom.workspace.getCenter().getActivePane());expect(atom.workspace.paneContainerForURI(e)).toBe(atom.workspace.getCenter());atom.workspace.getActivePane().destroyActiveItem();atom.workspace.getLeftDock().getActivePane().activateItem(t);expect(atom.workspace.paneForItem(t)).toBe(atom.workspace.getLeftDock().getActivePane());expect(atom.workspace.paneContainerForItem(t)).toBe(atom.workspace.getLeftDock());expect(atom.workspace.paneForURI(e)).toBe(atom.workspace.getLeftDock().getActivePane());expect(atom.workspace.paneContainerForURI(e)).toBe(atom.workspace.getLeftDock())})});describe("::hide(uri)",()=>{let o;const n="atom://hide-test";beforeEach(()=>{const e=document.createElement("div");o={getTitle:()=>"Item",getElement:()=>e,getURI:()=>n}});describe("when called with a URI",()=>{it("if the item for the given URI is in the center, removes it",()=>{const e=atom.workspace.getActivePane();e.addItem(o);atom.workspace.hide(n);expect(e.getItems().length).toBe(0)});it("if the item for the given URI is in a dock, hides the dock",()=>{const e=atom.workspace.getLeftDock();const t=e.getActivePane();t.addItem(o);e.activate();expect(e.isVisible()).toBe(true);const a=atom.workspace.hide(n);expect(a).toBe(true);expect(e.isVisible()).toBe(false)})});describe("when called with an item",()=>{it("if the item is in the center, removes it",()=>{const e=atom.workspace.getActivePane();e.addItem(o);atom.workspace.hide(o);expect(e.getItems().length).toBe(0)});it("if the item is in a dock, hides the dock",()=>{const e=atom.workspace.getLeftDock();const t=e.getActivePane();t.addItem(o);e.activate();expect(e.isVisible()).toBe(true);const a=atom.workspace.hide(o);expect(a).toBe(true);expect(e.isVisible()).toBe(false)})})});describe("::toggle(itemOrUri)",()=>{describe("when the location resolves to a dock",()=>{it("adds or shows the item and its dock if it is not currently visible, and otherwise hides the containing dock",async()=>{const e={getDefaultLocation(){return"left"},getElement(){return this.element=document.createElement("div")}};const t={getDefaultLocation(){return"left"},getElement(){return this.element=document.createElement("div")}};const a=I.getLeftDock();expect(a.isVisible()).toBe(false);await I.toggle(e);expect(a.isVisible()).toBe(true);expect(a.getActivePaneItem()).toBe(e);await I.toggle(t);expect(a.isVisible()).toBe(true);expect(a.getActivePaneItem()).toBe(t);await I.toggle(e);expect(a.isVisible()).toBe(true);expect(a.getActivePaneItem()).toBe(e);await I.toggle(e);expect(a.isVisible()).toBe(false);expect(a.getActivePaneItem()).toBe(e);await I.toggle(t);expect(a.isVisible()).toBe(true);expect(a.getActivePaneItem()).toBe(t)})});describe("when the location resolves to the center",()=>{it("adds or shows the item if it is not currently the active pane item, and otherwise removes the item",async()=>{const e={getDefaultLocation(){return"center"},getElement(){return this.element=document.createElement("div")}};const t={getDefaultLocation(){return"center"},getElement(){return this.element=document.createElement("div")}};expect(I.getActivePaneItem()).toBeUndefined();await I.toggle(e);expect(I.getActivePaneItem()).toBe(e);await I.toggle(t);expect(I.getActivePaneItem()).toBe(t);await I.toggle(e);expect(I.getActivePaneItem()).toBe(e);await I.toggle(e);expect(I.paneForItem(e)).toBeUndefined();expect(I.getActivePaneItem()).toBe(t)})})});describe("active pane containers",()=>{it("maintains the active pane and item globally across active pane containers",()=>{const e=I.getLeftDock();const t={element:document.createElement("div")};const a={element:document.createElement("div")};const o={element:document.createElement("div")};const n=e.getActivePane();n.addItems([t,a]);const i=n.splitDown({items:[o]});const s=I.getRightDock();const c={element:document.createElement("div")};const r={element:document.createElement("div")};const p={element:document.createElement("div")};const l=s.getActivePane();l.addItems([c,r]);const m=l.splitDown({items:[p]});const d=I.getBottomDock();const g={element:document.createElement("div")};const h={element:document.createElement("div")};const u={element:document.createElement("div")};const x=d.getActivePane();x.addItems([g,h]);const w=x.splitDown({items:[u]});const f=I.getCenter();const v={element:document.createElement("div")};const P={element:document.createElement("div")};const k={element:document.createElement("div")};const B=f.getActivePane();B.addItems([v,P]);const y=B.splitDown({items:[k]});const b=[];const E=[];const C=[];I.onDidChangeActivePaneContainer(e=>b.push(e));I.onDidChangeActivePane(e=>E.push(e));I.onDidChangeActivePaneItem(e=>C.push(e));function A(){b.length=0;E.length=0;C.length=0}expect(I.getActivePaneContainer()).toBe(f);expect(I.getActivePane()).toBe(y);expect(I.getActivePaneItem()).toBe(k);e.activate();expect(I.getActivePaneContainer()).toBe(e);expect(I.getActivePane()).toBe(i);expect(I.getActivePaneItem()).toBe(o);expect(b).toEqual([e]);expect(E).toEqual([i]);expect(C).toEqual([o]);A();n.activate();n.activate();expect(I.getActivePaneContainer()).toBe(e);expect(I.getActivePane()).toBe(n);expect(I.getActivePaneItem()).toBe(t);expect(b).toEqual([]);expect(E).toEqual([n]);expect(C).toEqual([t]);A();n.activateItem(a);n.activateItem(a);expect(I.getActivePaneContainer()).toBe(e);expect(I.getActivePane()).toBe(n);expect(I.getActivePaneItem()).toBe(a);expect(b).toEqual([]);expect(E).toEqual([]);expect(C).toEqual([a]);A();expect(s.getActivePane()).toBe(m);l.activate();l.activate();expect(I.getActivePaneContainer()).toBe(s);expect(I.getActivePane()).toBe(l);expect(I.getActivePaneItem()).toBe(c);expect(b).toEqual([s]);expect(E).toEqual([l]);expect(C).toEqual([c]);A();l.activateItem(r);expect(I.getActivePaneContainer()).toBe(s);expect(I.getActivePane()).toBe(l);expect(I.getActivePaneItem()).toBe(r);expect(b).toEqual([]);expect(E).toEqual([]);expect(C).toEqual([r]);A();expect(d.getActivePane()).toBe(w);w.activate();w.activate();expect(I.getActivePaneContainer()).toBe(d);expect(I.getActivePane()).toBe(w);expect(I.getActivePaneItem()).toBe(u);expect(b).toEqual([d]);expect(E).toEqual([w]);expect(C).toEqual([u]);A();f.activate();f.activate();expect(I.getActivePaneContainer()).toBe(f);expect(I.getActivePane()).toBe(y);expect(I.getActivePaneItem()).toBe(k);expect(b).toEqual([f]);expect(E).toEqual([y]);expect(C).toEqual([k]);A();B.activate();B.activate();expect(I.getActivePaneContainer()).toBe(f);expect(I.getActivePane()).toBe(B);expect(I.getActivePaneItem()).toBe(v);expect(b).toEqual([]);expect(E).toEqual([B]);expect(C).toEqual([v])})});describe("::onDidStopChangingActivePaneItem()",()=>{it("invokes observers when the active item of the active pane stops changing",()=>{const e=atom.workspace.getCenter().getActivePane();const t=e.splitRight({items:[document.createElement("div"),document.createElement("div")]});atom.workspace.getLeftDock().getActivePane().addItem(document.createElement("div"));const a=[];atom.workspace.onDidStopChangingActivePaneItem(e=>a.push(e));t.activateNextItem();t.activateNextItem();e.activate();atom.workspace.getLeftDock().activate();advanceClock(100);expect(a).toEqual([atom.workspace.getLeftDock().getActivePaneItem()])})});describe("the grammar-used hook",()=>{it("fires when opening a file or changing the grammar of an open file",async()=>{await atom.packages.activatePackage("language-javascript");await atom.packages.activatePackage("language-coffee-script");const e=jasmine.createSpy("observeTextEditors");const t=jasmine.createSpy("javascript");const a=jasmine.createSpy("coffeescript");atom.packages.triggerDeferredActivationHooks();atom.packages.onDidTriggerActivationHook("language-javascript:grammar-used",()=>{atom.workspace.observeTextEditors(e);t()});atom.packages.onDidTriggerActivationHook("language-coffee-script:grammar-used",a);expect(t).not.toHaveBeenCalled();expect(e).not.toHaveBeenCalled();const o=await atom.workspace.open("sample.js",{autoIndent:false});expect(t).toHaveBeenCalled();expect(e.callCount).toBe(1);expect(a).not.toHaveBeenCalled();atom.grammars.assignLanguageMode(o,"source.coffee");expect(a).toHaveBeenCalled()})});describe("the root-scope-used hook",()=>{it("fires when opening a file or changing the grammar of an open file",async()=>{await atom.packages.activatePackage("language-javascript");await atom.packages.activatePackage("language-coffee-script");const e=jasmine.createSpy("observeTextEditors");const t=jasmine.createSpy("javascript");const a=jasmine.createSpy("coffeescript");atom.packages.triggerDeferredActivationHooks();atom.packages.onDidTriggerActivationHook("source.js:root-scope-used",()=>{atom.workspace.observeTextEditors(e);t()});atom.packages.onDidTriggerActivationHook("source.coffee:root-scope-used",a);expect(t).not.toHaveBeenCalled();expect(e).not.toHaveBeenCalled();const o=await atom.workspace.open("sample.js",{autoIndent:false});expect(t).toHaveBeenCalled();expect(e.callCount).toBe(1);expect(a).not.toHaveBeenCalled();atom.grammars.assignLanguageMode(o,"source.coffee");expect(a).toHaveBeenCalled()})});describe("::reopenItem()",()=>{it("opens the uri associated with the last closed pane that isn't currently open",()=>{const e=I.getActivePane();waitsForPromise(()=>I.open("a").then(()=>I.open("b").then(()=>I.open("file1").then(()=>I.open()))));runs(()=>{expect(I.getActivePaneItem().getURI()).toBeUndefined();e.destroyActiveItem()});waitsForPromise(()=>I.reopenItem());const t=atom.project.getDirectories()[0];expect(t).toBeDefined();runs(()=>{expect(I.getActivePaneItem().getURI()).not.toBeUndefined();expect(I.getActivePaneItem().getURI()).toBe(t.resolve("file1"));e.destroyActiveItem();expect(I.getActivePaneItem().getURI()).toBe(t.resolve("b"));e.destroyActiveItem();expect(I.getActivePaneItem().getURI()).toBe(t.resolve("a"));e.destroyActiveItem();expect(I.getActivePaneItem()).toBeUndefined()});waitsForPromise(()=>I.reopenItem());runs(()=>expect(I.getActivePaneItem().getURI()).toBe(t.resolve("a")));waitsForPromise(()=>I.open("b"));runs(()=>expect(I.getActivePaneItem().getURI()).toBe(t.resolve("b")));waitsForPromise(()=>I.reopenItem());runs(()=>expect(I.getActivePaneItem().getURI()).toBe(t.resolve("file1")))})});describe("::increase/decreaseFontSize()",()=>{it("increases/decreases the font size without going below 1",()=>{atom.config.set("editor.fontSize",1);I.increaseFontSize();expect(atom.config.get("editor.fontSize")).toBe(2);I.increaseFontSize();expect(atom.config.get("editor.fontSize")).toBe(3);I.decreaseFontSize();expect(atom.config.get("editor.fontSize")).toBe(2);I.decreaseFontSize();expect(atom.config.get("editor.fontSize")).toBe(1);I.decreaseFontSize();expect(atom.config.get("editor.fontSize")).toBe(1)})});describe("::resetFontSize()",()=>{it("resets the font size to the window's default font size",()=>{const e=atom.config.get("editor.defaultFontSize");I.increaseFontSize();expect(atom.config.get("editor.fontSize")).toBe(e+1);I.resetFontSize();expect(atom.config.get("editor.fontSize")).toBe(e);I.decreaseFontSize();expect(atom.config.get("editor.fontSize")).toBe(e-1);I.resetFontSize();expect(atom.config.get("editor.fontSize")).toBe(e)});it("resets the font size the default font size when it is changed",()=>{const e=atom.config.get("editor.defaultFontSize");I.increaseFontSize();expect(atom.config.get("editor.fontSize")).toBe(e+1);atom.config.set("editor.defaultFontSize",14);I.resetFontSize();expect(atom.config.get("editor.fontSize")).toBe(14)});it("does nothing if the font size has not been changed",()=>{const e=atom.config.get("editor.fontSize");I.resetFontSize();expect(atom.config.get("editor.fontSize")).toBe(e)});it("resets the font size when the editor's font size changes",()=>{const e=atom.config.get("editor.fontSize");atom.config.set("editor.fontSize",e+1);I.resetFontSize();expect(atom.config.get("editor.fontSize")).toBe(e);atom.config.set("editor.fontSize",e-1);I.resetFontSize();expect(atom.config.get("editor.fontSize")).toBe(e)})});describe("::openLicense()",()=>{it("opens the license as plain-text in a buffer",()=>{waitsForPromise(()=>I.openLicense());runs(()=>expect(I.getActivePaneItem().getText()).toMatch(/Copyright/))})});describe("::isTextEditor(obj)",()=>{it("returns true when the passed object is an instance of `TextEditor`",()=>{expect(I.isTextEditor(new TextEditor)).toBe(true);expect(I.isTextEditor({getText:()=>null})).toBe(false);expect(I.isTextEditor(null)).toBe(false);expect(I.isTextEditor(undefined)).toBe(false)})});describe("::getActiveTextEditor()",()=>{describe("when the workspace center's active pane item is a text editor",()=>{describe("when the workspace center has focus",()=>{it("returns the text editor",()=>{const e=I.getCenter();const t=new TextEditor;e.getActivePane().activateItem(t);e.activate();expect(I.getActiveTextEditor()).toBe(t)})});describe("when a dock has focus",()=>{it("returns the text editor",()=>{const e=I.getCenter();const t=new TextEditor;e.getActivePane().activateItem(t);I.getLeftDock().activate();expect(I.getActiveTextEditor()).toBe(t)})})});describe("when the workspace center's active pane item is not a text editor",()=>{it("returns undefined",()=>{const e=I.getCenter();const t=document.createElement("div");e.getActivePane().activateItem(t);expect(I.getActiveTextEditor()).toBeUndefined()})})});describe("::observeTextEditors()",()=>{it("invokes the observer with current and future text editors",()=>{const t=[];waitsForPromise(()=>I.open());waitsForPromise(()=>I.open());waitsForPromise(()=>I.openLicense());runs(()=>I.observeTextEditors(e=>t.push(e)));waitsForPromise(()=>I.open());expect(t).toEqual(I.getTextEditors())})});describe("::observeActiveTextEditor()",()=>{it("invokes the observer with current active text editor and each time a different text editor becomes active",()=>{const e=I.getCenter().getActivePane();const t=[];const a=new TextEditor;const o=new TextEditor;e.activateItem(a);e.activateItem(o);I.observeActiveTextEditor(e=>t.push(e));const n=new TextEditor;e.activateItem(n);expect(t).toEqual([o,n])})});describe("::onDidChangeActiveTextEditor()",()=>{let a,o,n;beforeEach(()=>{a=I.getCenter();o=a.getActivePane();n=[]});it("invokes the observer when a text editor becomes the workspace center's active pane item while a dock has focus",()=>{I.onDidChangeActiveTextEditor(e=>n.push(e));const e=I.getLeftDock();e.activate();expect(atom.workspace.getActivePaneContainer()).toBe(e);const t=new TextEditor;a.getActivePane().activateItem(t);expect(atom.workspace.getActivePaneContainer()).toBe(e);expect(n).toEqual([t])});it("invokes the observer when the last text editor is closed",()=>{const e=new TextEditor;o.activateItem(e);I.onDidChangeActiveTextEditor(e=>n.push(e));o.destroyItem(e);expect(n).toEqual([undefined])});it("invokes the observer when the workspace center's active pane item changes from an editor item to a non-editor item",()=>{const e=new TextEditor;const t=document.createElement("div");o.activateItem(e);I.onDidChangeActiveTextEditor(e=>n.push(e));o.activateItem(t);expect(n).toEqual([undefined])});it("does not invoke the observer when the workspace center's active pane item changes from a non-editor item to another non-editor item",()=>{I.onDidChangeActiveTextEditor(e=>n.push(e));const e=document.createElement("div");const t=document.createElement("div");o.activateItem(e);o.activateItem(t);expect(n).toEqual([])});it("invokes the observer when closing the one and only text editor after deserialization",async()=>{o.activateItem(new TextEditor);i();runs(()=>{I.onDidChangeActiveTextEditor(e=>n.push(e));I.closeActivePaneItemOrEmptyPaneOrWindow();expect(n).toEqual([undefined])})})});describe("when an editor is destroyed",()=>{it("removes the editor",async()=>{const e=await I.open("a");expect(I.getTextEditors()).toHaveLength(1);e.destroy();expect(I.getTextEditors()).toHaveLength(0)})});describe("when an editor is copied because its pane is split",()=>{it("sets up the new editor to be configured by the text editor registry",async()=>{await atom.packages.activatePackage("language-javascript");const e=await I.open("a");atom.grammars.assignLanguageMode(e,"source.js");expect(e.getGrammar().name).toBe("JavaScript");I.getActivePane().splitRight({copyActiveItem:true});const t=I.getActiveTextEditor();expect(t).not.toBe(e);expect(t.getGrammar().name).toBe("JavaScript")})});it("stores the active grammars used by all the open editors",()=>{waitsForPromise(()=>atom.packages.activatePackage("language-javascript"));waitsForPromise(()=>atom.packages.activatePackage("language-coffee-script"));waitsForPromise(()=>atom.packages.activatePackage("language-todo"));waitsForPromise(()=>atom.workspace.open("sample.coffee"));runs(()=>{atom.workspace.getActiveTextEditor().setText(dedent`
        i = /test/; #FIXME\
      `);const e=new AtomEnvironment({applicationDelegate:atom.applicationDelegate});e.initialize({window:document.createElement("div"),document:Object.assign(document.createElement("div"),{body:document.createElement("div"),head:document.createElement("div")})});e.packages.loadPackage("language-javascript");e.packages.loadPackage("language-coffee-script");e.packages.loadPackage("language-todo");e.project.deserialize(atom.project.serialize());e.workspace.deserialize(atom.workspace.serialize(),e.deserializers);expect(e.grammars.getGrammars({includeTreeSitter:true}).map(e=>e.scopeName).sort()).toEqual(["source.coffee","source.js","source.js","source.js.regexp","source.js.regexp","source.js.regexp.replacement","source.jsdoc","source.jsdoc","source.litcoffee","text.plain.null-grammar","text.todo"]);e.destroy()})});describe("document.title",()=>{describe("when there is no item open",()=>{it("sets the title to the project path",()=>expect(document.title).toMatch(escapeStringRegex(fs.tildify(atom.project.getPaths()[0]))));it("sets the title to 'untitled' if there is no project path",()=>{atom.project.setPaths([]);expect(document.title).toMatch(/^untitled/)})});describe("when the active pane item's path is not inside a project path",()=>{beforeEach(()=>waitsForPromise(()=>atom.workspace.open("b").then(()=>atom.project.setPaths([]))));it("sets the title to the pane item's title plus the item's path",()=>{const e=atom.workspace.getActivePaneItem();const t=fs.tildify(escapeStringRegex(path.dirname(e.getPath())));expect(document.title).toMatch(new RegExp(`^${e.getTitle()} \\u2014 ${t}`))});describe("when the title of the active pane item changes",()=>{it("updates the window title based on the item's new title",()=>{const e=atom.workspace.getActivePaneItem();e.buffer.setPath(path.join(temp.dir,"hi"));const t=fs.tildify(escapeStringRegex(path.dirname(e.getPath())));expect(document.title).toMatch(new RegExp(`^${e.getTitle()} \\u2014 ${t}`))})});describe("when the active pane's item changes",()=>{it("updates the title to the new item's title plus the project path",()=>{atom.workspace.getActivePane().activateNextItem();const e=atom.workspace.getActivePaneItem();const t=fs.tildify(escapeStringRegex(path.dirname(e.getPath())));expect(document.title).toMatch(new RegExp(`^${e.getTitle()} \\u2014 ${t}`))})});describe("when an inactive pane's item changes",()=>{it("does not update the title",()=>{const e=atom.workspace.getActivePane();e.splitRight();const t=document.title;e.activateNextItem();expect(document.title).toBe(t)})})});describe("when the active pane item is inside a project path",()=>{beforeEach(()=>waitsForPromise(()=>atom.workspace.open("b")));describe("when there is an active pane item",()=>{it("sets the title to the pane item's title plus the project path",()=>{const e=atom.workspace.getActivePaneItem();const t=fs.tildify(escapeStringRegex(atom.project.getPaths()[0]));expect(document.title).toMatch(new RegExp(`^${e.getTitle()} \\u2014 ${t}`))})});describe("when the title of the active pane item changes",()=>{it("updates the window title based on the item's new title",()=>{const e=atom.workspace.getActivePaneItem();e.buffer.setPath(path.join(atom.project.getPaths()[0],"hi"));const t=fs.tildify(escapeStringRegex(atom.project.getPaths()[0]));expect(document.title).toMatch(new RegExp(`^${e.getTitle()} \\u2014 ${t}`))})});describe("when the active pane's item changes",()=>{it("updates the title to the new item's title plus the project path",()=>{atom.workspace.getActivePane().activateNextItem();const e=atom.workspace.getActivePaneItem();const t=fs.tildify(escapeStringRegex(atom.project.getPaths()[0]));expect(document.title).toMatch(new RegExp(`^${e.getTitle()} \\u2014 ${t}`))})});describe("when the last pane item is removed",()=>{it("updates the title to the project's first path",()=>{atom.workspace.getActivePane().destroy();expect(atom.workspace.getActivePaneItem()).toBeUndefined();expect(document.title).toMatch(escapeStringRegex(fs.tildify(atom.project.getPaths()[0])))})});describe("when an inactive pane's item changes",()=>{it("does not update the title",()=>{const e=atom.workspace.getActivePane();e.splitRight();const t=document.title;e.activateNextItem();expect(document.title).toBe(t)})})});describe("when the workspace is deserialized",()=>{beforeEach(()=>waitsForPromise(()=>atom.workspace.open("a")));it("updates the title to contain the project's path",()=>{document.title=null;const a=new AtomEnvironment({applicationDelegate:atom.applicationDelegate});a.initialize({window:document.createElement("div"),document:Object.assign(document.createElement("div"),{body:document.createElement("div"),head:document.createElement("div")})});waitsForPromise(()=>a.project.deserialize(atom.project.serialize()));runs(()=>{a.workspace.deserialize(atom.workspace.serialize(),a.deserializers);const e=a.workspace.getActivePaneItem();const t=fs.tildify(escapeStringRegex(atom.project.getPaths()[0]));expect(document.title).toMatch(new RegExp(`^${e.getLongTitle()} \\u2014 ${t}`));a.destroy()})})})});describe("document edited status",()=>{let e;let t;beforeEach(()=>{waitsForPromise(()=>atom.workspace.open("a"));waitsForPromise(()=>atom.workspace.open("b"));runs(()=>{[e,t]=atom.workspace.getPaneItems()})});it("calls setDocumentEdited when the active item changes",()=>{expect(atom.workspace.getActivePaneItem()).toBe(t);e.insertText("a");expect(e.isModified()).toBe(true);atom.workspace.getActivePane().activateNextItem();expect(a).toHaveBeenCalledWith(true)});it("calls atom.setDocumentEdited when the active item's modified status changes",()=>{expect(atom.workspace.getActivePaneItem()).toBe(t);t.insertText("a");advanceClock(t.getBuffer().getStoppedChangingDelay());expect(t.isModified()).toBe(true);expect(a).toHaveBeenCalledWith(true);t.undo();advanceClock(t.getBuffer().getStoppedChangingDelay());expect(t.isModified()).toBe(false);expect(a).toHaveBeenCalledWith(false)})});describe("adding panels",()=>{class n{}function i(){this.constructor=i}function e(){this.constructor=i}e.prototype=HTMLElement.prototype;i.prototype=new e;i.__super__=HTMLElement.prototype;i.prototype.initialize=function(e){this.model=e;return this};i.prototype.getModel=function(){return this.model};beforeEach(()=>atom.views.addViewProvider(n,e=>(new i).initialize(e)));describe("::addLeftPanel(model)",()=>{it("adds a panel to the correct panel container",()=>{let e;expect(atom.workspace.getLeftPanels().length).toBe(0);atom.workspace.panelContainers.left.onDidAddPanel(e=jasmine.createSpy());const t=new n;const a=atom.workspace.addLeftPanel({item:t});expect(a).toBeDefined();expect(e).toHaveBeenCalledWith({panel:a,index:0});const o=atom.views.getView(atom.workspace.getLeftPanels()[0].getItem());expect(o instanceof i).toBe(true);expect(o.getModel()).toBe(t)})});describe("::addRightPanel(model)",()=>{it("adds a panel to the correct panel container",()=>{let e;expect(atom.workspace.getRightPanels().length).toBe(0);atom.workspace.panelContainers.right.onDidAddPanel(e=jasmine.createSpy());const t=new n;const a=atom.workspace.addRightPanel({item:t});expect(a).toBeDefined();expect(e).toHaveBeenCalledWith({panel:a,index:0});const o=atom.views.getView(atom.workspace.getRightPanels()[0].getItem());expect(o instanceof i).toBe(true);expect(o.getModel()).toBe(t)})});describe("::addTopPanel(model)",()=>{it("adds a panel to the correct panel container",()=>{let e;expect(atom.workspace.getTopPanels().length).toBe(0);atom.workspace.panelContainers.top.onDidAddPanel(e=jasmine.createSpy());const t=new n;const a=atom.workspace.addTopPanel({item:t});expect(a).toBeDefined();expect(e).toHaveBeenCalledWith({panel:a,index:0});const o=atom.views.getView(atom.workspace.getTopPanels()[0].getItem());expect(o instanceof i).toBe(true);expect(o.getModel()).toBe(t)})});describe("::addBottomPanel(model)",()=>{it("adds a panel to the correct panel container",()=>{let e;expect(atom.workspace.getBottomPanels().length).toBe(0);atom.workspace.panelContainers.bottom.onDidAddPanel(e=jasmine.createSpy());const t=new n;const a=atom.workspace.addBottomPanel({item:t});expect(a).toBeDefined();expect(e).toHaveBeenCalledWith({panel:a,index:0});const o=atom.views.getView(atom.workspace.getBottomPanels()[0].getItem());expect(o instanceof i).toBe(true);expect(o.getModel()).toBe(t)})});describe("::addHeaderPanel(model)",()=>{it("adds a panel to the correct panel container",()=>{let e;expect(atom.workspace.getHeaderPanels().length).toBe(0);atom.workspace.panelContainers.header.onDidAddPanel(e=jasmine.createSpy());const t=new n;const a=atom.workspace.addHeaderPanel({item:t});expect(a).toBeDefined();expect(e).toHaveBeenCalledWith({panel:a,index:0});const o=atom.views.getView(atom.workspace.getHeaderPanels()[0].getItem());expect(o instanceof i).toBe(true);expect(o.getModel()).toBe(t)})});describe("::addFooterPanel(model)",()=>{it("adds a panel to the correct panel container",()=>{let e;expect(atom.workspace.getFooterPanels().length).toBe(0);atom.workspace.panelContainers.footer.onDidAddPanel(e=jasmine.createSpy());const t=new n;const a=atom.workspace.addFooterPanel({item:t});expect(a).toBeDefined();expect(e).toHaveBeenCalledWith({panel:a,index:0});const o=atom.views.getView(atom.workspace.getFooterPanels()[0].getItem());expect(o instanceof i).toBe(true);expect(o.getModel()).toBe(t)})});describe("::addModalPanel(model)",()=>{it("adds a panel to the correct panel container",()=>{let e;expect(atom.workspace.getModalPanels().length).toBe(0);atom.workspace.panelContainers.modal.onDidAddPanel(e=jasmine.createSpy());const t=new n;const a=atom.workspace.addModalPanel({item:t});expect(a).toBeDefined();expect(e).toHaveBeenCalledWith({panel:a,index:0});const o=atom.views.getView(atom.workspace.getModalPanels()[0].getItem());expect(o instanceof i).toBe(true);expect(o.getModel()).toBe(t)})});describe("::panelForItem(item)",()=>{it("returns the panel associated with the item",()=>{const e=new n;const t=atom.workspace.addLeftPanel({item:e});const a=new n;expect(atom.workspace.panelForItem(e)).toBe(t);expect(atom.workspace.panelForItem(a)).toBe(null)})})});for(const o of[true,false]){describe(`::scan(regex, options, callback) { ripgrep: ${o} }`,()=>{function p(e,t,a){return atom.workspace.scan(e,{...t,ripgrep:o},a)}describe("when called with a regex",()=>{it("calls the callback with all regex results in all files in the project",async()=>{const t=[];await p(/(a)+/,{leadingContextLineCount:1,trailingContextLineCount:1},e=>t.push(e));t.sort((e,t)=>e.filePath.localeCompare(t.filePath));expect(t.length).toBeGreaterThan(0);expect(t[0].filePath).toBe(atom.project.getDirectories()[0].resolve("a"));expect(t[0].matches).toHaveLength(3);expect(t[0].matches[0]).toEqual({matchText:"aaa",lineText:"aaa bbb",lineTextOffset:0,range:[[0,0],[0,3]],leadingContextLines:[],trailingContextLines:["cc aa cc"]})});it("works with with escaped literals (like $ and ^)",async()=>{const t=[];await p(/\$\w+/,{leadingContextLineCount:1,trailingContextLineCount:1},e=>t.push(e));expect(t.length).toBe(1);const{filePath:e,matches:a}=t[0];expect(e).toBe(atom.project.getDirectories()[0].resolve("a"));expect(a).toHaveLength(1);expect(a[0]).toEqual({matchText:"$bill",lineText:"dollar$bill",lineTextOffset:0,range:[[2,6],[2,11]],leadingContextLines:["cc aa cc"],trailingContextLines:[]})});it("works on evil filenames",async()=>{atom.config.set("core.excludeVcsIgnoredPaths",false);platform.generateEvilFiles();atom.project.setPaths([path.join(__dirname,"fixtures","evil-files")]);const t=[];let a=[];await p(/evil/,{},e=>{t.push(e.filePath);a=a.concat(e.matches)});t.sort();_.each(a,e=>expect(e.matchText).toEqual("evil"));if(platform.isWindows()){expect(t.length).toBe(3);expect(t[0]).toMatch(/a_file_with_utf8.txt$/);expect(t[1]).toMatch(/file with spaces.txt$/);expect(path.basename(t[2])).toBe("utfă.md")}else{expect(t.length).toBe(5);expect(t[0]).toMatch(/a_file_with_utf8.txt$/);expect(t[1]).toMatch(/file with spaces.txt$/);expect(t[2]).toMatch(/goddam\nnewlines$/m);expect(t[3]).toMatch(/quote".txt$/m);expect(path.basename(t[4])).toBe("utfă.md")}});it("ignores case if the regex includes the `i` flag",async()=>{const t=[];await p(/DOLLAR/i,{},e=>t.push(e));expect(t).toHaveLength(1)});if(o){it("returns empty text matches",async()=>{const t=[];await p(/^\s{0}/,{paths:[`oh-git`]},e=>t.push(e));expect(t.length).toBe(1);const{filePath:e,matches:a}=t[0];expect(e).toBe(atom.project.getDirectories()[0].resolve(path.join("a-dir","oh-git")));expect(a).toHaveLength(1);expect(a[0]).toEqual({matchText:"",lineText:"bbb aaaa",lineTextOffset:0,range:[[0,0],[0,0]],leadingContextLines:[],trailingContextLines:[]})});describe("newlines on regexps",async()=>{it("returns multiline results from regexps",async()=>{const t=[];await p(/first\nsecond/,{},e=>t.push(e));expect(t.length).toBe(1);const{filePath:e,matches:a}=t[0];expect(e).toBe(atom.project.getDirectories()[0].resolve("file-with-newline-literal"));expect(a).toHaveLength(1);expect(a[0]).toEqual({matchText:"first\nsecond",lineText:"first\nsecond\\nthird",lineTextOffset:0,range:[[3,0],[4,6]],leadingContextLines:[],trailingContextLines:[]})});it("returns correctly the context lines",async()=>{const t=[];await p(/first\nsecond/,{leadingContextLineCount:2,trailingContextLineCount:2},e=>t.push(e));expect(t.length).toBe(1);const{filePath:e,matches:a}=t[0];expect(e).toBe(atom.project.getDirectories()[0].resolve("file-with-newline-literal"));expect(a).toHaveLength(1);expect(a[0]).toEqual({matchText:"first\nsecond",lineText:"first\nsecond\\nthird",lineTextOffset:0,range:[[3,0],[4,6]],leadingContextLines:["newline2","newline3"],trailingContextLines:["newline4","newline5"]})});it("returns multiple results from the same line",async()=>{const t=[];await p(/line\d\nne/,{},e=>t.push(e));t.sort((e,t)=>e.filePath.localeCompare(t.filePath));expect(t.length).toBe(1);const{filePath:e,matches:a}=t[0];expect(e).toBe(atom.project.getDirectories()[0].resolve("file-with-newline-literal"));expect(a).toHaveLength(3);expect(a[0]).toEqual({matchText:"line1\nne",lineText:"newline1\nnewline2",lineTextOffset:0,range:[[0,3],[1,2]],leadingContextLines:[],trailingContextLines:[]});expect(a[1]).toEqual({matchText:"line2\nne",lineText:"newline2\nnewline3",lineTextOffset:0,range:[[1,3],[2,2]],leadingContextLines:[],trailingContextLines:[]});expect(a[2]).toEqual({matchText:"line4\nne",lineText:"newline4\nnewline5",lineTextOffset:0,range:[[5,3],[6,2]],leadingContextLines:[],trailingContextLines:[]})});it("works with escaped newlines",async()=>{const t=[];await p(/second\\nthird/,{},e=>t.push(e));expect(t.length).toBe(1);const{filePath:e,matches:a}=t[0];expect(e).toBe(atom.project.getDirectories()[0].resolve("file-with-newline-literal"));expect(a).toHaveLength(1);expect(a[0]).toEqual({matchText:"second\\nthird",lineText:"second\\nthird",lineTextOffset:0,range:[[4,0],[4,13]],leadingContextLines:[],trailingContextLines:[]})});it("matches a regexp ending with a newline",async()=>{const t=[];await p(/newline3\n/,{},e=>t.push(e));expect(t.length).toBe(1);const{filePath:e,matches:a}=t[0];expect(e).toBe(atom.project.getDirectories()[0].resolve("file-with-newline-literal"));expect(a).toHaveLength(1);expect(a[0]).toEqual({matchText:"newline3\n",lineText:"newline3",lineTextOffset:0,range:[[2,0],[3,0]],leadingContextLines:[],trailingContextLines:[]})})});describe("pcre2 enabled",async()=>{it("supports lookbehind searches",async()=>{const t=[];await p(/(?<!a)aa\b/,{PCRE2:true},e=>t.push(e));expect(t.length).toBe(1);const{filePath:e,matches:a}=t[0];expect(e).toBe(atom.project.getDirectories()[0].resolve("a"));expect(a).toHaveLength(1);expect(a[0]).toEqual({matchText:"aa",lineText:"cc aa cc",lineTextOffset:0,range:[[1,3],[1,5]],leadingContextLines:[],trailingContextLines:[]})})})}it("returns results on lines with unicode strings",async()=>{const t=[];await p(/line with unico/,{},e=>t.push(e));expect(t.length).toBe(1);const{filePath:e,matches:a}=t[0];expect(e).toBe(atom.project.getDirectories()[0].resolve("file-with-unicode"));expect(a).toHaveLength(1);expect(a[0]).toEqual({matchText:"line with unico",lineText:"ДДДДДДДДДДДДДДДДДД line with unicode",lineTextOffset:0,range:[[0,19],[0,34]],leadingContextLines:[],trailingContextLines:[]})});it("returns results on files detected as binary",async()=>{const t=[];await p(/asciiProperty=Foo/,{trailingContextLineCount:2},e=>t.push(e));expect(t.length).toBe(1);const{filePath:e,matches:a}=t[0];expect(e).toBe(atom.project.getDirectories()[0].resolve("file-detected-as-binary"));expect(a).toHaveLength(1);expect(a[0]).toEqual({matchText:"asciiProperty=Foo",lineText:"asciiProperty=Foo",lineTextOffset:0,range:[[0,0],[0,17]],leadingContextLines:[],trailingContextLines:["utf8Property=Fòò","latin1Property=F��"]})});describe("when the core.excludeVcsIgnoredPaths config is used",()=>{let a;let o;beforeEach(async()=>{const e=path.join(__dirname,"fixtures","git","working-dir");a=path.join(temp.mkdirSync("atom"));const t=fstream.Writer(a);fstream.Reader(e).pipe(t);await new Promise(e=>{t.on("close",e);t.on("error",e)});fs.renameSync(path.join(a,"git.git"),path.join(a,".git"));o=path.join(a,"ignored.txt");fs.writeFileSync(o,"this match should not be included")});afterEach(()=>{if(fs.existsSync(a)){fs.removeSync(a)}});it("excludes ignored files when core.excludeVcsIgnoredPaths is true",async()=>{atom.project.setPaths([a]);atom.config.set("core.excludeVcsIgnoredPaths",true);const t=jasmine.createSpy("result found");await p(/match/,{},({filePath:e})=>t(e));expect(t).not.toHaveBeenCalled()});it("does not exclude ignored files when core.excludeVcsIgnoredPaths is false",async()=>{atom.project.setPaths([a]);atom.config.set("core.excludeVcsIgnoredPaths",false);const t=jasmine.createSpy("result found");await p(/match/,{},({filePath:e})=>t(e));expect(t).toHaveBeenCalledWith(path.join(a,"ignored.txt"))});it("does not exclude files when searching on an ignored folder even when core.excludeVcsIgnoredPaths is true",async()=>{fs.mkdirSync(path.join(a,"poop"));o=path.join(path.join(a,"poop","whatever.txt"));fs.writeFileSync(o,"this match should be included");atom.project.setPaths([a]);atom.config.set("core.excludeVcsIgnoredPaths",true);const t=jasmine.createSpy("result found");await p(/match/,{paths:["poop"]},({filePath:e})=>t(e));expect(t).toHaveBeenCalledWith(o)})});describe("when the core.followSymlinks config is used",()=>{let a;beforeEach(async()=>{const e=path.join(__dirname,"fixtures","dir","a-dir");a=path.join(temp.mkdirSync("atom"));const t=fstream.Writer(a);fstream.Reader(e).pipe(t);await new Promise(e=>{t.on("close",e);t.on("error",e)});fs.symlinkSync(path.join(__dirname,"fixtures","dir","b"),path.join(a,"symlink"))});afterEach(()=>{if(fs.existsSync(a)){fs.removeSync(a)}});it("follows symlinks when core.followSymlinks is true",async()=>{atom.project.setPaths([a]);atom.config.set("core.followSymlinks",true);const t=jasmine.createSpy("result found");await p(/ccc/,{},({filePath:e})=>t(e));expect(t).toHaveBeenCalledWith(path.join(a,"symlink"))});it("does not follow symlinks when core.followSymlinks is false",async()=>{atom.project.setPaths([a]);atom.config.set("core.followSymlinks",false);const t=jasmine.createSpy("result found");await p(/ccc/,{},({filePath:e})=>t(e));expect(t).not.toHaveBeenCalled()})});describe("when there are hidden files",()=>{let a;beforeEach(async()=>{const e=path.join(__dirname,"fixtures","dir","a-dir");a=path.join(temp.mkdirSync("atom"));const t=fstream.Writer(a);fstream.Reader(e).pipe(t);await new Promise(e=>{t.on("close",e);t.on("error",e)});fs.writeFileSync(path.join(a,".hidden"),"ccc")});afterEach(()=>{if(fs.existsSync(a)){fs.removeSync(a)}});it("searches on hidden files",async()=>{atom.project.setPaths([a]);const t=jasmine.createSpy("result found");await p(/ccc/,{},({filePath:e})=>t(e));expect(t).toHaveBeenCalledWith(path.join(a,".hidden"))})});it("includes only files when a directory filter is specified",async()=>{const e=path.join(path.join(__dirname,"fixtures","dir"));atom.project.setPaths([e]);const t=path.join(e,"a-dir","oh-git");const a=[];let o=[];await p(/aaa/,{paths:[`a-dir${path.sep}`]},e=>{a.push(e.filePath);o=o.concat(e.matches)});expect(a.length).toBe(1);expect(a[0]).toBe(t);expect(o.length).toBe(1)});it("includes files and folders that begin with a '.'",async()=>{const e=temp.mkdirSync("atom-spec-workspace");const t=path.join(e,".text");fs.writeFileSync(t,"match this");atom.project.setPaths([e]);const a=[];let o=[];await p(/match this/,{},e=>{a.push(e.filePath);o=o.concat(e.matches)});expect(a.length).toBe(1);expect(a[0]).toBe(t);expect(o.length).toBe(1)});it("excludes values in core.ignoredNames",async()=>{const e=atom.config.get("core.ignoredNames");e.push("a");atom.config.set("core.ignoredNames",e);const t=jasmine.createSpy("result found");await p(/dollar/,{},()=>t());expect(t).not.toHaveBeenCalled()});it("scans buffer contents if the buffer is modified",async()=>{const t=[];const e=await atom.workspace.open("a");e.setText("Elephant");await p(/a|Elephant/,{},e=>t.push(e));expect(t.length).toBeGreaterThan(0);const a=_.find(t,({filePath:e})=>path.basename(e)==="a");expect(a.matches).toHaveLength(1);expect(a.matches[0].matchText).toBe("Elephant")});it("ignores buffers outside the project",async()=>{const t=[];const e=await atom.workspace.open(temp.openSync().path);e.setText("Elephant");await p(/Elephant/,{},e=>t.push(e));expect(t).toHaveLength(0)});describe("when the project has multiple root directories",()=>{let t;let c;let a;let r;beforeEach(()=>{t=atom.project.getPaths()[0];a=path.join(t,"a-dir","oh-git");c=temp.mkdirSync("a-second-dir");const e=path.join(c,"a-dir");r=path.join(e,"a-file");fs.mkdirSync(e);fs.writeFileSync(r,"ccc aaaa");atom.project.addPath(c)});it("searches matching files in all of the project's root directories",async()=>{const t=[];await p(/aaaa/,{},({filePath:e})=>t.push(e));expect(t.sort()).toEqual([a,r].sort())});describe("when an inclusion path starts with the basename of a root directory",()=>{it("interprets the inclusion path as starting from that directory",async()=>{let t=[];await p(/aaaa/,{paths:["dir"]},({filePath:e})=>{if(!t.includes(e)){t.push(e)}});expect(t).toEqual([a]);t=[];await p(/aaaa/,{paths:[path.join("dir","a-dir")]},({filePath:e})=>{if(!t.includes(e)){t.push(e)}});expect(t).toEqual([a]);t=[];await p(/aaaa/,{paths:[path.basename(c)]},({filePath:e})=>{if(!t.includes(e)){t.push(e)}});expect(t).toEqual([r]);t=[];await p(/aaaa/,{paths:[path.join(path.basename(c),"a-dir")]},({filePath:e})=>{if(!t.includes(e)){t.push(e)}});expect(t).toEqual([r])})});describe("when a custom directory searcher is registered",()=>{let n=null;let s=null;class i{constructor(e){this.options=e;this.promise=new Promise((e,t)=>{this.hoistedResolve=e;this.hoistedReject=t;if(typeof s==="function"){s(this)}})}then(...e){return this.promise.then.apply(this.promise,e)}cancel(){this.cancelled=true;this.hoistedResolve()}}beforeEach(()=>{n=null;s=null;atom.packages.serviceHub.provide("atom.directory-searcher","0.1.0",{canSearchDirectory(e){return e.getPath()===t},search(e,t,a){n=new i(a);return n}});waitsFor(()=>atom.workspace.directorySearchers.length>0)});it("can override the DefaultDirectorySearcher on a per-directory basis",async()=>{const e="ssh://foreign-directory:8080/hello.txt";const t=1;const a=10;const o={filePath:e,matches:[{lineText:"Hello world",lineTextOffset:0,matchText:"Hello",range:[[0,0],[0,5]]}]};s=e=>{e.options.didMatch(o);e.options.didSearchPaths(a);e.hoistedResolve()};const n=[];const i=jasmine.createSpy("onPathsSearched");await p(/aaaa/,{onPathsSearched:i},({filePath:e})=>n.push(e));expect(n.sort()).toEqual([e,r].sort());expect(i.callCount).toBe(2);expect(i.mostRecentCall.args[0]).toBe(a+t)});it("can be cancelled when the object returned by scan() has its cancel() method invoked",async()=>{const e=p(/aaaa/,{},()=>{});let t=null;waitsFor("fakeSearch to be defined",()=>n!=null);runs(()=>{expect(n.cancelled).toBe(undefined);e.cancel();expect(n.cancelled).toBe(true)});waitsForPromise(()=>e.then(e=>{t=e}));runs(()=>expect(t).toBe("cancelled"))});it("will have the side-effect of failing the overall search if it fails",()=>{let e;let o=null;atom.packages.serviceHub.provide("atom.directory-searcher","0.1.0",{canSearchDirectory(e){return e.getPath()===c},search(e,t,a){o=new i(a);return o}});let t=false;const a=e=p(/aaaa/,()=>{});waitsFor("fakeSearch to be defined",()=>n!=null);runs(()=>n.hoistedReject());waitsForPromise(()=>e.catch(()=>{t=true}));waitsFor(e=>a.then(null,e));runs(()=>{expect(t).toBe(true);expect(o.cancelled).toBe(true)})})})})});describe("leadingContextLineCount and trailingContextLineCount options",()=>{async function e({leadingContextLineCount:e,trailingContextLineCount:t}){const a=[];await p(/result/,{leadingContextLineCount:e,trailingContextLineCount:t},e=>a.push(e));return{leadingContext:a[0].matches.map(e=>e.leadingContextLines),trailingContext:a[0].matches.map(e=>e.trailingContextLines)}}const t=[["line 1","line 2","line 3","line 4","line 5"],["line 6","line 7","line 8","line 9","line 10"],["line 7","line 8","line 9","line 10","result 2"],["line 10","result 2","result 3","line 11","line 12"]];const a=[["line 6","line 7","line 8","line 9","line 10"],["result 3","line 11","line 12","result 4","line 13"],["line 11","line 12","result 4","line 13","line 14"],["line 13","line 14","line 15"]];it("returns valid contexts no matter how many lines are requested",async()=>{expect(await e({})).toEqual({leadingContext:[[],[],[],[]],trailingContext:[[],[],[],[]]});expect(await e({leadingContextLineCount:1,trailingContextLineCount:1})).toEqual({leadingContext:t.map(e=>e.slice(-1)),trailingContext:a.map(e=>e.slice(0,1))});expect(await e({leadingContextLineCount:2,trailingContextLineCount:2})).toEqual({leadingContext:t.map(e=>e.slice(-2)),trailingContext:a.map(e=>e.slice(0,2))});expect(await e({leadingContextLineCount:5,trailingContextLineCount:5})).toEqual({leadingContext:t.map(e=>e.slice(-5)),trailingContext:a.map(e=>e.slice(0,5))});expect(await e({leadingContextLineCount:2,trailingContextLineCount:3})).toEqual({leadingContext:t.map(e=>e.slice(-2)),trailingContext:a.map(e=>e.slice(0,3))})})})})}describe("::replace(regex, replacementText, paths, iterator)",()=>{let o,n;beforeEach(()=>{o=path.dirname(atom.project.getPaths()[0]);n=temp.mkdirSync("atom");atom.project.setPaths([n])});describe("when a file doesn't exist",()=>{it("calls back with an error",()=>{const a=[];const e=path.resolve("/not-a-file.js");expect(fs.existsSync(e)).toBeFalsy();waitsForPromise(()=>atom.workspace.replace(/items/gi,"items",[e],(e,t)=>a.push(t)));runs(()=>{expect(a).toHaveLength(1);expect(a[0].path).toBe(e)})})});describe("when called with unopened files",()=>{it("replaces properly",()=>{const e=path.join(n,"sample.js");fs.copyFileSync(path.join(o,"sample.js"),e);const t=[];waitsForPromise(()=>atom.workspace.replace(/items/gi,"items",[e],e=>t.push(e)));runs(()=>{expect(t).toHaveLength(1);expect(t[0].filePath).toBe(e);expect(t[0].replacements).toBe(6)})});it("does not discard the multiline flag",()=>{const e=path.join(n,"sample.js");fs.copyFileSync(path.join(o,"sample.js"),e);const t=[];waitsForPromise(()=>atom.workspace.replace(/;$/gim,"items",[e],e=>t.push(e)));runs(()=>{expect(t).toHaveLength(1);expect(t[0].filePath).toBe(e);expect(t[0].replacements).toBe(8)})})});describe("when a buffer is already open",()=>{it("replaces properly and saves when not modified",()=>{const e=path.join(n,"sample.js");fs.copyFileSync(path.join(o,"sample.js"),path.join(n,"sample.js"));let t=null;const a=[];waitsForPromise(()=>atom.workspace.open("sample.js").then(e=>{t=e}));runs(()=>expect(t.isModified()).toBeFalsy());waitsForPromise(()=>atom.workspace.replace(/items/gi,"items",[e],e=>a.push(e)));runs(()=>{expect(a).toHaveLength(1);expect(a[0].filePath).toBe(e);expect(a[0].replacements).toBe(6);expect(t.isModified()).toBeFalsy()})});it("does not replace when the path is not specified",()=>{const e=path.join(n,"sample.js");const t=path.join(n,"sample-with-comments.js");fs.copyFileSync(path.join(o,"sample.js"),e);fs.copyFileSync(path.join(o,"sample-with-comments.js"),path.join(n,"sample-with-comments.js"));const a=[];waitsForPromise(()=>atom.workspace.open("sample-with-comments.js"));waitsForPromise(()=>atom.workspace.replace(/items/gi,"items",[t],e=>a.push(e)));runs(()=>{expect(a).toHaveLength(1);expect(a[0].filePath).toBe(t)})});it("does NOT save when modified",()=>{const e=path.join(n,"sample.js");fs.copyFileSync(path.join(o,"sample.js"),e);let t=null;const a=[];waitsForPromise(()=>atom.workspace.open("sample.js").then(e=>{t=e}));runs(()=>{t.buffer.setTextInRange([[0,0],[0,0]],"omg");expect(t.isModified()).toBeTruthy()});waitsForPromise(()=>atom.workspace.replace(/items/gi,"okthen",[e],e=>a.push(e)));runs(()=>{expect(a).toHaveLength(1);expect(a[0].filePath).toBe(e);expect(a[0].replacements).toBe(6);expect(t.isModified()).toBeTruthy()})})})});describe("::saveActivePaneItem()",()=>{let t,e;beforeEach(()=>{waitsForPromise(()=>atom.workspace.open("sample.js").then(e=>{t=e}));e=jasmine.createSpy("did-add-notification");atom.notifications.onDidAddNotification(e)});describe("when there is an error",()=>{it("emits a warning notification when the file cannot be saved",()=>{spyOn(t,"save").andCallFake(()=>{throw new Error("'/some/file' is a directory")});waitsForPromise(()=>atom.workspace.saveActivePaneItem().then(()=>{expect(e).toHaveBeenCalled();expect(e.mostRecentCall.args[0].getType()).toBe("warning");expect(e.mostRecentCall.args[0].getMessage()).toContain("Unable to save")}))});it("emits a warning notification when the directory cannot be written to",()=>{spyOn(t,"save").andCallFake(()=>{throw new Error("ENOTDIR, not a directory '/Some/dir/and-a-file.js'")});waitsForPromise(()=>atom.workspace.saveActivePaneItem().then(()=>{expect(e).toHaveBeenCalled();expect(e.mostRecentCall.args[0].getType()).toBe("warning");expect(e.mostRecentCall.args[0].getMessage()).toContain("Unable to save")}))});it("emits a warning notification when the user does not have permission",()=>{spyOn(t,"save").andCallFake(()=>{const e=new Error("EACCES, permission denied '/Some/dir/and-a-file.js'");e.code="EACCES";e.path="/Some/dir/and-a-file.js";throw e});waitsForPromise(()=>atom.workspace.saveActivePaneItem().then(()=>{expect(e).toHaveBeenCalled();expect(e.mostRecentCall.args[0].getType()).toBe("warning");expect(e.mostRecentCall.args[0].getMessage()).toContain("Unable to save")}))});it("emits a warning notification when the operation is not permitted",()=>{spyOn(t,"save").andCallFake(()=>{const e=new Error("EPERM, operation not permitted '/Some/dir/and-a-file.js'");e.code="EPERM";e.path="/Some/dir/and-a-file.js";throw e});waitsForPromise(()=>atom.workspace.saveActivePaneItem().then(()=>{expect(e).toHaveBeenCalled();expect(e.mostRecentCall.args[0].getType()).toBe("warning");expect(e.mostRecentCall.args[0].getMessage()).toContain("Unable to save")}))});it("emits a warning notification when the file is already open by another app",()=>{spyOn(t,"save").andCallFake(()=>{const e=new Error("EBUSY, resource busy or locked '/Some/dir/and-a-file.js'");e.code="EBUSY";e.path="/Some/dir/and-a-file.js";throw e});waitsForPromise(()=>atom.workspace.saveActivePaneItem().then(()=>{expect(e).toHaveBeenCalled();expect(e.mostRecentCall.args[0].getType()).toBe("warning");expect(e.mostRecentCall.args[0].getMessage()).toContain("Unable to save")}))});it("emits a warning notification when the file system is read-only",()=>{spyOn(t,"save").andCallFake(()=>{const e=new Error("EROFS, read-only file system '/Some/dir/and-a-file.js'");e.code="EROFS";e.path="/Some/dir/and-a-file.js";throw e});waitsForPromise(()=>atom.workspace.saveActivePaneItem().then(()=>{expect(e).toHaveBeenCalled();expect(e.mostRecentCall.args[0].getType()).toBe("warning");expect(e.mostRecentCall.args[0].getMessage()).toContain("Unable to save")}))});it("emits a warning notification when the file cannot be saved",()=>{spyOn(t,"save").andCallFake(()=>{throw new Error("no one knows")});waitsForPromise({shouldReject:true},()=>atom.workspace.saveActivePaneItem())})})});describe("::closeActivePaneItemOrEmptyPaneOrWindow",()=>{beforeEach(()=>{spyOn(atom,"close");waitsForPromise(()=>atom.workspace.open())});it("closes the active center pane item, or the active center pane if it is empty, or the current window if there is only the empty root pane in the center",async()=>{atom.config.set("core.destroyEmptyPanes",false);const e=atom.workspace.getActivePane();const t=e.splitRight({copyActiveItem:true});expect(atom.workspace.getCenter().getPanes().length).toBe(2);expect(t.getItems().length).toBe(1);atom.workspace.closeActivePaneItemOrEmptyPaneOrWindow();expect(atom.workspace.getCenter().getPanes().length).toBe(2);expect(t.getItems().length).toBe(0);atom.workspace.closeActivePaneItemOrEmptyPaneOrWindow();expect(atom.workspace.getCenter().getPanes().length).toBe(1);expect(e.getItems().length).toBe(1);atom.workspace.closeActivePaneItemOrEmptyPaneOrWindow();expect(atom.workspace.getCenter().getPanes().length).toBe(1);expect(e.getItems().length).toBe(0);expect(atom.workspace.getCenter().getPanes().length).toBe(1);await atom.workspace.open({getTitle:()=>"Permanent Dock Item",element:document.createElement("div"),getDefaultLocation:()=>"left",isPermanentDockItem:()=>true});await atom.workspace.open({getTitle:()=>"Impermanent Dock Item",element:document.createElement("div"),getDefaultLocation:()=>"left"});expect(atom.workspace.getLeftDock().getPaneItems().length).toBe(2);atom.workspace.closeActivePaneItemOrEmptyPaneOrWindow();expect(atom.close).toHaveBeenCalled()})});describe("::activateNextPane",()=>{describe("when the active workspace pane is inside a dock",()=>{it("activates the next pane in the dock",()=>{const e=atom.workspace.getLeftDock();const t=e.getPanes()[0];const a=t.splitRight();a.focus();expect(atom.workspace.getActivePane()).toBe(a);atom.workspace.activateNextPane();expect(atom.workspace.getActivePane()).toBe(t)})});describe("when the active workspace pane is inside the workspace center",()=>{it("activates the next pane in the workspace center",()=>{const e=atom.workspace.getCenter();const t=e.getPanes()[0];const a=t.splitRight();a.focus();expect(atom.workspace.getActivePane()).toBe(a);atom.workspace.activateNextPane();expect(atom.workspace.getActivePane()).toBe(t)})})});describe("::activatePreviousPane",()=>{describe("when the active workspace pane is inside a dock",()=>{it("activates the previous pane in the dock",()=>{const e=atom.workspace.getLeftDock();const t=e.getPanes()[0];const a=t.splitRight();t.focus();expect(atom.workspace.getActivePane()).toBe(t);atom.workspace.activatePreviousPane();expect(atom.workspace.getActivePane()).toBe(a)})});describe("when the active workspace pane is inside the workspace center",()=>{it("activates the previous pane in the workspace center",()=>{const e=atom.workspace.getCenter();const t=e.getPanes()[0];const a=t.splitRight();t.focus();expect(atom.workspace.getActivePane()).toBe(t);atom.workspace.activatePreviousPane();expect(atom.workspace.getActivePane()).toBe(a)})})});describe("::getVisiblePanes",()=>{it("returns all panes in visible pane containers",()=>{const e=I.getCenter();const t=I.getLeftDock();const a=I.getRightDock();const o=I.getBottomDock();const n=e.getPanes()[0];const i=t.getPanes()[0];const s=a.getPanes()[0];const c=o.getPanes()[0];t.hide();a.hide();o.hide();expect(I.getVisiblePanes()).toContain(n);expect(I.getVisiblePanes()).not.toContain(i);expect(I.getVisiblePanes()).not.toContain(s);expect(I.getVisiblePanes()).not.toContain(c);t.show();expect(I.getVisiblePanes()).toContain(n);expect(I.getVisiblePanes()).toContain(i);expect(I.getVisiblePanes()).not.toContain(s);expect(I.getVisiblePanes()).not.toContain(c);a.show();expect(I.getVisiblePanes()).toContain(n);expect(I.getVisiblePanes()).toContain(i);expect(I.getVisiblePanes()).toContain(s);expect(I.getVisiblePanes()).not.toContain(c);o.show();expect(I.getVisiblePanes()).toContain(n);expect(I.getVisiblePanes()).toContain(i);expect(I.getVisiblePanes()).toContain(s);expect(I.getVisiblePanes()).toContain(c)})});describe("::getVisiblePaneContainers",()=>{it("returns all visible pane containers",()=>{const e=I.getCenter();const t=I.getLeftDock();const a=I.getRightDock();const o=I.getBottomDock();t.hide();a.hide();o.hide();expect(I.getVisiblePaneContainers()).toEqual([e]);t.show();expect(I.getVisiblePaneContainers().sort()).toEqual([e,t]);a.show();expect(I.getVisiblePaneContainers().sort()).toEqual([e,t,a]);o.show();expect(I.getVisiblePaneContainers().sort()).toEqual([e,t,a,o])})});describe("when the core.allowPendingPaneItems option is falsy",()=>{it("does not open item with `pending: true` option as pending",()=>{let e=null;atom.config.set("core.allowPendingPaneItems",false);waitsForPromise(()=>atom.workspace.open("sample.js",{pending:true}).then(()=>{e=atom.workspace.getActivePane()}));runs(()=>expect(e.getPendingItem()).toBeFalsy())})});describe("grammar activation",()=>{it("notifies the workspace of which grammar is used",async()=>{atom.packages.triggerDeferredActivationHooks();const e=jasmine.createSpy("js grammar used");const t=jasmine.createSpy("ruby grammar used");const a=jasmine.createSpy("c grammar used");atom.packages.onDidTriggerActivationHook("language-javascript:grammar-used",e);atom.packages.onDidTriggerActivationHook("language-ruby:grammar-used",t);atom.packages.onDidTriggerActivationHook("language-c:grammar-used",a);await atom.packages.activatePackage("language-ruby");await atom.packages.activatePackage("language-javascript");await atom.packages.activatePackage("language-c");await atom.workspace.open("sample-with-comments.js");expect(e).toHaveBeenCalled();atom.grammars.assignLanguageMode(atom.workspace.getActiveTextEditor(),"source.c");expect(a).toHaveBeenCalled();atom.workspace.getActivePane().splitRight({copyActiveItem:true});atom.grammars.assignLanguageMode(atom.workspace.getActiveTextEditor(),"source.ruby");expect(t).toHaveBeenCalled()})});describe(".checkoutHeadRevision()",()=>{let e=null;beforeEach(async()=>{jasmine.useRealClock();atom.config.set("editor.confirmCheckoutHeadRevision",false);e=await atom.workspace.open("sample-with-comments.js")});it("reverts to the version of its file checked into the project repository",async()=>{e.setCursorBufferPosition([0,0]);e.insertText("---\n");expect(e.lineTextForBufferRow(0)).toBe("---");atom.workspace.checkoutHeadRevision(e);await conditionPromise(()=>e.lineTextForBufferRow(0)==="")});describe("when there's no repository for the editor's file",()=>{it("doesn't do anything",async()=>{e=new TextEditor;e.setText("stuff");atom.workspace.checkoutHeadRevision(e);atom.workspace.checkoutHeadRevision(e)})})});describe("when an item is moved",()=>{beforeEach(()=>{atom.workspace.enablePersistence=true});afterEach(async()=>{await atom.workspace.itemLocationStore.clear();atom.workspace.enablePersistence=false});it("stores the new location if it's not the default",()=>{const e="atom://test";const t={getURI:()=>e,getDefaultLocation:()=>"left",getElement:()=>document.createElement("div")};const a=I.getActivePane();a.addItem(t);const o=atom.workspace.getRightDock().getActivePane();spyOn(I.itemLocationStore,"save");a.moveItemToPane(t,o);expect(I.itemLocationStore.save).toHaveBeenCalledWith(e,"right")});it("clears the location if it's the default",()=>{const e="atom://test";const t={getURI:()=>e,getDefaultLocation:()=>"right",getElement:()=>document.createElement("div")};const a=I.getActivePane();a.addItem(t);const o=atom.workspace.getRightDock().getActivePane();spyOn(I.itemLocationStore,"save");spyOn(I.itemLocationStore,"delete");a.moveItemToPane(t,o);expect(I.itemLocationStore.delete).toHaveBeenCalledWith(e);expect(I.itemLocationStore.save).not.toHaveBeenCalled()})})});function escapeStringRegex(e){return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&")}