importScripts(`%idbKeyValVersioned%`);const{NavigationRoute}=workbox.routing;let lastNavigationRequest=null;let offlineShellEnabled=true;const MessageAPI={setPathResources:(e,{path:t,resources:a})=>{e.waitUntil(idbKeyval.set(`resources:${t}`,a))},clearPathResources:e=>{e.waitUntil(idbKeyval.clear())},enableOfflineShell:()=>{offlineShellEnabled=true},disableOfflineShell:()=>{offlineShellEnabled=false}};self.addEventListener(`message`,e=>{const{gatsbyApi:t}=e.data;if(t)MessageAPI[t](e,e.data)});function handleAPIRequest({event:e}){const{pathname:t}=new URL(e.request.url);const a=t.match(/:(.+)/)[1];const n={};if(a.includes(`=`)){a.split(`&`).forEach(e=>{const[t,a]=e.split(`=`);n[t]=a})}else{n.api=a}if(MessageAPI[n.api]!==undefined){MessageAPI[n.api]()}if(!n.redirect){return new Response}return new Response(null,{status:302,headers:{Location:lastNavigationRequest}})}const navigationRoute=new NavigationRoute(async({event:e})=>{if(e.request.url.match(/\/.gatsby-plugin-offline:.+/)){return handleAPIRequest({event:e})}if(!offlineShellEnabled){return await fetch(e.request)}lastNavigationRequest=e.request.url;let{pathname:t}=new URL(e.request.url);t=t.replace(new RegExp(`^%pathPrefix%`),``);const a=await idbKeyval.get(`resources:${t}`);if(!a||!await caches.match(`%pathPrefix%/%appFile%`)){return await fetch(e.request)}for(const i of a){if(!await caches.match(i)){return await fetch(e.request)}}const n=`%pathPrefix%/offline-plugin-app-shell-fallback/index.html`;const s=workbox.precaching.getCacheKeyForURL(n);return await caches.match(s)});workbox.routing.registerRoute(navigationRoute);workbox.routing.registerRoute(/\/.gatsby-plugin-offline:.+/,handleAPIRequest);