import wrapAnsi from"wrap-ansi";import chalk from"chalk";import boxen from"boxen";import{maxCharsPerLine}from"./constants";export function indent(r,e=" "){return e.repeat(r)}export function indentLines(r,e,n){const o=Array.isArray(r)?r:r.split("\n");let t="";if(o.length){const i=indent(n===undefined?e:n);t=i+o.shift()}if(o.length){const a=indent(e);t+="\n"+o.map(r=>a+r).join("\n")}return t}export function foldLines(r,e,n,o=maxCharsPerLine()){return indentLines(wrapAnsi(r,o),e,n)}export function colorize(r){return r.replace(/\[[^ ]+]/g,r=>chalk.grey(r)).replace(/<[^ ]+>/g,r=>chalk.green(r)).replace(/ (-[-\w,]+)/g,r=>chalk.bold(r)).replace(/`([^`]+)`/g,(r,e)=>chalk.bold.cyan(e))}export function box(r,e,n){return boxen([e||chalk.white("Nuxt Message"),"",chalk.white(foldLines(r,0,0,maxCharsPerLine()))].join("\n"),Object.assign({borderColor:"white",borderStyle:"round",padding:1,margin:1},n))+"\n"}export function successBox(r,e){return box(r,e||chalk.green("✔ Nuxt Success"),{borderColor:"green"})}export function warningBox(r,e){return box(r,e||chalk.yellow("⚠ Nuxt Warning"),{borderColor:"yellow"})}export function errorBox(r,e){return box(r,e||chalk.red("✖ Nuxt Error"),{borderColor:"red"})}export function fatalBox(r,e){return errorBox(r,e||chalk.red("✖ Nuxt Fatal Error"))}