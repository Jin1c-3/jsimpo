utils.load("test/inspector/wasm-inspector-test.js");let{session,contextGroup,Protocol}=InspectorTest.start("Tests call stack in wasm scripts");var builder=new WasmModuleBuilder;var imported_idx=builder.addImport("mode","func",kSig_v_v);var call_imported_idx=builder.addFunction("call_func",kSig_v_v).addBody([kExprCallFunction,imported_idx]).index;builder.addFunction("main",kSig_v_v).addBody([kExprBlock,kWasmVoid,kExprCallFunction,call_imported_idx,kExprEnd]).exportAs("main");var module_bytes=builder.toArray();function testFunction(e){function t(){debugger}var n=new ArrayBuffer(e.length);var o=new Uint8Array(n);for(var r=0;r<e.length;r++){o[r]=e[r]|0}var a=new WebAssembly.Module(n);var s=new WebAssembly.Instance(a,{mode:{func:t}});s.exports.main()}contextGroup.addScript(testFunction.toString());Protocol.Debugger.enable();Protocol.Debugger.onPaused(handleDebuggerPaused);InspectorTest.log("Running testFunction with generated wasm bytes...");Protocol.Runtime.evaluate({expression:"testFunction("+JSON.stringify(module_bytes)+")"});function locationToString(e){var t={functionName:e.functionName};for(var n in e.functionLocation){if(n=="scriptId")continue;t["function_"+n]=e.functionLocation[n]}for(var n in e.location){if(n=="scriptId")continue;t[n]=e.location[n]}return JSON.stringify(t)}function logStackTrace(e){var t=e.params.callFrames;InspectorTest.log("Number of frames: "+t.length);for(var n=0;n<t.length;++n){InspectorTest.log("  - ["+n+"] "+locationToString(t[n]))}}function handleDebuggerPaused(e){InspectorTest.log("Paused on 'debugger;'");logStackTrace(e);InspectorTest.log("Getting v8-generated stack trace...");var t=e.params.callFrames[0].callFrameId;Protocol.Debugger.evaluateOnCallFrame({callFrameId:t,expression:'(new Error("this is your stack trace:")).stack'}).then(callbackEvaluate)}function callbackEvaluate(e){InspectorTest.log("Result of evaluate ("+e.result.result.type+"):");var t=e.result.result.value.split("\n");t[1]="    -- skipped --";InspectorTest.log(t.join("\n"));InspectorTest.log("Finished!");InspectorTest.completeTest()}