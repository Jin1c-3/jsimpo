const path=require("path");const fse=require("fs-extra");const glob=require("fast-glob");const packagePath=process.cwd();const buildPath=path.join(packagePath,"./build");const srcPath=path.join(packagePath,"./src");async function includeFileInBuild(e){const t=path.resolve(packagePath,e);const s=path.resolve(buildPath,path.basename(e));await fse.copy(t,s);console.log(`Copied ${t} to ${s}`)}async function createModulePackages({from:e,to:r}){const t=glob.sync("*/index.{js,ts,tsx}",{cwd:e}).map(path.dirname);await Promise.all(t.map(async e=>{const t=path.join(r,e,"package.json");const s=await fse.pathExists(path.resolve(path.dirname(t),"../esm"));const a={sideEffects:false,module:s?path.posix.join("../esm",e,"index.js"):"./index.js",main:s?"./index.js":path.posix.join("../node",e,"index.js"),types:"./index.d.ts"};const[i,n,o]=await Promise.all([fse.pathExists(path.resolve(path.dirname(t),a.types)),fse.pathExists(path.resolve(path.dirname(t),a.module)),fse.pathExists(path.resolve(path.dirname(t),a.main)),fse.writeFile(t,JSON.stringify(a,null,2))]);const c=[];if(!i){c.push(`'types' entry '${a.types}' does not exist`)}if(!n){c.push(`'module' entry '${a.module}' does not exist`)}if(!o){c.push(`'main' entry '${a.main}' does not exist`)}if(c.length>0){throw new Error(`${t}:\n${c.join("\n")}`)}return t}))}async function typescriptCopy({from:t,to:s}){if(!await fse.pathExists(s)){console.warn(`path ${s} does not exists`);return[]}const e=await glob("**/*.d.ts",{cwd:t});const a=e.map(e=>fse.copy(path.resolve(t,e),path.resolve(s,e)));return Promise.all(a)}async function createPackageFile(){const e=await fse.readFile(path.resolve(packagePath,"./package.json"),"utf8");const{nyc:t,scripts:s,devDependencies:a,workspaces:i,...n}=JSON.parse(e);const o={...n,private:false,...n.main?{main:fse.existsSync(path.resolve(buildPath,"./node/index.js"))?"./node/index.js":"./index.js",module:fse.existsSync(path.resolve(buildPath,"./esm/index.js"))?"./esm/index.js":"./index.js"}:{},types:"./index.d.ts"};const c=path.resolve(buildPath,"./package.json");await fse.writeFile(c,JSON.stringify(o,null,2),"utf8");console.log(`Created package.json in ${c}`);return o}async function prepend(e,t){const s=await fse.readFile(e,"utf8");await fse.writeFile(e,t+s,"utf8")}async function addLicense(e){const s=`/** @license Material-UI v${e.version}
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
`;await Promise.all(["./index.js","./legacy/index.js","./modern/index.js","./node/index.js","./umd/material-ui.development.js","./umd/material-ui.production.min.js"].map(async t=>{try{await prepend(path.resolve(buildPath,t),s)}catch(e){if(e.code==="ENOENT"){console.log(`Skipped license for ${t}`)}else{throw e}}}))}async function run(){try{const e=await createPackageFile();await Promise.all([e.name==="@material-ui/core"?"../../README.md":"./README.md","../../CHANGELOG.md","../../LICENSE"].map(e=>includeFileInBuild(e)));await addLicense(e);await typescriptCopy({from:srcPath,to:buildPath});await createModulePackages({from:srcPath,to:buildPath})}catch(e){console.error(e);process.exit(1)}}run();