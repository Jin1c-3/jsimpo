"use strict";const{compareRuntime}=require("./runtime");const createCachedParameterizedComparator=n=>{const o=new WeakMap;return e=>{const r=o.get(e);if(r!==undefined)return r;const t=n.bind(null,e);o.set(e,t);return t}};exports.compareChunksById=(e,r)=>{return compareIds(e.id,r.id)};exports.compareModulesByIdentifier=(e,r)=>{return compareIds(e.identifier(),r.identifier())};const compareModulesById=(e,r,t)=>{return compareIds(e.getModuleId(r),e.getModuleId(t))};exports.compareModulesById=createCachedParameterizedComparator(compareModulesById);const compareNumbers=(e,r)=>{if(typeof e!==typeof r){return typeof e<typeof r?-1:1}if(e<r)return-1;if(e>r)return 1;return 0};exports.compareNumbers=compareNumbers;const compareStringsNumeric=(e,r)=>{const t=e.split(/(\d+)/);const n=r.split(/(\d+)/);const o=Math.min(t.length,n.length);for(let e=0;e<o;e++){const a=t[e];const c=n[e];if(e%2===0){if(a.length>c.length){if(a.slice(0,c.length)>c)return 1;return-1}else if(c.length>a.length){if(c.slice(0,a.length)>a)return-1;return 1}else{if(a<c)return-1;if(a>c)return 1}}else{const s=+a;const i=+c;if(s<i)return-1;if(s>i)return 1}}if(n.length<t.length)return 1;if(n.length>t.length)return-1;return 0};exports.compareStringsNumeric=compareStringsNumeric;const compareModulesByPostOrderIndexOrIdentifier=(e,r,t)=>{const n=compareNumbers(e.getPostOrderIndex(r),e.getPostOrderIndex(t));if(n!==0)return n;return compareIds(r.identifier(),t.identifier())};exports.compareModulesByPostOrderIndexOrIdentifier=createCachedParameterizedComparator(compareModulesByPostOrderIndexOrIdentifier);const compareModulesByPreOrderIndexOrIdentifier=(e,r,t)=>{const n=compareNumbers(e.getPreOrderIndex(r),e.getPreOrderIndex(t));if(n!==0)return n;return compareIds(r.identifier(),t.identifier())};exports.compareModulesByPreOrderIndexOrIdentifier=createCachedParameterizedComparator(compareModulesByPreOrderIndexOrIdentifier);const compareModulesByIdOrIdentifier=(e,r,t)=>{const n=compareIds(e.getModuleId(r),e.getModuleId(t));if(n!==0)return n;return compareIds(r.identifier(),t.identifier())};exports.compareModulesByIdOrIdentifier=createCachedParameterizedComparator(compareModulesByIdOrIdentifier);const compareChunks=(e,r,t)=>{return e.compareChunks(r,t)};exports.compareChunks=createCachedParameterizedComparator(compareChunks);const compareIds=(e,r)=>{if(typeof e!==typeof r){return typeof e<typeof r?-1:1}if(e<r)return-1;if(e>r)return 1;return 0};exports.compareIds=compareIds;const compareStrings=(e,r)=>{if(e<r)return-1;if(e>r)return 1;return 0};exports.compareStrings=compareStrings;const compareChunkGroupsByIndex=(e,r)=>{return e.index<r.index?-1:1};exports.compareChunkGroupsByIndex=compareChunkGroupsByIndex;class TwoKeyWeakMap{constructor(){this._map=new WeakMap}get(e,r){const t=this._map.get(e);if(t===undefined){return undefined}return t.get(r)}set(e,r,t){let n=this._map.get(e);if(n===undefined){n=new WeakMap;this._map.set(e,n)}n.set(r,t)}}const concatComparatorsCache=new TwoKeyWeakMap;const concatComparators=(n,o,...e)=>{if(e.length>0){const[a,...c]=e;return concatComparators(n,concatComparators(o,a,...c))}const r=concatComparatorsCache.get(n,o);if(r!==undefined)return r;const t=(e,r)=>{const t=n(e,r);if(t!==0)return t;return o(e,r)};concatComparatorsCache.set(n,o,t);return t};exports.concatComparators=concatComparators;const compareSelectCache=new TwoKeyWeakMap;const compareSelect=(o,a)=>{const e=compareSelectCache.get(o,a);if(e!==undefined)return e;const r=(e,r)=>{const t=o(e);const n=o(r);if(t!==undefined&&t!==null){if(n!==undefined&&n!==null){return a(t,n)}return-1}else{if(n!==undefined&&n!==null){return 1}return 0}};compareSelectCache.set(o,a,r);return r};exports.compareSelect=compareSelect;const compareIteratorsCache=new WeakMap;const compareIterables=s=>{const e=compareIteratorsCache.get(s);if(e!==undefined)return e;const r=(e,r)=>{const t=e[Symbol.iterator]();const n=r[Symbol.iterator]();while(true){const o=t.next();const a=n.next();if(o.done){return a.done?0:-1}else if(a.done){return 1}const c=s(o.value,a.value);if(c!==0)return c}};compareIteratorsCache.set(s,r);return r};exports.compareIterables=compareIterables;exports.keepOriginalOrder=e=>{const t=new Map;let r=0;for(const n of e){t.set(n,r++)}return(e,r)=>compareNumbers(t.get(e),t.get(r))};exports.compareChunksNatural=r=>{const t=exports.compareModulesById(r);const e=compareIterables(t);return concatComparators(compareSelect(e=>e.name,compareIds),compareSelect(e=>e.runtime,compareRuntime),compareSelect(e=>r.getOrderedChunkModulesIterable(e,t),e))};exports.compareLocations=(e,r)=>{let t=typeof e==="object"&&e!==null;let n=typeof r==="object"&&r!==null;if(!t||!n){if(t)return 1;if(n)return-1;return 0}if("start"in e){if("start"in r){const o=e.start;const a=r.start;if(o.line<a.line)return-1;if(o.line>a.line)return 1;if(o.column<a.column)return-1;if(o.column>a.column)return 1}else return-1}else if("start"in r)return 1;if("name"in e){if("name"in r){if(e.name<r.name)return-1;if(e.name>r.name)return 1}else return-1}else if("name"in r)return 1;if("index"in e){if("index"in r){if(e.index<r.index)return-1;if(e.index>r.index)return 1}else return-1}else if("index"in r)return 1;return 0};