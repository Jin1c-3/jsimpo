utils.load("test/inspector/wasm-inspector-test.js");const{session,contextGroup,Protocol}=InspectorTest.start("Test conditional breakpoints in wasm.");session.setupScriptMap();const builder=new WasmModuleBuilder;const fib_body=[kExprLocalGet,0,kExprLocalGet,0,kExprI32Const,2,kExprI32LeS,kExprBrIf,0,kExprI32Const,1,kExprI32Sub,kExprCallFunction,0,kExprLocalGet,0,kExprI32Const,2,kExprI32Sub,kExprCallFunction,0,kExprI32Add];const fib=builder.addFunction("fib",kSig_i_i).addBody(fib_body).exportFunc();const module_bytes=builder.toArray();const find_offset=o=>fib.body_offset+fib_body.indexOf(o);const breakpoints=[{loc:find_offset(kExprLocalGet),cond:"false"},{loc:find_offset(kExprBrIf),cond:"true"},{loc:find_offset(kExprCallFunction),cond:"$var0.value==3"}];Protocol.Debugger.onPaused(async o=>{var t=o.params.callFrames;await session.logSourceLocation(t[0].location);var e=o.params.callFrames[0];for(var s of e.scopeChain){if(s.type!="local")continue;var r=await Protocol.Runtime.getProperties({objectId:s.object.objectId});for(var{name:n,value:a}of r.result.result){a=await WasmInspectorTest.getWasmValue(a);InspectorTest.log(`${n}: ${a}`)}}Protocol.Debugger.resume()});InspectorTest.runAsyncTestSuite([async function o(){await Protocol.Runtime.enable();await Protocol.Debugger.enable();InspectorTest.log("Instantiating.");WasmInspectorTest.instantiate(module_bytes);InspectorTest.log("Waiting for wasm script.");const[,{params:t}]=await Protocol.Debugger.onceScriptParsed(2);InspectorTest.log(`Got wasm script: ${t.url}`);for(let o of breakpoints){InspectorTest.log(`Setting breakpoint at offset ${o.loc}, condition "${o.cond}"`);InspectorTest.logMessage(await Protocol.Debugger.setBreakpoint({location:{scriptId:t.scriptId,lineNumber:0,columnNumber:o.loc},condition:o.cond}))}InspectorTest.log("Calling fib(5)");await WasmInspectorTest.evalWithUrl("instance.exports.fib(5)","runWasm");InspectorTest.log("fib returned!")}]);