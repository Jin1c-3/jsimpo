const{i18n}=require("../../services/proxy");const urlUtils=require("../../../shared/url-utils");const logging=require("@tryghost/logging");const errors=require("@tryghost/errors");const middleware=require("./lib/middleware");const router=require("./lib/router");const registerHelpers=require("./lib/helpers");const PRIVATE_KEYWORD="private";let checkSubdir=function r(){let e="";if(urlUtils.getSubdir()){e=urlUtils.getSubdir().split("/");if(e.pop()===PRIVATE_KEYWORD){logging.error(new errors.GhostError({message:i18n.t("errors.config.urlCannotContainPrivateSubdir.error"),context:i18n.t("errors.config.urlCannotContainPrivateSubdir.description"),help:i18n.t("errors.config.urlCannotContainPrivateSubdir.help")}));process.exit(0)}}};module.exports={activate:function r(e){let i=`/${PRIVATE_KEYWORD}/`;checkSubdir();e.routeService.registerRouter(i,router);registerHelpers(e)},setupMiddleware:function r(e){e.use(middleware.checkIsPrivate);e.use(middleware.filterPrivateRoutes)},setupErrorHandling:function r(e){e.use(middleware.handle404)}};