"use strict";describe("ngBind*",function(){var l;afterEach(function(){dealoc(l)});describe("ngBind",function(){it("should set text",inject(function(t,e){l=e('<div ng-bind="a"></div>')(t);expect(l.text()).toEqual("");t.a="misko";t.$digest();expect(l.hasClass("ng-binding")).toEqual(true);expect(l.text()).toEqual("misko")}));it("should set text to blank if undefined",inject(function(t,e){l=e('<div ng-bind="a"></div>')(t);t.a="misko";t.$digest();expect(l.text()).toEqual("misko");t.a=undefined;t.$digest();expect(l.text()).toEqual("");t.a=null;t.$digest();expect(l.text()).toEqual("")}));it("should suppress rendering of falsy values",inject(function(t,e){l=e('<div><span ng-bind="null"></span>'+'<span ng-bind="undefined"></span>'+"<span ng-bind=\"''\"></span>-"+'<span ng-bind="0"></span>'+'<span ng-bind="false"></span>'+"</div>")(t);t.$digest();expect(l.text()).toEqual("-0false")}));they("should jsonify $prop",[[{a:1},'{"a":1}'],[true,"true"],[false,"false"]],function(i){inject(function(t,e){t.value=i[0];l=e('<div ng-bind="value"></div>')(t);t.$digest();expect(l.text()).toEqual(i[1])})});it("should use custom toString when present",inject(function(t,e){t.value={toString:function(){return"foo"}};l=e('<div ng-bind="value"></div>')(t);t.$digest();expect(l.text()).toEqual("foo")}));it("should NOT use toString on array objects",inject(function(t,e){t.value=[];l=e('<div ng-bind="value"></div>')(t);t.$digest();expect(l.text()).toEqual("[]")}));it("should NOT use toString on Date objects",inject(function(t,e){t.value=new Date(2014,10,10,0,0,0);l=e('<div ng-bind="value"></div>')(t);t.$digest();expect(l.text()).toBe(JSON.stringify(t.value));expect(l.text()).not.toEqual(t.value.toString())}));it("should one-time bind if the expression starts with two colons",inject(function(t,e){l=e('<div ng-bind="::a"></div>')(t);t.a="lucas";expect(t.$$watchers.length).toEqual(1);t.$digest();expect(l.text()).toEqual("lucas");expect(t.$$watchers.length).toEqual(0);t.a=undefined;t.$digest();expect(l.text()).toEqual("lucas")}));it("should be possible to bind to a new value within the same $digest",inject(function(e,t){l=t('<div ng-bind="::a"></div>')(e);e.$watch("a",function(t){if(t==="foo"){e.a="bar"}});e.a="foo";e.$digest();expect(l.text()).toEqual("bar");e.a=undefined;e.$digest();expect(l.text()).toEqual("bar")}));it("should remove the binding if the value is defined at the end of a $digest loop",inject(function(e,t){l=t('<div ng-bind="::a"></div>')(e);e.$watch("a",function(t){if(t==="foo"){e.a=undefined}});e.a="foo";e.$digest();expect(l.text()).toEqual("");e.a="bar";e.$digest();expect(l.text()).toEqual("bar");e.a="man";e.$digest();expect(l.text()).toEqual("bar")}))});describe("ngBindTemplate",function(){it("should ngBindTemplate",inject(function(t,e){l=e('<div ng-bind-template="Hello {{name}}!"></div>')(t);t.name="Misko";t.$digest();expect(l.hasClass("ng-binding")).toEqual(true);expect(l.text()).toEqual("Hello Misko!")}));it("should one-time bind the expressions that start with ::",inject(function(t,e){l=e('<div ng-bind-template="{{::hello}} {{::name}}!"></div>')(t);t.name="Misko";expect(t.$$watchers.length).toEqual(2);t.$digest();expect(l.hasClass("ng-binding")).toEqual(true);expect(l.text()).toEqual(" Misko!");expect(t.$$watchers.length).toEqual(1);t.hello="Hello";t.name="Lucas";t.$digest();expect(l.text()).toEqual("Hello Misko!");expect(t.$$watchers.length).toEqual(0)}));it("should render object as JSON ignore $$",inject(function(t,e){l=e('<pre>{{ {key:"value", $$key:"hide"}  }}</pre>')(t);t.$digest();expect(fromJson(l.text())).toEqual({key:"value"})}))});describe("ngBindHtml",function(){it("should complain about accidental use of interpolation",inject(function(t){expect(function(){t('<div ng-bind-html="{{myHtml}}"></div>')}).toThrowMinErr("$parse","syntax","Syntax Error: Token '{' invalid key at column 2 of the expression [{{myHtml}}] starting at [{myHtml}}]")}));describe("SCE disabled",function(){beforeEach(function(){module(function(t){t.enabled(false)})});it("should set html",inject(function(t,e){l=e('<div ng-bind-html="html"></div>')(t);t.html='<div onclick="">hello</div>';t.$digest();expect(lowercase(l.html())).toEqual('<div onclick="">hello</div>')}));it("should update html",inject(function(t,e,i){l=e('<div ng-bind-html="html"></div>')(t);t.html="hello";t.$digest();expect(lowercase(l.html())).toEqual("hello");t.html="goodbye";t.$digest();expect(lowercase(l.html())).toEqual("goodbye")}));it("should one-time bind if the expression starts with two colons",inject(function(t,e){l=e('<div ng-bind-html="::html"></div>')(t);t.html='<div onclick="">hello</div>';expect(t.$$watchers.length).toEqual(1);t.$digest();expect(l.text()).toEqual("hello");expect(t.$$watchers.length).toEqual(0);t.html='<div onclick="">hello</div>';t.$digest();expect(l.text()).toEqual("hello")}))});describe("SCE enabled",function(){it("should NOT set html for untrusted values",inject(function(t,e){l=e('<div ng-bind-html="html"></div>')(t);t.html='<div onclick="">hello</div>';expect(function(){t.$digest()}).toThrow()}));it("should NOT set html for wrongly typed values",inject(function(t,e,i){l=e('<div ng-bind-html="html"></div>')(t);t.html=i.trustAsCss('<div onclick="">hello</div>');expect(function(){t.$digest()}).toThrow()}));it("should set html for trusted values",inject(function(t,e,i){l=e('<div ng-bind-html="html"></div>')(t);t.html=i.trustAsHtml('<div onclick="">hello</div>');t.$digest();expect(lowercase(l.html())).toEqual('<div onclick="">hello</div>')}));it("should update html",inject(function(t,e,i){l=e('<div ng-bind-html="html"></div>')(t);t.html=i.trustAsHtml("hello");t.$digest();expect(lowercase(l.html())).toEqual("hello");t.html=i.trustAsHtml("goodbye");t.$digest();expect(lowercase(l.html())).toEqual("goodbye")}));it("should not cause infinite recursion for trustAsHtml object watches",inject(function(t,e,i){l=e('<div ng-bind-html="getHtml()"></div>')(t);t.getHtml=function(){return i.trustAsHtml('<div onclick="">hello</div>')};t.$digest();expect(lowercase(l.html())).toEqual('<div onclick="">hello</div>')}));it("should handle custom $sce objects",function(){function e(t){this.val=t}module(function(t){t.decorator("$sce",function(t){t.trustAsHtml=function(t){return new e(t)};t.getTrustedHtml=function(t){return t.val};t.valueOf=function(t){return t instanceof e?t.val:t};return t})});inject(function(t,e,i){l=e('<div ng-bind-html="getHtml()"></div>')(t);var n="hello";t.getHtml=function(){return i.trustAsHtml(n)};t.$digest();expect(lowercase(l.html())).toEqual("hello");n="goodbye";t.$digest();expect(lowercase(l.html())).toEqual("goodbye")})});describe("when $sanitize is available",function(){beforeEach(function(){module("ngSanitize")});it("should sanitize untrusted html",inject(function(t,e){l=e('<div ng-bind-html="html"></div>')(t);t.html='<div onclick="">hello</div>';t.$digest();expect(lowercase(l.html())).toEqual("<div>hello</div>")}))})})})});