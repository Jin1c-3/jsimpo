import assert from"assert";import lodashStable from"lodash";import{LARGE_ARRAY_SIZE}from"./utils.js";import countBy from"../countBy.js";describe("countBy",function(){var e=[6.1,4.2,6.3];it("should transform keys by `iteratee`",function(){var t=countBy(e,Math.floor);assert.deepStrictEqual(t,{4:1,6:2})});it("should use `_.identity` when `iteratee` is nullish",function(){var o=[4,6,6],t=[,null,undefined],e=lodashStable.map(t,lodashStable.constant({4:1,6:2}));var a=lodashStable.map(t,function(t,e){return e?countBy(o,t):countBy(o)});assert.deepStrictEqual(a,e)});it("should work with `_.property` shorthands",function(){var t=countBy(["one","two","three"],"length");assert.deepStrictEqual(t,{3:2,5:1})});it("should only add values to own, not inherited, properties",function(){var t=countBy(e,function(t){return Math.floor(t)>4?"hasOwnProperty":"constructor"});assert.deepStrictEqual(t.constructor,1);assert.deepStrictEqual(t.hasOwnProperty,2)});it("should work with a number for `iteratee`",function(){var t=[[1,"a"],[2,"a"],[2,"b"]];assert.deepStrictEqual(countBy(t,0),{1:1,2:2});assert.deepStrictEqual(countBy(t,1),{a:2,b:1})});it("should work with an object for `collection`",function(){var t=countBy({a:6.1,b:4.2,c:6.3},Math.floor);assert.deepStrictEqual(t,{4:1,6:2})});it("should work in a lazy sequence",function(){var t=lodashStable.range(LARGE_ARRAY_SIZE).concat(lodashStable.range(Math.floor(LARGE_ARRAY_SIZE/2),LARGE_ARRAY_SIZE),lodashStable.range(Math.floor(LARGE_ARRAY_SIZE/1.5),LARGE_ARRAY_SIZE));var e=_(t).countBy().map(square).filter(isEven).take().value();assert.deepEqual(e,_.take(_.filter(_.map(countBy(t),square),isEven)))})});