"use strict";const common=require("../common");if(!common.hasCrypto)common.skip("missing crypto");const assert=require("assert");const tls=require("tls");const fixtures=require("../common/fixtures");const options={key:fixtures.readKey("agent2-key.pem"),cert:fixtures.readKey("agent2-cert.pem")};const messageUtf8="xâˆšab c";const messageAscii="xb\bab c";const server=tls.Server(options,common.mustCall(function(e){console.log("server: on secureConnection",e.getProtocol());e.end(messageUtf8)}));server.listen(0,function(){const e=tls.connect({port:this.address().port,rejectUnauthorized:false});let s="";e.setEncoding("ascii");e.on("data",function(e){console.log("client: on data",e);assert.ok(typeof e==="string");s+=e});e.on("secureConnect",common.mustCall(()=>{console.log("client: on secureConnect")}));e.on("close",common.mustCall(function(){console.log("client: on close");assert.strictEqual(e.readyState,"closed");assert.notStrictEqual(messageUtf8,s);assert.strictEqual(messageAscii,s);server.close()}))});