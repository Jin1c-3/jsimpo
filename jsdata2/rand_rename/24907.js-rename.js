const assert=require("assert");const _=require("lodash");const request=require("supertest");const jsonServer=require("../../src/server");describe("Server",()=>{let r;let e;let o;const t={"/api/*":"/$1","/blog/posts/:id/show":"/posts/:id","/comments/special/:userId-:body":"/comments/?userId=:userId&body=:body","/firstpostwithcomments":"/posts/1?_embed=comments","/articles\\?_id=:id":"/posts/:id"};beforeEach(()=>{o={};o.posts=[{id:1,body:"foo"},{id:2,body:"bar"}];o.tags=[{id:1,body:"Technology"},{id:2,body:"Photography"},{id:3,body:"photo"}];o.users=[{id:1,username:"Jim",tel:"0123"},{id:2,username:"George",tel:"123"}];o.comments=[{id:1,body:"foo",published:true,postId:1,userId:1},{id:2,body:"bar",published:false,postId:1,userId:2},{id:3,body:"baz",published:false,postId:2,userId:1},{id:4,body:"qux",published:true,postId:2,userId:2},{id:5,body:"quux",published:false,postId:2,userId:1}];o.buyers=[{id:1,name:"Aileen",country:"Colombia",total:100},{id:2,name:"Barney",country:"Colombia",total:200},{id:3,name:"Carley",country:"Colombia",total:300},{id:4,name:"Daniel",country:"Belize",total:30},{id:5,name:"Ellen",country:"Belize",total:20},{id:6,name:"Frank",country:"Belize",total:10},{id:7,name:"Grace",country:"Argentina",total:1},{id:8,name:"Henry",country:"Argentina",total:2},{id:9,name:"Isabelle",country:"Argentina",total:3}];o.refs=[{id:"abcd-1234",url:"http://example.com",postId:1,userId:1}];o.stringIds=[{id:"1234"}];o.deep=[{a:{b:1}},{a:1}];o.nested=[{resource:{name:"dewey"}},{resource:{name:"cheatem"}},{resource:{name:"howe"}}];o.list=[{id:1},{id:2},{id:3},{id:4},{id:5},{id:6},{id:7},{id:8},{id:9},{id:10},{id:11},{id:12},{id:13},{id:14},{id:15}];r=jsonServer.create();e=jsonServer.router(o);r.use(jsonServer.defaults());r.use(jsonServer.rewriter(t));r.use(e)});describe("GET /db",()=>{test("should respond with json and full database",()=>request(r).get("/db").expect("Content-Type",/json/).expect(200,o))});describe("GET /:resource",()=>{test("should respond with json and corresponding resources",()=>request(r).get("/posts").set("Origin","http://example.com").expect("Content-Type",/json/).expect("Access-Control-Allow-Credentials","true").expect("Access-Control-Allow-Origin","http://example.com").expect(200,o.posts));test("should respond with 404 if resource is not found",()=>request(r).get("/undefined").expect(404))});describe("GET /:resource?attr=&attr=",()=>{test("should respond with json and filter resources",()=>request(r).get("/comments?postId=1&published=true").expect("Content-Type",/json/).expect(200,[o.comments[0]]));test("should be strict",()=>request(r).get("/users?tel=123").expect("Content-Type",/json/).expect(200,[o.users[1]]));test("should support multiple filters",()=>request(r).get("/comments?id=1&id=2").expect("Content-Type",/json/).expect(200,[o.comments[0],o.comments[1]]));test("should support deep filter",()=>request(r).get("/deep?a.b=1").expect("Content-Type",/json/).expect(200,[o.deep[0]]));test("should ignore JSONP query parameters callback and _ ",()=>request(r).get("/comments?callback=1&_=1").expect("Content-Type",/text/).expect(new RegExp(o.comments[0].body)).expect(200));test("should ignore unknown query parameters",()=>request(r).get("/comments?foo=1&bar=2").expect("Content-Type",/json/).expect(200,o.comments));test("should not fail with null value",()=>{o.posts.push({id:99,body:null});return request(r).get("/posts?body=foo").expect("Content-Type",/json/).expect(200,[o.posts[0]])})});describe("GET /:resource?q=",()=>{test("should respond with json and make a full-text search",()=>request(r).get("/tags?q=pho").expect("Content-Type",/json/).expect(200,[o.tags[1],o.tags[2]]));test("should respond with json and make a deep full-text search",()=>request(r).get("/deep?q=1").expect("Content-Type",/json/).expect(200,o.deep));test("should return an empty array when nothing is matched",()=>request(r).get("/tags?q=nope").expect("Content-Type",/json/).expect(200,[]));test("should support other query parameters",()=>request(r).get("/comments?q=qu&published=true").expect("Content-Type",/json/).expect(200,[o.comments[3]]));test("should ignore duplicate q query parameters",()=>request(r).get("/comments?q=foo&q=bar").expect("Content-Type",/json/).expect(200,[o.comments[0]]));test("should support filtering by boolean value false",()=>request(r).get("/comments?published=false").expect("Content-Type",/json/).expect(200,[o.comments[1],o.comments[2],o.comments[4]]))});describe("GET /:resource?_end=",()=>{test("should respond with a sliced array",()=>request(r).get("/comments?_end=2").expect("Content-Type",/json/).expect("x-total-count",o.comments.length.toString()).expect("Access-Control-Expose-Headers","X-Total-Count").expect(200,o.comments.slice(0,2)))});describe("GET /:resource?_sort=",()=>{test("should respond with json and sort on a field",()=>request(r).get("/tags?_sort=body").expect("Content-Type",/json/).expect(200,[o.tags[1],o.tags[0],o.tags[2]]));test("should reverse sorting with _order=DESC",()=>request(r).get("/tags?_sort=body&_order=DESC").expect("Content-Type",/json/).expect(200,[o.tags[2],o.tags[0],o.tags[1]]));test("should reverse sorting with _order=desc (case insensitive)",()=>request(r).get("/tags?_sort=body&_order=desc").expect("Content-Type",/json/).expect(200,[o.tags[2],o.tags[0],o.tags[1]]));test("should sort on numerical field",()=>request(r).get("/posts?_sort=id&_order=DESC").expect("Content-Type",/json/).expect(200,o.posts.reverse()));test("should sort on nested field",()=>request(r).get("/nested?_sort=resource.name").expect("Content-Type",/json/).expect(200,[o.nested[1],o.nested[0],o.nested[2]]));test("should sort on multiple fields",()=>request(r).get("/buyers?_sort=country,total&_order=asc,desc").expect("Content-Type",/json/).expect(200,[o.buyers[8],o.buyers[7],o.buyers[6],o.buyers[3],o.buyers[4],o.buyers[5],o.buyers[2],o.buyers[1],o.buyers[0]]))});describe("GET /:resource?_start=&_end=",()=>{test("should respond with a sliced array",()=>request(r).get("/comments?_start=1&_end=2").expect("Content-Type",/json/).expect("X-Total-Count",o.comments.length.toString()).expect("Access-Control-Expose-Headers","X-Total-Count").expect(200,o.comments.slice(1,2)))});describe("GET /:resource?_start=&_limit=",()=>{test("should respond with a limited array",()=>request(r).get("/comments?_start=1&_limit=1").expect("Content-Type",/json/).expect("X-Total-Count",o.comments.length.toString()).expect("Access-Control-Expose-Headers","X-Total-Count").expect(200,o.comments.slice(1,2)))});describe("GET /:resource?_page=",()=>{test("should paginate",()=>request(r).get("/list?_page=2").expect("Content-Type",/json/).expect("x-total-count",o.list.length.toString()).expect("Access-Control-Expose-Headers","X-Total-Count, Link").expect(200,o.list.slice(10,20)))});describe("GET /:resource?_page=&_limit=",()=>{test("should paginate with a custom limit",()=>{const e=['<http://localhost/list?_page=1&_limit=1>; rel="first"','<http://localhost/list?_page=1&_limit=1>; rel="prev"','<http://localhost/list?_page=3&_limit=1>; rel="next"','<http://localhost/list?_page=15&_limit=1>; rel="last"'].join(", ");return request(r).get("/list?_page=2&_limit=1").set("host","localhost").expect("Content-Type",/json/).expect("x-total-count",o.list.length.toString()).expect("link",e).expect("Access-Control-Expose-Headers","X-Total-Count, Link").expect(200,o.list.slice(1,2))})});describe("GET /:resource?attr_gte=&attr_lte=",()=>{test("should respond with a limited array",()=>request(r).get("/comments?id_gte=2&id_lte=3").expect("Content-Type",/json/).expect(200,o.comments.slice(1,3)))});describe("GET /:resource?attr_ne=",()=>{test("should respond with a limited array",()=>request(r).get("/comments?id_ne=1").expect("Content-Type",/json/).expect(200,o.comments.slice(1)));test("should accept multiple parameters",()=>request(r).get("/comments?id_ne=1&id_ne=2").expect("Content-Type",/json/).expect(200,o.comments.slice(2)))});describe("GET /:resource?attr_like=",()=>{test("should respond with an array that matches the like operator (case insensitive)",()=>request(r).get("/tags?body_like=photo").expect("Content-Type",/json/).expect(200,[o.tags[1],o.tags[2]]));test("should accept multiple parameters",()=>request(r).get("/tags?body_like=photo&body_like=tech").expect("Content-Type",/json/).expect(200,o.tags))});describe("GET /:parent/:parentId/:resource",()=>{test("should respond with json and corresponding nested resources",()=>request(r).get("/posts/1/comments").expect("Content-Type",/json/).expect(200,[o.comments[0],o.comments[1]]))});describe("GET /:resource/:id",()=>{test("should respond with json and corresponding resource",()=>request(r).get("/posts/1").expect("Content-Type",/json/).expect(200,o.posts[0]));test("should support string id, respond with json and corresponding resource",()=>request(r).get("/refs/abcd-1234").expect("Content-Type",/json/).expect(200,o.refs[0]));test("should support integer id as string",()=>request(r).get("/stringIds/1234").expect("Content-Type",/json/).expect(200,o.stringIds[0]));test("should respond with 404 if resource is not found",()=>request(r).get("/posts/9001").expect("Content-Type",/json/).expect(404,{}))});describe("GET /:resource?_embed=",()=>{test("should respond with corresponding resources and embedded resources",()=>{const e=_.cloneDeep(o.posts);e[0].comments=[o.comments[0],o.comments[1]];e[1].comments=[o.comments[2],o.comments[3],o.comments[4]];return request(r).get("/posts?_embed=comments").expect("Content-Type",/json/).expect(200,e)})});describe("GET /:resource?_embed&_embed=",()=>{test("should respond with corresponding resources and embedded resources",()=>{const e=_.cloneDeep(o.posts);e[0].comments=[o.comments[0],o.comments[1]];e[0].refs=[o.refs[0]];e[1].comments=[o.comments[2],o.comments[3],o.comments[4]];e[1].refs=[];return request(r).get("/posts?_embed=comments&_embed=refs").expect("Content-Type",/json/).expect(200,e)})});describe("GET /:resource/:id?_embed=",()=>{test("should respond with corresponding resources and embedded resources",()=>{const e=_.cloneDeep(o.posts[0]);e.comments=[o.comments[0],o.comments[1]];return request(r).get("/posts/1?_embed=comments").expect("Content-Type",/json/).expect(200,e)})});describe("GET /:resource/:id?_embed=&_embed=",()=>{test("should respond with corresponding resource and embedded resources",()=>{const e=_.cloneDeep(o.posts[0]);e.comments=[o.comments[0],o.comments[1]];e.refs=[o.refs[0]];return request(r).get("/posts/1?_embed=comments&_embed=refs").expect("Content-Type",/json/).expect(200,e)})});describe("GET /:resource?_expand=",()=>{test("should respond with corresponding resource and expanded inner resources",()=>{const e=_.cloneDeep(o.refs);e[0].post=o.posts[0];return request(r).get("/refs?_expand=post").expect("Content-Type",/json/).expect(200,e)})});describe("GET /:resource/:id?_expand=",()=>{test("should respond with corresponding resource and expanded inner resources",()=>{const e=_.cloneDeep(o.comments[0]);e.post=o.posts[0];return request(r).get("/comments/1?_expand=post").expect("Content-Type",/json/).expect(200,e)})});describe("GET /:resource?_expand=&_expand",()=>{test("should respond with corresponding resource and expanded inner resources",()=>{const e=_.cloneDeep(o.refs);e[0].post=o.posts[0];e[0].user=o.users[0];return request(r).get("/refs?_expand=post&_expand=user").expect("Content-Type",/json/).expect(200,e)})});describe("GET /:resource/:id?_expand=&_expand=",()=>{test("should respond with corresponding resource and expanded inner resources",()=>{const e=o.comments[0];e.post=o.posts[0];e.user=o.users[0];return request(r).get("/comments/1?_expand=post&_expand=user").expect("Content-Type",/json/).expect(200,e)})});describe("GET /:resource>_delay=",()=>{test("should delay response",s=>{const o=new Date;request(r).get("/posts?_delay=1100").expect(200,function(e){const t=new Date;s(t-o>1e3?e:new Error("Request wasn't delayed"))})})});describe("POST /:resource",()=>{test("should respond with json, create a resource and increment id",async()=>{await request(r).post("/posts").send({body:"foo",booleanValue:true,integerValue:1}).expect("Access-Control-Expose-Headers","Location").expect("Location",/posts\/3$/).expect("Content-Type",/json/).expect(201,{id:3,body:"foo",booleanValue:true,integerValue:1});assert.strictEqual(o.posts.length,3)});test("should support x-www-form-urlencoded",async()=>{await request(r).post("/posts").type("form").send({body:"foo",booleanValue:true,integerValue:1}).expect("Content-Type",/json/).expect(201,{id:3,body:"foo",booleanValue:"true",integerValue:"1"});assert.strictEqual(o.posts.length,3)});test("should respond with json, create a resource and generate string id",async()=>{await request(r).post("/refs").send({url:"http://foo.com",postId:1}).expect("Content-Type",/json/).expect(201);assert.strictEqual(o.refs.length,2)})});describe("POST /:parent/:parentId/:resource",()=>{test("should respond with json and set parentId",()=>request(r).post("/posts/1/comments").send({body:"foo"}).expect("Content-Type",/json/).expect(201,{id:6,postId:"1",body:"foo"}))});describe("POST /:resource?_delay=",()=>{test("should delay response",s=>{const o=new Date;request(r).post("/posts?_delay=1100").send({body:"foo",booleanValue:true,integerValue:1}).expect(201,function(e){const t=new Date;s(t-o>1e3?e:new Error("Request wasn't delayed"))})})});describe("PUT /:resource/:id",()=>{test("should respond with json and replace resource",async()=>{const e={id:1,booleanValue:true,integerValue:1};const t=await request(r).put("/posts/1").set("Accept","application/json").send(e).expect("Content-Type",/json/).expect(200,e);assert.deepStrictEqual(t.body,e);assert.deepStrictEqual(o.posts[0],e)});test("should respond with 404 if resource is not found",()=>request(r).put("/posts/9001").send({id:1,body:"bar"}).expect("Content-Type",/json/).expect(404,{}))});describe("PUT /:resource:id?_delay=",()=>{test("should delay response",s=>{const o=new Date;request(r).put("/posts/1?_delay=1100").set("Accept","application/json").send({id:1,booleanValue:true,integerValue:1}).expect(200,function(e){const t=new Date;s(t-o>1e3?e:new Error("Request wasn't delayed"))})})});describe("PATCH /:resource/:id",()=>{test("should respond with json and update resource",async()=>{const e={body:"bar"};const t={id:1,body:"bar"};const s=await request(r).patch("/posts/1").send(e).expect("Content-Type",/json/).expect(200,t);assert.deepStrictEqual(s.body,t);assert.deepStrictEqual(o.posts[0],t)});test("should respond with 404 if resource is not found",()=>request(r).patch("/posts/9001").send({body:"bar"}).expect("Content-Type",/json/).expect(404,{}))});describe("PATCH /:resource:id?_delay=",()=>{test("should delay response",s=>{const o=new Date;request(r).patch("/posts/1?_delay=1100").send({body:"bar"}).send({id:1,booleanValue:true,integerValue:1}).expect(200,function(e){const t=new Date;s(t-o>1e3?e:new Error("Request wasn't delayed"))})})});describe("DELETE /:resource/:id",()=>{test("should respond with empty data, destroy resource and dependent resources",async()=>{await request(r).del("/posts/1").expect(200,{});assert.strictEqual(o.posts.length,1);assert.strictEqual(o.comments.length,3)});test("should respond with 404 if resource is not found",()=>request(r).del("/posts/9001").expect("Content-Type",/json/).expect(404,{}))});describe("DELETE /:resource:id?_delay=",()=>{test("should delay response",s=>{const o=new Date;request(r).del("/posts/1?_delay=1100").send({id:1,booleanValue:true,integerValue:1}).expect(200,function(e){const t=new Date;s(t-o>1e3?e:new Error("Request wasn't delayed"))})})});describe("Static routes",()=>{describe("GET /",()=>{test("should respond with html",()=>request(r).get("/").expect(/You're successfully running JSON Server/).expect(200))});describe("GET /script.js",()=>{test("should respond with js",()=>request(r).get("/script.js").expect("Content-Type",/javascript/).expect(200))});describe("GET /style.css",()=>{test("should respond with css",()=>request(r).get("/style.css").expect("Content-Type",/css/).expect(200))})});describe("Database state",()=>{test("should be accessible",()=>{assert(e.db.getState())})});describe("Responses",()=>{test("should have no cache headers (for IE)",()=>request(r).get("/db").expect("Cache-Control","no-cache").expect("Pragma","no-cache").expect("Expires","-1"))});describe("Rewriter",()=>{test("should rewrite using prefix",()=>request(r).get("/api/posts/1").expect(o.posts[0]));test("should rewrite using params",()=>request(r).get("/blog/posts/1/show").expect(o.posts[0]));test("should rewrite using query without params",()=>{const e=_.cloneDeep(o.posts[0]);e.comments=[o.comments[0],o.comments[1]];return request(r).get("/firstpostwithcomments").expect(e)});test("should rewrite using params and query",()=>request(r).get("/comments/special/1-quux").expect(200,[o.comments[4]]));test("should rewrite query params",()=>request(r).get("/articles?_id=1").expect(o.posts[0]));test("should expose routes",()=>request(r).get("/__rules").expect(t))});describe("router.render",()=>{beforeEach(()=>{e.render=(e,t)=>{t.jsonp({data:t.locals.data})}});test("should be possible to wrap response",()=>request(r).get("/posts/1").expect("Content-Type",/json/).expect(200,{data:o.posts[0]}))});describe("router.db._.id",()=>{beforeEach(()=>{e.db.setState({posts:[{_id:1}]});e.db._.id="_id"});test("should be possible to GET using a different id property",()=>request(r).get("/posts/1").expect("Content-Type",/json/).expect(200,e.db.getState().posts[0]));test("should be possible to POST using a different id property",()=>request(r).post("/posts").send({body:"hello"}).expect("Content-Type",/json/).expect(201,{_id:2,body:"hello"}))})});