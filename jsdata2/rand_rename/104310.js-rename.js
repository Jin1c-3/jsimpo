"use strict";const vnopts=require("vnopts");const leven=require("leven");const chalk=require("chalk");const getLast=require("../utils/get-last.js");const cliDescriptor={key:e=>e.length===1?`-${e}`:`--${e}`,value:e=>vnopts.apiDescriptor.value(e),pair:({key:e,value:r})=>r===false?`--no-${e}`:r===true?cliDescriptor.key(e):r===""?`${cliDescriptor.key(e)} without an argument`:`${cliDescriptor.key(e)}=${r}`};class FlagSchema extends vnopts.ChoiceSchema{constructor({name:e,flags:r}){super({name:e,choices:r});this._flags=[...r].sort()}preprocess(r,e){if(typeof r==="string"&&r.length>0&&!this._flags.includes(r)){const n=this._flags.find(e=>leven(e,r)<3);if(n){e.logger.warn([`Unknown flag ${chalk.yellow(e.descriptor.value(r))},`,`did you mean ${chalk.blue(e.descriptor.value(n))}?`].join(" "));return n}}return r}expected(){return"a flag"}}let hasDeprecationWarned;function normalizeOptions(e,r,{logger:n,isCLI:a=false,passThrough:t=false}={}){const o=!t?(e,r,n)=>{const{_:a,...t}=n.schemas;return vnopts.levenUnknownHandler(e,r,{...n,schemas:t})}:Array.isArray(t)?(e,r)=>!t.includes(e)?undefined:{[e]:r}:(e,r)=>({[e]:r});const s=a?cliDescriptor:vnopts.apiDescriptor;const i=optionInfosToSchemas(r,{isCLI:a});const c=new vnopts.Normalizer(i,{logger:n,unknown:o,descriptor:s});const p=n!==false;if(p&&hasDeprecationWarned){c._hasDeprecationWarned=hasDeprecationWarned}const l=c.normalize(e);if(p){hasDeprecationWarned=c._hasDeprecationWarned}return l}function optionInfosToSchemas(e,{isCLI:r}){const n=[];if(r){n.push(vnopts.AnySchema.create({name:"_"}))}for(const a of e){n.push(optionInfoToSchema(a,{isCLI:r,optionInfos:e}));if(a.alias&&r){n.push(vnopts.AliasSchema.create({name:a.alias,sourceName:a.name}))}}return n}function optionInfoToSchema(a,{isCLI:e,optionInfos:r}){let n;const t={name:a.name};const o={};switch(a.type){case"int":n=vnopts.IntegerSchema;if(e){t.preprocess=e=>Number(e)}break;case"string":n=vnopts.StringSchema;break;case"choice":n=vnopts.ChoiceSchema;t.choices=a.choices.map(e=>typeof e==="object"&&e.redirect?{...e,redirect:{to:{key:a.name,value:e.redirect}}}:e);break;case"boolean":n=vnopts.BooleanSchema;break;case"flag":n=FlagSchema;t.flags=r.flatMap(e=>[e.alias,e.description&&e.name,e.oppositeDescription&&`no-${e.name}`].filter(Boolean));break;case"path":n=vnopts.StringSchema;break;default:throw new Error(`Unexpected type ${a.type}`)}if(a.exception){t.validate=(e,r,n)=>a.exception(e)||r.validate(e,n)}else{t.validate=(e,r,n)=>e===undefined||r.validate(e,n)}if(a.redirect){o.redirect=e=>!e?undefined:{to:{key:a.redirect.option,value:a.redirect.value}}}if(a.deprecated){o.deprecated=true}if(e&&!a.array){const s=t.preprocess||(e=>e);t.preprocess=(e,r,n)=>r.preprocess(s(Array.isArray(e)?getLast(e):e),n)}return a.array?vnopts.ArraySchema.create({...e?{preprocess:e=>Array.isArray(e)?e:[e]}:{},...o,valueSchema:n.create(t)}):n.create({...t,...o})}function normalizeApiOptions(e,r,n){return normalizeOptions(e,r,n)}function normalizeCliOptions(e,r,n){return normalizeOptions(e,r,{isCLI:true,...n})}module.exports={normalizeApiOptions:normalizeApiOptions,normalizeCliOptions:normalizeCliOptions};