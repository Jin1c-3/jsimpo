const common = require(_0x1aa398(267)), assert = require(_0x1aa398(268)), test_number = require(_0x1aa398(269) + common[_0x1aa398(270)] + _0x1aa398(271));
function testNumber(_0x2aa80c) {
    const _0x20e0d7 = _0x1aa398;
    assert[_0x20e0d7(272)](_0x2aa80c, test_number[_0x20e0d7(273)](_0x2aa80c));
}
testNumber(-6955 + -25 * 170 + 11205), testNumber(-(26 * 4 + 3356 + 10 * -346)), testNumber(-2131 + -8863 * -1 + -6731), testNumber(-(-7357 + -5 * -1059 + 2063)), testNumber(-6 * -771 + -2 * 122 + -4282), testNumber(3 * 2969 + -6980 + 97 * 2), testNumber(-(5856 + -3166 + -1457)), testNumber(-193317 * 2 + -598687 * 1 + 22 * 89632), testNumber(-(-498349 + -151532 * 9 + -1419406 * -2)), testNumber(9.87654322134568e+64), testNumber(-4.350987086545761e+63), testNumber(Number[_0x1aa398(274)]), testNumber(Number['MAX_SAFE_INTEGER']), testNumber(Number['MAX_SAFE_INTEGER'] + (-887 * 7 + -7603 + 13822)), testNumber(Number[_0x1aa398(275)]), testNumber(Number[_0x1aa398(276)]), testNumber(Number[_0x1aa398(276)] + (299 + -7179 + 6890)), testNumber(Number[_0x1aa398(277)]), testNumber(Number[_0x1aa398(278)]), testNumber(Number[_0x1aa398(279)]);
function _0x6463(_0x228f5c, _0x414693) {
    return _0x6463 = function (_0x4ab75d, _0x148f8f) {
        _0x4ab75d = _0x4ab75d - (-1154 * 1 + -5645 + 7055);
        let _0x74c072 = _0x48ef[_0x4ab75d];
        return _0x74c072;
    }, _0x6463(_0x228f5c, _0x414693);
}
function testUint32(_0x4099b3, _0x21ad52 = _0x4099b3) {
    const _0x438821 = _0x1aa398;
    assert[_0x438821(272)](_0x21ad52, test_number[_0x438821(280)](_0x4099b3));
}
testUint32(-2 * 1282 + -1092 + 3656, -7376 + -5816 + -388 * -34), testUint32(-(126 * 20 + -1 * -3923 + -6443), -18 * -210 + 4946 + -1 * 8726), testUint32(7623518243 * 1 + -73 * 99692467 + 3948999143 * 1), testUint32(-71252 * -30902 + -7583087160 + 9676225152, -3708 + 7048 + 2 * -1670), testUint32(496966 * 13073 + 665083568 + 2866952789 * -1, -7 * 1069 + 89 * -44 + 5700 * 2), testUint32((-5 * 1968 + -61 * 139 + 18336) * (2560560824 + -3264795444 + 2499600958 * 2) + (61 * -19 + -604 + -1764 * -1), 1 * 7867 + 1 * -773 + 7093 * -1), testUint32(-(10 * -23 + -452 * 2 + -1 * -1135), -951266644 + -4109905975 + 11 * 850558174);
function testInt32(_0x9b74c8, _0x5157c0 = _0x9b74c8) {
    assert['strictEqual'](_0x5157c0, test_number['TestInt32Truncation'](_0x9b74c8));
}
testInt32(200 * -31 + 2174 * -1 + 8374, -258 * -29 + -7 * 634 + -3044 * 1), testInt32(-(-1 * -8751 + -2852 + -5899), -4359 + -8 * -334 + 1687), testInt32(-Math[_0x1aa398(281)](5316 + -4855 + -459, 8456 + -1 * -983 + -9408)), testInt32(Math['pow'](1 * -3495 + -1040 + 349 * 13, -9557 * 1 + 3912 + 6 * 946) - (-2 * -3982 + 3507 + 5 * -2294)), testInt32(1 * 3756105237 + -2522973501 + 3061835561, 5615 + 8719 * 1 + -14333 * 1), testInt32(2127891984 + 2000392 * 3841 + -29033844 * 190, 1390 * 2 + 3849 + 1 * -6629), testInt32(26 * 17458748 + -2708268 * 556 + 5346836855, -(9550 + -2081 + -7468)), testInt32((-4 * -1191576569 + 6834658692 + -7305997672) * (-5486 + 3804 + -7 * -241) + (-3879 + -1 * 6433 + -1 * -10315), -4382 + 9987 + -5602), testInt32(Number['MIN_SAFE_INTEGER'], -1 * 6469 + 4610 + 465 * 4), testInt32(Number[_0x1aa398(282)], -(-7618 + 7389 + 230 * 1)), testInt32(-Math[_0x1aa398(281)](7049 + 4689 + 2 * -5868, 22 * 103 + -7822 + 5619) + (Math['pow'](4874 + 5 * 1187 + -10807 * 1, 8318 + -3672 * -2 + -1423 * 11) + (2351 + 5480 + 174 * -45)), 638 + -2 * -863 + -1340), testInt32(Math[_0x1aa398(281)](3223 + 751 * 10 + -3577 * 3, 8317 + -417 * 9 + -4501 * 1) - (Math[_0x1aa398(281)](-5 * -1163 + 2739 + 8552 * -1, -7184 * 1 + -4070 + 1 * 11263) + (7898 + -3902 + -3995)), -(5986 + -7654 + 2692)), testInt32(-Number[_0x1aa398(275)], 1 * -9363 + 335 + 9028), testInt32(Number[_0x1aa398(275)], -8061 + -645 + 2 * 4353), testInt32(-Number[_0x1aa398(276)], 6655 + -5203 * -1 + 22 * -539), testInt32(Number[_0x1aa398(276)], 3148 * 2 + -7064 + 768), testInt32(-Math['pow'](4557 + 5769 + -10324, 43 * -107 + 2696 * 1 + -492 * -4) + Math[_0x1aa398(281)](1939 + -4728 + 2791, -1805 + 11 * -331 + 5 * 1091), -2454 + -3320 + -2887 * -2), testInt32(Math[_0x1aa398(281)](-756 * 13 + -4174 * -1 + 5656, 337 * -1 + -53 * -3 + 241) - Math[_0x1aa398(281)](-315 * 23 + 5376 + 1871, -1 * -5963 + 376 + -15 * 422), 6667 * -1 + -1 * 6343 + 5 * 2602), testInt32(Number[_0x1aa398(277)], -1 * 6065 + 364 + 1 * 5701), testInt32(Number[_0x1aa398(278)], -2976 + 66 * -26 + -51 * -92), testInt32(Number[_0x1aa398(279)], 604 + 5456 + -6060);
function testInt64(_0x509e14, _0x577650 = _0x509e14) {
    const _0x5b0070 = _0x1aa398;
    assert[_0x5b0070(272)](_0x577650, test_number[_0x5b0070(283)](_0x509e14));
}
const RANGEERROR_POSITIVE = Math[_0x1aa398(281)](-3550 + -4 * 2033 + -1 * -11684, -809 + -3272 + 4144), RANGEERROR_NEGATIVE = -Math[_0x1aa398(281)](3 * -538 + -3977 * 1 + 5593, 2125 + -4932 * -1 + -269 * 26);
testInt64(-2251 * -1 + -8600 + -907 * -7, -6259 * -1 + -4995 + -1264), testInt64(-(-3194 + -6679 + 9873), 335 + -7402 * 1 + -37 * -191), testInt64(Number['MIN_SAFE_INTEGER']), testInt64(Number[_0x1aa398(282)]), testInt64(-Math[_0x1aa398(281)](-173 * -26 + 6545 + -181 * 61, 8605 + 1 * 393 + -8935) + (Math[_0x1aa398(281)](-9324 + -2026 + 6 * 1892, -1 * -7079 + -6117 + -953) + (-7025 + 8210 + -37 * 32))), testInt64(Math['pow'](9695 + -2176 + -7517, -1563 + 3283 + 1 * -1657) - (Math['pow'](1 * 3884 + 2062 * 2 + -8006, -248 * -1 + -2460 + 2221) + (-2930 * -1 + -71 * -75 + -2 * 4127))), testInt64(-Number[_0x1aa398(275)], -97 * -67 + 13 * 447 + -12310), testInt64(Number[_0x1aa398(275)], 487 + -8637 + 8150), testInt64(-Number[_0x1aa398(276)], RANGEERROR_NEGATIVE), testInt64(Number[_0x1aa398(276)], RANGEERROR_POSITIVE), testInt64(-Math[_0x1aa398(281)](4305 * 2 + 9295 + 17903 * -1, 1 * 8453 + 7 * -1304 + 246 * 3) + Math[_0x1aa398(281)](-3345 + 4216 + -869 * 1, -8781 + -2747 * 2 + -7142 * -2), RANGEERROR_NEGATIVE), testInt64(Math[_0x1aa398(281)](-7 * -1321 + -7561 + -1684, 3898 + 785 * -2 + -151 * 15) - Math[_0x1aa398(281)](843 * 11 + -5368 + -3903, -5139 + 193 * 41 + -7 * 395), RANGEERROR_POSITIVE), testInt64(Number[_0x1aa398(277)], 17 * -239 + 6634 + -2571 * 1), testInt64(Number[_0x1aa398(278)], 2 * -4628 + 2 * -4721 + 1 * 18698), testInt64(Number[_0x1aa398(279)], 6900 * -1 + 4634 + 2266);