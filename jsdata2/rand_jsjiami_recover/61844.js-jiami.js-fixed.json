{
    "type": "Program",
    "body": [
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "test"
            },
            "params": [],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "TryStatement",
                        "block": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "test"
                                        },
                                        "arguments": [
                                            {
                                                "type": "Literal",
                                                "value": 1,
                                                "raw": "0x1"
                                            },
                                            {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "test"
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": 1,
                                                        "raw": "0x1"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "handler": {
                            "type": "CatchClause",
                            "param": {
                                "type": "Identifier",
                                "name": "_0x525d5e"
                            },
                            "body": {
                                "type": "BlockStatement",
                                "body": [
                                    {
                                        "type": "IfStatement",
                                        "test": {
                                            "type": "BinaryExpression",
                                            "operator": "!==",
                                            "left": {
                                                "type": "Literal",
                                                "value": "nMbqZ",
                                                "raw": "'nMbqZ'"
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": "vifvj",
                                                "raw": "'vifvj'"
                                            }
                                        },
                                        "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "assertFalse"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "UnaryExpression",
                                                                "operator": "delete",
                                                                "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "_0x525d5e"
                                                                },
                                                                "prefix": true
                                                            },
                                                            {
                                                                "type": "Literal",
                                                                "value": "deleting catch variable",
                                                                "raw": "'deleting catch variable'"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "Identifier",
                                                            "name": "assertEquals"
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": 42,
                                                                "raw": "0x2a"
                                                            },
                                                            {
                                                                "type": "Identifier",
                                                                "name": "_0x525d5e"
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        },
                                        "alternate": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "exception"
                                                        },
                                                        "right": {
                                                            "type": "UnaryExpression",
                                                            "operator": "!",
                                                            "argument": {
                                                                "type": "UnaryExpression",
                                                                "operator": "!",
                                                                "argument": {
                                                                    "type": "ArrayExpression",
                                                                    "elements": []
                                                                },
                                                                "prefix": true
                                                            },
                                                            "prefix": true
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        "finalizer": null
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "exception"
                    },
                    "init": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                            "type": "ArrayExpression",
                            "elements": []
                        },
                        "prefix": true
                    }
                }
            ],
            "kind": "var"
        },
        {
            "type": "TryStatement",
            "block": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "test"
                            },
                            "arguments": []
                        }
                    }
                ]
            },
            "handler": {
                "type": "CatchClause",
                "param": {
                    "type": "Identifier",
                    "name": "_0x5e2efe"
                },
                "body": {
                    "type": "BlockStatement",
                    "body": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "exception"
                                },
                                "right": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                        "type": "UnaryExpression",
                                        "operator": "!",
                                        "argument": {
                                            "type": "ArrayExpression",
                                            "elements": []
                                        },
                                        "prefix": true
                                    },
                                    "prefix": true
                                }
                            }
                        }
                    ]
                }
            },
            "finalizer": null
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertTrue"
                },
                "arguments": [
                    {
                        "type": "Identifier",
                        "name": "exception"
                    }
                ]
            }
        }
    ],
    "sourceType": "script"
}