{
    "type": "Program",
    "body": [
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "description"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "This tests that array construction via a host call works.",
                        "raw": "'This\\x20tests\\x20that\\x20array\\x20construction\\x20via\\x20a\\x20host\\x20call\\x20works.'"
                    }
                ]
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "constructArray"
            },
            "params": [
                {
                    "type": "Identifier",
                    "name": "_0x59a95e"
                }
            ],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ReturnStatement",
                        "argument": {
                            "type": "NewExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "_0x59a95e"
                            },
                            "arguments": [
                                {
                                    "type": "Literal",
                                    "value": 100,
                                    "raw": "0x64"
                                }
                            ]
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ForStatement",
            "init": {
                "type": "VariableDeclaration",
                "declarations": [
                    {
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "i"
                        },
                        "init": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0x0"
                        }
                    }
                ],
                "kind": "var"
            },
            "test": {
                "type": "BinaryExpression",
                "operator": "<",
                "left": {
                    "type": "Identifier",
                    "name": "i"
                },
                "right": {
                    "type": "Literal",
                    "value": 3,
                    "raw": "0x3"
                }
            },
            "update": {
                "type": "UpdateExpression",
                "operator": "++",
                "argument": {
                    "type": "Identifier",
                    "name": "i"
                },
                "prefix": true
            },
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "array"
                                },
                                "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "constructArray"
                                    },
                                    "arguments": [
                                        {
                                            "type": "Identifier",
                                            "name": "Array"
                                        }
                                    ]
                                }
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "shouldBeTrue"
                            },
                            "arguments": [
                                {
                                    "type": "Literal",
                                    "value": "array instanceof Array",
                                    "raw": "'array\\x20instanceof\\x20Array'"
                                }
                            ]
                        }
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "CallExpression",
                            "callee": {
                                "type": "Identifier",
                                "name": "shouldBe"
                            },
                            "arguments": [
                                {
                                    "type": "Literal",
                                    "value": "array.length",
                                    "raw": "'array.length'"
                                },
                                {
                                    "type": "Literal",
                                    "value": "100",
                                    "raw": "'100'"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    ],
    "sourceType": "script"
}