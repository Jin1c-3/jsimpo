{
    "type": "Program",
    "body": [
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "Foo"
            },
            "params": [],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "ConditionalExpression",
                            "test": {
                                "type": "BinaryExpression",
                                "operator": "instanceof",
                                "left": {
                                    "type": "ThisExpression"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "Foo"
                                }
                            },
                            "consequent": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                    "type": "ThisExpression"
                                },
                                "property": {
                                    "type": "Literal",
                                    "value": "constructor",
                                    "raw": "'constructor'"
                                }
                            },
                            "alternate": {
                                "type": "UnaryExpression",
                                "operator": "void",
                                "argument": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0x0"
                                },
                                "prefix": true
                            }
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                            "type": "Identifier",
                            "name": "Foo"
                        },
                        "property": {
                            "type": "Literal",
                            "value": "prototype",
                            "raw": "'prototype'"
                        }
                    },
                    "property": {
                        "type": "Literal",
                        "value": "test",
                        "raw": "'test'"
                    }
                },
                "right": {
                    "type": "FunctionExpression",
                    "id": {
                        "type": "Identifier",
                        "name": "_target"
                    },
                    "params": [],
                    "body": {
                        "type": "BlockStatement",
                        "body": [
                            {
                                "type": "ExpressionStatement",
                                "expression": {
                                    "type": "ConditionalExpression",
                                    "test": {
                                        "type": "BinaryExpression",
                                        "operator": "instanceof",
                                        "left": {
                                            "type": "ThisExpression"
                                        },
                                        "right": {
                                            "type": "Identifier",
                                            "name": "_target"
                                        }
                                    },
                                    "consequent": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                            "type": "ThisExpression"
                                        },
                                        "property": {
                                            "type": "Literal",
                                            "value": "constructor",
                                            "raw": "'constructor'"
                                        }
                                    },
                                    "alternate": {
                                        "type": "UnaryExpression",
                                        "operator": "void",
                                        "argument": {
                                            "type": "Literal",
                                            "value": 0,
                                            "raw": "0x0"
                                        },
                                        "prefix": true
                                    }
                                }
                            }
                        ]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                }
            }
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "Bar"
                    },
                    "init": {
                        "type": "FunctionExpression",
                        "id": {
                            "type": "Identifier",
                            "name": "_target2"
                        },
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                            "type": "BinaryExpression",
                                            "operator": "instanceof",
                                            "left": {
                                                "type": "ThisExpression"
                                            },
                                            "right": {
                                                "type": "Identifier",
                                                "name": "_target2"
                                            }
                                        },
                                        "consequent": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "ThisExpression"
                                            },
                                            "property": {
                                                "type": "Literal",
                                                "value": "constructor",
                                                "raw": "'constructor'"
                                            }
                                        },
                                        "alternate": {
                                            "type": "UnaryExpression",
                                            "operator": "void",
                                            "argument": {
                                                "type": "Literal",
                                                "value": 0,
                                                "raw": "0x0"
                                            },
                                            "prefix": true
                                        }
                                    }
                                }
                            ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                }
            ],
            "kind": "var"
        }
    ],
    "sourceType": "script"
}