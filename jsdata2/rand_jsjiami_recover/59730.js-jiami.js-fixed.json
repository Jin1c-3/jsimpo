{
    "type": "Program",
    "body": [
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "stdlib"
                    },
                    "init": {
                        "type": "ObjectExpression",
                        "properties": []
                    }
                }
            ],
            "kind": "var"
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "foreign"
                    },
                    "init": {
                        "type": "ObjectExpression",
                        "properties": []
                    }
                }
            ],
            "kind": "var"
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "heap"
                    },
                    "init": {
                        "type": "NewExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "ArrayBuffer"
                        },
                        "arguments": [
                            {
                                "type": "BinaryExpression",
                                "operator": "*",
                                "left": {
                                    "type": "Literal",
                                    "value": 64,
                                    "raw": "0x40"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 1024,
                                    "raw": "0x400"
                                }
                            }
                        ]
                    }
                }
            ],
            "kind": "var"
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "Uint32Mod"
            },
            "params": [
                {
                    "type": "Identifier",
                    "name": "_0x4eb8f7"
                }
            ],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "_0x1e14c7"
                                },
                                "init": {
                                    "type": "Literal",
                                    "value": "mod_",
                                    "raw": "'mod_'"
                                }
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "ExpressionStatement",
                        "expression": {
                            "type": "AssignmentExpression",
                            "operator": "+=",
                            "left": {
                                "type": "Identifier",
                                "name": "_0x1e14c7"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "_0x4eb8f7"
                            }
                        }
                    },
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "_0x2bf576"
                                },
                                "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "eval"
                                    },
                                    "arguments": [
                                        {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "_0x4cca4d"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "csRkj",
                                                        "raw": "'csRkj'"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "BinaryExpression",
                                                        "operator": "+",
                                                        "left": {
                                                            "type": "BinaryExpression",
                                                            "operator": "+",
                                                            "left": {
                                                                "type": "BinaryExpression",
                                                                "operator": "+",
                                                                "left": {
                                                                    "type": "BinaryExpression",
                                                                    "operator": "+",
                                                                    "left": {
                                                                        "type": "BinaryExpression",
                                                                        "operator": "+",
                                                                        "left": {
                                                                            "type": "BinaryExpression",
                                                                            "operator": "+",
                                                                            "left": {
                                                                                "type": "CallExpression",
                                                                                "callee": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "_0x4cca4d"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": "waDLP",
                                                                                        "raw": "'waDLP'"
                                                                                    }
                                                                                },
                                                                                "arguments": [
                                                                                    {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "_0x4cca4d"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Literal",
                                                                                                "value": "waDLP",
                                                                                                "raw": "'waDLP'"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "CallExpression",
                                                                                                "callee": {
                                                                                                    "type": "MemberExpression",
                                                                                                    "computed": true,
                                                                                                    "object": {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "_0x4cca4d"
                                                                                                    },
                                                                                                    "property": {
                                                                                                        "type": "Literal",
                                                                                                        "value": "waDLP",
                                                                                                        "raw": "'waDLP'"
                                                                                                    }
                                                                                                },
                                                                                                "arguments": [
                                                                                                    {
                                                                                                        "type": "CallExpression",
                                                                                                        "callee": {
                                                                                                            "type": "MemberExpression",
                                                                                                            "computed": true,
                                                                                                            "object": {
                                                                                                                "type": "Identifier",
                                                                                                                "name": "_0x4cca4d"
                                                                                                            },
                                                                                                            "property": {
                                                                                                                "type": "Literal",
                                                                                                                "value": "waDLP",
                                                                                                                "raw": "'waDLP'"
                                                                                                            }
                                                                                                        },
                                                                                                        "arguments": [
                                                                                                            {
                                                                                                                "type": "BinaryExpression",
                                                                                                                "operator": "+",
                                                                                                                "left": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": "function Module(stdlib, foreign, heap) {\n",
                                                                                                                    "raw": "'function Module(stdlib, foreign, heap) {\n'"
                                                                                                                },
                                                                                                                "right": {
                                                                                                                    "type": "Literal",
                                                                                                                    "value": " \"use asm\";\n",
                                                                                                                    "raw": "'\\x20\\x22use\\x20asm\\x22;\\x0a'"
                                                                                                                }
                                                                                                            },
                                                                                                            {
                                                                                                                "type": "Literal",
                                                                                                                "value": " function ",
                                                                                                                "raw": "'\\x20function\\x20'"
                                                                                                            }
                                                                                                        ]
                                                                                                    },
                                                                                                    {
                                                                                                        "type": "Identifier",
                                                                                                        "name": "_0x1e14c7"
                                                                                                    }
                                                                                                ]
                                                                                            },
                                                                                            {
                                                                                                "type": "Literal",
                                                                                                "value": "(dividend) {\n",
                                                                                                "raw": "'(dividend) {\n'"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "type": "Literal",
                                                                                        "value": "  dividend = dividend | 0;\n",
                                                                                        "raw": "'  dividend = dividend | 0;\n'"
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "right": {
                                                                                "type": "Literal",
                                                                                "value": "  return ((dividend >>> 0) % ",
                                                                                "raw": "'\\x20\\x20return\\x20((dividend\\x20>>>\\x200)\\x20%\\x20'"
                                                                            }
                                                                        },
                                                                        "right": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x4eb8f7"
                                                                        }
                                                                    },
                                                                    "right": {
                                                                        "type": "Literal",
                                                                        "value": ") | 0;\n",
                                                                        "raw": "') | 0;\n'"
                                                                    }
                                                                },
                                                                "right": {
                                                                    "type": "Literal",
                                                                    "value": " }\n",
                                                                    "raw": "' }\n'"
                                                                }
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": " return { f: ",
                                                                "raw": "' return { f: '"
                                                            }
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "_0x1e14c7"
                                                        }
                                                    },
                                                    {
                                                        "type": "Literal",
                                                        "value": "}\n",
                                                        "raw": "'}\\x0a'"
                                                    }
                                                ]
                                            },
                                            "right": {
                                                "type": "Literal",
                                                "value": "}; Module",
                                                "raw": "'}; Module'"
                                            }
                                        }
                                    ]
                                }
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "ReturnStatement",
                        "argument": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "Identifier",
                                    "name": "_0x2bf576"
                                },
                                "arguments": [
                                    {
                                        "type": "Identifier",
                                        "name": "stdlib"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "foreign"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "heap"
                                    }
                                ]
                            },
                            "property": {
                                "type": "Literal",
                                "value": "f",
                                "raw": "'f'"
                            }
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "divisors"
                    },
                    "init": {
                        "type": "ArrayExpression",
                        "elements": [
                            {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0x0"
                            },
                            {
                                "type": "Literal",
                                "value": 1,
                                "raw": "0x1"
                            },
                            {
                                "type": "Literal",
                                "value": 3,
                                "raw": "0x3"
                            },
                            {
                                "type": "Literal",
                                "value": 4,
                                "raw": "0x4"
                            },
                            {
                                "type": "Literal",
                                "value": 10,
                                "raw": "0xa"
                            },
                            {
                                "type": "Literal",
                                "value": 42,
                                "raw": "0x2a"
                            },
                            {
                                "type": "Literal",
                                "value": 64,
                                "raw": "0x40"
                            },
                            {
                                "type": "Literal",
                                "value": 100,
                                "raw": "0x64"
                            },
                            {
                                "type": "Literal",
                                "value": 1024,
                                "raw": "0x400"
                            },
                            {
                                "type": "Literal",
                                "value": 2147483647,
                                "raw": "0x7fffffff"
                            },
                            {
                                "type": "Literal",
                                "value": 4294967295,
                                "raw": "0xffffffff"
                            }
                        ]
                    }
                }
            ],
            "kind": "var"
        },
        {
            "type": "ForInStatement",
            "left": {
                "type": "VariableDeclaration",
                "declarations": [
                    {
                        "type": "VariableDeclarator",
                        "id": {
                            "type": "Identifier",
                            "name": "i"
                        },
                        "init": null
                    }
                ],
                "kind": "var"
            },
            "right": {
                "type": "Identifier",
                "name": "divisors"
            },
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "divisor"
                                },
                                "init": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "divisors"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "i"
                                    }
                                }
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "mod"
                                },
                                "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "Uint32Mod"
                                    },
                                    "arguments": [
                                        {
                                            "type": "Identifier",
                                            "name": "divisor"
                                        }
                                    ]
                                }
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "ForStatement",
                        "init": {
                            "type": "VariableDeclaration",
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "dividend"
                                    },
                                    "init": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0x0"
                                    }
                                }
                            ],
                            "kind": "var"
                        },
                        "test": {
                            "type": "BinaryExpression",
                            "operator": "<",
                            "left": {
                                "type": "Identifier",
                                "name": "dividend"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 4294967296,
                                "raw": "0x100000000"
                            }
                        },
                        "update": {
                            "type": "AssignmentExpression",
                            "operator": "+=",
                            "left": {
                                "type": "Identifier",
                                "name": "dividend"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 3999773,
                                "raw": "0x3d081d"
                            }
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                            "type": "Identifier",
                                            "name": "assertEquals"
                                        },
                                        "arguments": [
                                            {
                                                "type": "BinaryExpression",
                                                "operator": "|",
                                                "left": {
                                                    "type": "BinaryExpression",
                                                    "operator": "%",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "dividend"
                                                    },
                                                    "right": {
                                                        "type": "Identifier",
                                                        "name": "divisor"
                                                    }
                                                },
                                                "right": {
                                                    "type": "Literal",
                                                    "value": 0,
                                                    "raw": "0x0"
                                                }
                                            },
                                            {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "Identifier",
                                                    "name": "mod"
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Identifier",
                                                        "name": "dividend"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "each": false
        }
    ],
    "sourceType": "script"
}