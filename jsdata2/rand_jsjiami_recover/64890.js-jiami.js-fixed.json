{
    "type": "Program",
    "body": [
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "Debug"
                    },
                    "init": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                            "type": "Identifier",
                            "name": "debug"
                        },
                        "property": {
                            "type": "Literal",
                            "value": "Debug",
                            "raw": "'Debug'"
                        }
                    }
                }
            ],
            "kind": "const"
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "exception"
                    },
                    "init": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                    }
                }
            ],
            "kind": "let"
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "step_count"
                    },
                    "init": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0x0"
                    }
                }
            ],
            "kind": "let"
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                        "type": "Identifier",
                        "name": "Debug"
                    },
                    "property": {
                        "type": "Literal",
                        "value": "setListener",
                        "raw": "'setListener'"
                    }
                },
                "arguments": [
                    {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [
                            {
                                "type": "Identifier",
                                "name": "_0x3c7698"
                            },
                            {
                                "type": "Identifier",
                                "name": "_0x54e8dc"
                            },
                            {
                                "type": "Identifier",
                                "name": "_0x329eec"
                            },
                            {
                                "type": "Identifier",
                                "name": "_0x5875ba"
                            }
                        ],
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "IfStatement",
                                    "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!=",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "_0x3c7698"
                                        },
                                        "right": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                    "type": "Identifier",
                                                    "name": "Debug"
                                                },
                                                "property": {
                                                    "type": "Literal",
                                                    "value": "DebugEvent",
                                                    "raw": "'DebugEvent'"
                                                }
                                            },
                                            "property": {
                                                "type": "Literal",
                                                "value": "Break",
                                                "raw": "'Break'"
                                            }
                                        }
                                    },
                                    "consequent": {
                                        "type": "ReturnStatement",
                                        "argument": null
                                    },
                                    "alternate": null
                                },
                                {
                                    "type": "TryStatement",
                                    "block": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "Identifier",
                                                            "name": "_0x161307"
                                                        },
                                                        "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "MemberExpression",
                                                                        "computed": true,
                                                                        "object": {
                                                                            "type": "Identifier",
                                                                            "name": "_0x54e8dc"
                                                                        },
                                                                        "property": {
                                                                            "type": "Literal",
                                                                            "value": "frame",
                                                                            "raw": "'frame'"
                                                                        }
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Literal",
                                                                            "value": 0,
                                                                            "raw": "0x0"
                                                                        }
                                                                    ]
                                                                },
                                                                "property": {
                                                                    "type": "Literal",
                                                                    "value": "sourceLineText",
                                                                    "raw": "'sourceLineText'"
                                                                }
                                                            },
                                                            "arguments": []
                                                        }
                                                    }
                                                ],
                                                "kind": "const"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "Identifier",
                                                        "name": "print"
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "Identifier",
                                                            "name": "_0x161307"
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "VariableDeclaration",
                                                "declarations": [
                                                    {
                                                        "type": "VariableDeclarator",
                                                        "id": {
                                                            "type": "ArrayPattern",
                                                            "elements": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "_0xb37f7d"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "_0x3086a2"
                                                                },
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "_0x358777"
                                                                }
                                                            ]
                                                        },
                                                        "init": {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "Literal",
                                                                    "value": {},
                                                                    "raw": "/\\/\\/ B(\\d) (\\w+)$/",
                                                                    "regex": {
                                                                        "pattern": "\\/\\/ B(\\d) (\\w+)$",
                                                                        "flags": ""
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Literal",
                                                                    "value": "exec",
                                                                    "raw": "'exec'"
                                                                }
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "_0x161307"
                                                                }
                                                            ]
                                                        }
                                                    }
                                                ],
                                                "kind": "const"
                                            },
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "CallExpression",
                                                    "callee": {
                                                        "type": "Identifier",
                                                        "name": "assertEquals"
                                                    },
                                                    "arguments": [
                                                        {
                                                            "type": "UpdateExpression",
                                                            "operator": "++",
                                                            "argument": {
                                                                "type": "Identifier",
                                                                "name": "step_count"
                                                            },
                                                            "prefix": false
                                                        },
                                                        {
                                                            "type": "CallExpression",
                                                            "callee": {
                                                                "type": "Identifier",
                                                                "name": "parseInt"
                                                            },
                                                            "arguments": [
                                                                {
                                                                    "type": "Identifier",
                                                                    "name": "_0x3086a2"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "type": "IfStatement",
                                                "test": {
                                                    "type": "BinaryExpression",
                                                    "operator": "!=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "_0x358777"
                                                    },
                                                    "right": {
                                                        "type": "Literal",
                                                        "value": "Continue",
                                                        "raw": "'Continue'"
                                                    }
                                                },
                                                "consequent": {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "_0x54e8dc"
                                                            },
                                                            "property": {
                                                                "type": "Literal",
                                                                "value": "prepareStep",
                                                                "raw": "'prepareStep'"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "MemberExpression",
                                                                "computed": true,
                                                                "object": {
                                                                    "type": "MemberExpression",
                                                                    "computed": true,
                                                                    "object": {
                                                                        "type": "Identifier",
                                                                        "name": "Debug"
                                                                    },
                                                                    "property": {
                                                                        "type": "Literal",
                                                                        "value": "StepAction",
                                                                        "raw": "'StepAction'"
                                                                    }
                                                                },
                                                                "property": {
                                                                    "type": "Identifier",
                                                                    "name": "_0x358777"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                "alternate": null
                                            }
                                        ]
                                    },
                                    "handler": {
                                        "type": "CatchClause",
                                        "param": {
                                            "type": "Identifier",
                                            "name": "_0x4a03ee"
                                        },
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "!==",
                                                        "left": {
                                                            "type": "Literal",
                                                            "value": "WKSpd",
                                                            "raw": "'WKSpd'"
                                                        },
                                                        "right": {
                                                            "type": "Literal",
                                                            "value": "NHmyt",
                                                            "raw": "'NHmyt'"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "Identifier",
                                                                        "name": "print"
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "_0x4a03ee"
                                                                        },
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "_0x4a03ee"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": "stack",
                                                                                "raw": "'stack'"
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "exception"
                                                                    },
                                                                    "right": {
                                                                        "type": "Identifier",
                                                                        "name": "_0x4a03ee"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "CallExpression",
                                                                    "callee": {
                                                                        "type": "Identifier",
                                                                        "name": "print"
                                                                    },
                                                                    "arguments": [
                                                                        {
                                                                            "type": "Identifier",
                                                                            "name": "_0x4a03ee"
                                                                        },
                                                                        {
                                                                            "type": "MemberExpression",
                                                                            "computed": true,
                                                                            "object": {
                                                                                "type": "Identifier",
                                                                                "name": "_0x4a03ee"
                                                                            },
                                                                            "property": {
                                                                                "type": "Literal",
                                                                                "value": "stack",
                                                                                "raw": "'stack'"
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "exception"
                                                                    },
                                                                    "right": {
                                                                        "type": "Identifier",
                                                                        "name": "_0x4a03ee"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "finalizer": null
                                }
                            ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    }
                ]
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "f"
            },
            "params": [
                {
                    "type": "Identifier",
                    "name": "_0xd4d802"
                }
            ],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "DebuggerStatement"
                    },
                    {
                        "type": "WithStatement",
                        "object": {
                            "type": "ObjectExpression",
                            "properties": []
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "ReturnStatement",
                                    "argument": {
                                        "type": "Identifier",
                                        "name": "_0xd4d802"
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "f"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 42,
                        "raw": "0x2a"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertNull"
                },
                "arguments": [
                    {
                        "type": "Identifier",
                        "name": "exception"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 4,
                        "raw": "0x4"
                    },
                    {
                        "type": "Identifier",
                        "name": "step_count"
                    }
                ]
            }
        }
    ],
    "sourceType": "script"
}