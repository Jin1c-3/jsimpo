{
    "type": "Program",
    "body": [
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertThrows"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "(import(foo)) =>",
                        "raw": "'(import(foo)) =>'"
                    },
                    {
                        "type": "Identifier",
                        "name": "SyntaxError"
                    },
                    {
                        "type": "Literal",
                        "value": "Invalid destructuring assignment target",
                        "raw": "'Invalid\\x20destructuring\\x20assignment\\x20target'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertThrows"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "import(foo) =>",
                        "raw": "'import(foo)\\x20=>'"
                    },
                    {
                        "type": "Identifier",
                        "name": "SyntaxError"
                    },
                    {
                        "type": "Literal",
                        "value": "Malformed arrow function parameter list",
                        "raw": "'Malformed arrow function parameter list'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertThrows"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "(a, import(foo)) =>",
                        "raw": "'(a, import(foo)) =>'"
                    },
                    {
                        "type": "Identifier",
                        "name": "SyntaxError"
                    },
                    {
                        "type": "Literal",
                        "value": "Invalid destructuring assignment target",
                        "raw": "'Invalid destructuring assignment target'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertThrows"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "(1, import(foo)) =>",
                        "raw": "'(1, import(foo)) =>'"
                    },
                    {
                        "type": "Identifier",
                        "name": "SyntaxError"
                    },
                    {
                        "type": "Literal",
                        "value": "Invalid destructuring assignment target",
                        "raw": "'Invalid\\x20destructuring\\x20assignment\\x20target'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertThrows"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "(super(foo)) =>",
                        "raw": "'(super(foo)) =>'"
                    },
                    {
                        "type": "Identifier",
                        "name": "SyntaxError"
                    },
                    {
                        "type": "Literal",
                        "value": "'super' keyword unexpected here",
                        "raw": "'\\x27super\\x27\\x20keyword\\x20unexpected\\x20here'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertThrows"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "(bar(foo)) =>",
                        "raw": "'(bar(foo))\\x20=>'"
                    },
                    {
                        "type": "Identifier",
                        "name": "SyntaxError"
                    },
                    {
                        "type": "Literal",
                        "value": "Invalid destructuring assignment target",
                        "raw": "'Invalid\\x20destructuring\\x20assignment\\x20target'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertThrows"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "[import(foo).then] = [1];",
                        "raw": "'[import(foo).then] = [1];'"
                    },
                    {
                        "type": "Identifier",
                        "name": "ReferenceError"
                    },
                    {
                        "type": "Literal",
                        "value": "foo is not defined",
                        "raw": "'foo is not defined'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertThrows"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "[[import(foo).then]] = [[1]];",
                        "raw": "'[[import(foo).then]] = [[1]];'"
                    },
                    {
                        "type": "Identifier",
                        "name": "ReferenceError"
                    },
                    {
                        "type": "Literal",
                        "value": "foo is not defined",
                        "raw": "'foo is not defined'"
                    }
                ]
            }
        }
    ],
    "sourceType": "script"
}