{
    "type": "Program",
    "body": [
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "require"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "./build/hook.js",
                        "raw": "'./build/hook.js'"
                    }
                ]
            }
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "target"
                    },
                    "init": {
                        "type": "ConditionalExpression",
                        "test": {
                            "type": "BinaryExpression",
                            "operator": "!==",
                            "left": {
                                "type": "UnaryExpression",
                                "operator": "typeof",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "window"
                                },
                                "prefix": true
                            },
                            "right": {
                                "type": "Literal",
                                "value": "undefined",
                                "raw": "'undefined'"
                            }
                        },
                        "consequent": {
                            "type": "Identifier",
                            "name": "window"
                        },
                        "alternate": {
                            "type": "ConditionalExpression",
                            "test": {
                                "type": "BinaryExpression",
                                "operator": "!==",
                                "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                        "type": "Identifier",
                                        "name": "global"
                                    },
                                    "prefix": true
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": "undefined",
                                    "raw": "'undefined'"
                                }
                            },
                            "consequent": {
                                "type": "Identifier",
                                "name": "global"
                            },
                            "alternate": {
                                "type": "ObjectExpression",
                                "properties": []
                            }
                        }
                    }
                }
            ],
            "kind": "const"
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                        "type": "Identifier",
                        "name": "module"
                    },
                    "property": {
                        "type": "Literal",
                        "value": "exports",
                        "raw": "'exports'"
                    }
                },
                "right": {
                    "type": "ObjectExpression",
                    "properties": [
                        {
                            "type": "Property",
                            "key": {
                                "type": "Literal",
                                "value": "connect",
                                "raw": "'connect'"
                            },
                            "computed": false,
                            "value": {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [
                                    {
                                        "type": "Identifier",
                                        "name": "_0x4ff6cf"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "_0x35d488"
                                    },
                                    {
                                        "type": "AssignmentPattern",
                                        "left": {
                                            "type": "ObjectPattern",
                                            "properties": [
                                                {
                                                    "type": "Property",
                                                    "key": {
                                                        "type": "Identifier",
                                                        "name": "io"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                        "type": "Identifier",
                                                        "name": "io"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": true
                                                },
                                                {
                                                    "type": "Property",
                                                    "key": {
                                                        "type": "Identifier",
                                                        "name": "showToast"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                        "type": "Identifier",
                                                        "name": "showToast"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": true
                                                },
                                                {
                                                    "type": "Property",
                                                    "key": {
                                                        "type": "Identifier",
                                                        "name": "app"
                                                    },
                                                    "computed": false,
                                                    "value": {
                                                        "type": "Identifier",
                                                        "name": "app"
                                                    },
                                                    "kind": "init",
                                                    "method": false,
                                                    "shorthand": true
                                                }
                                            ]
                                        },
                                        "right": {
                                            "type": "ObjectExpression",
                                            "properties": []
                                        }
                                    }
                                ],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "_0x3dd2e7"
                                                    },
                                                    "init": {
                                                        "type": "CallExpression",
                                                        "callee": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Literal",
                                                                "value": "4|3|0|2|5|1",
                                                                "raw": "'4|3|0|2|5|1'"
                                                            },
                                                            "property": {
                                                                "type": "Literal",
                                                                "value": "split",
                                                                "raw": "'split'"
                                                            }
                                                        },
                                                        "arguments": [
                                                            {
                                                                "type": "Literal",
                                                                "value": "|",
                                                                "raw": "'|'"
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "_0xfdff78"
                                                    },
                                                    "init": {
                                                        "type": "Literal",
                                                        "value": 0,
                                                        "raw": "0x0"
                                                    }
                                                }
                                            ],
                                            "kind": "var"
                                        },
                                        {
                                            "type": "WhileStatement",
                                            "test": {
                                                "type": "UnaryExpression",
                                                "operator": "!",
                                                "argument": {
                                                    "type": "UnaryExpression",
                                                    "operator": "!",
                                                    "argument": {
                                                        "type": "ArrayExpression",
                                                        "elements": []
                                                    },
                                                    "prefix": true
                                                },
                                                "prefix": true
                                            },
                                            "body": {
                                                "type": "BlockStatement",
                                                "body": [
                                                    {
                                                        "type": "SwitchStatement",
                                                        "discriminant": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "_0x3dd2e7"
                                                            },
                                                            "property": {
                                                                "type": "UpdateExpression",
                                                                "operator": "++",
                                                                "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "_0xfdff78"
                                                                },
                                                                "prefix": false
                                                            }
                                                        },
                                                        "cases": [
                                                            {
                                                                "type": "SwitchCase",
                                                                "test": {
                                                                    "type": "Literal",
                                                                    "value": "0",
                                                                    "raw": "'0'"
                                                                },
                                                                "consequent": [
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "Identifier",
                                                                            "name": "io"
                                                                        },
                                                                        "consequent": {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "target"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": "__VUE_DEVTOOLS_SOCKET__",
                                                                                        "raw": "'__VUE_DEVTOOLS_SOCKET__'"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Identifier",
                                                                                    "name": "io"
                                                                                }
                                                                            }
                                                                        },
                                                                        "alternate": null
                                                                    },
                                                                    {
                                                                        "type": "ContinueStatement",
                                                                        "label": null
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "type": "SwitchCase",
                                                                "test": {
                                                                    "type": "Literal",
                                                                    "value": "1",
                                                                    "raw": "'1'"
                                                                },
                                                                "consequent": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "CallExpression",
                                                                            "callee": {
                                                                                "type": "Identifier",
                                                                                "name": "require"
                                                                            },
                                                                            "arguments": [
                                                                                {
                                                                                    "type": "Literal",
                                                                                    "value": "./build/backend.js",
                                                                                    "raw": "'./build/backend.js'"
                                                                                }
                                                                            ]
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ContinueStatement",
                                                                        "label": null
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "type": "SwitchCase",
                                                                "test": {
                                                                    "type": "Literal",
                                                                    "value": "2",
                                                                    "raw": "'2'"
                                                                },
                                                                "consequent": [
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "Identifier",
                                                                            "name": "showToast"
                                                                        },
                                                                        "consequent": {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "target"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": "__VUE_DEVTOOLS_TOAST__",
                                                                                        "raw": "'__VUE_DEVTOOLS_TOAST__'"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "Identifier",
                                                                                    "name": "showToast"
                                                                                }
                                                                            }
                                                                        },
                                                                        "alternate": null
                                                                    },
                                                                    {
                                                                        "type": "ContinueStatement",
                                                                        "label": null
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "type": "SwitchCase",
                                                                "test": {
                                                                    "type": "Literal",
                                                                    "value": "3",
                                                                    "raw": "'3'"
                                                                },
                                                                "consequent": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "target"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": "__VUE_DEVTOOLS_PORT__",
                                                                                    "raw": "'__VUE_DEVTOOLS_PORT__'"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "Identifier",
                                                                                "name": "_0x35d488"
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ContinueStatement",
                                                                        "label": null
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "type": "SwitchCase",
                                                                "test": {
                                                                    "type": "Literal",
                                                                    "value": "4",
                                                                    "raw": "'4'"
                                                                },
                                                                "consequent": [
                                                                    {
                                                                        "type": "ExpressionStatement",
                                                                        "expression": {
                                                                            "type": "AssignmentExpression",
                                                                            "operator": "=",
                                                                            "left": {
                                                                                "type": "MemberExpression",
                                                                                "computed": true,
                                                                                "object": {
                                                                                    "type": "Identifier",
                                                                                    "name": "target"
                                                                                },
                                                                                "property": {
                                                                                    "type": "Literal",
                                                                                    "value": "__VUE_DEVTOOLS_HOST__",
                                                                                    "raw": "'__VUE_DEVTOOLS_HOST__'"
                                                                                }
                                                                            },
                                                                            "right": {
                                                                                "type": "Identifier",
                                                                                "name": "_0x4ff6cf"
                                                                            }
                                                                        }
                                                                    },
                                                                    {
                                                                        "type": "ContinueStatement",
                                                                        "label": null
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                "type": "SwitchCase",
                                                                "test": {
                                                                    "type": "Literal",
                                                                    "value": "5",
                                                                    "raw": "'5'"
                                                                },
                                                                "consequent": [
                                                                    {
                                                                        "type": "IfStatement",
                                                                        "test": {
                                                                            "type": "Identifier",
                                                                            "name": "app"
                                                                        },
                                                                        "consequent": {
                                                                            "type": "ExpressionStatement",
                                                                            "expression": {
                                                                                "type": "AssignmentExpression",
                                                                                "operator": "=",
                                                                                "left": {
                                                                                    "type": "MemberExpression",
                                                                                    "computed": true,
                                                                                    "object": {
                                                                                        "type": "Identifier",
                                                                                        "name": "target"
                                                                                    },
                                                                                    "property": {
                                                                                        "type": "Literal",
                                                                                        "value": "__VUE_ROOT_INSTANCES__",
                                                                                        "raw": "'__VUE_ROOT_INSTANCES__'"
                                                                                    }
                                                                                },
                                                                                "right": {
                                                                                    "type": "ConditionalExpression",
                                                                                    "test": {
                                                                                        "type": "CallExpression",
                                                                                        "callee": {
                                                                                            "type": "MemberExpression",
                                                                                            "computed": true,
                                                                                            "object": {
                                                                                                "type": "Identifier",
                                                                                                "name": "Array"
                                                                                            },
                                                                                            "property": {
                                                                                                "type": "Literal",
                                                                                                "value": "isArray",
                                                                                                "raw": "'isArray'"
                                                                                            }
                                                                                        },
                                                                                        "arguments": [
                                                                                            {
                                                                                                "type": "Identifier",
                                                                                                "name": "app"
                                                                                            }
                                                                                        ]
                                                                                    },
                                                                                    "consequent": {
                                                                                        "type": "Identifier",
                                                                                        "name": "app"
                                                                                    },
                                                                                    "alternate": {
                                                                                        "type": "ArrayExpression",
                                                                                        "elements": [
                                                                                            {
                                                                                                "type": "Identifier",
                                                                                                "name": "app"
                                                                                            }
                                                                                        ]
                                                                                    }
                                                                                }
                                                                            }
                                                                        },
                                                                        "alternate": null
                                                                    },
                                                                    {
                                                                        "type": "ContinueStatement",
                                                                        "label": null
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "type": "BreakStatement",
                                                        "label": null
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                        },
                        {
                            "type": "Property",
                            "key": {
                                "type": "Literal",
                                "value": "init",
                                "raw": "'init'"
                            },
                            "computed": false,
                            "value": {
                                "type": "ArrowFunctionExpression",
                                "id": null,
                                "params": [
                                    {
                                        "type": "Identifier",
                                        "name": "_0xa14571"
                                    }
                                ],
                                "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                        {
                                            "type": "VariableDeclaration",
                                            "declarations": [
                                                {
                                                    "type": "VariableDeclarator",
                                                    "id": {
                                                        "type": "Identifier",
                                                        "name": "_0x2fbb46"
                                                    },
                                                    "init": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                            "type": "Identifier",
                                                            "name": "target"
                                                        },
                                                        "property": {
                                                            "type": "Literal",
                                                            "value": "__VUE_DEVTOOLS_GLOBAL_HOOK__",
                                                            "raw": "'__VUE_DEVTOOLS_GLOBAL_HOOK__'"
                                                        }
                                                    }
                                                }
                                            ],
                                            "kind": "const"
                                        },
                                        {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                        "type": "Identifier",
                                                        "name": "_0x2fbb46"
                                                    },
                                                    "property": {
                                                        "type": "Literal",
                                                        "value": "emit",
                                                        "raw": "'emit'"
                                                    }
                                                },
                                                "arguments": [
                                                    {
                                                        "type": "Literal",
                                                        "value": "init",
                                                        "raw": "'init'"
                                                    },
                                                    {
                                                        "type": "Identifier",
                                                        "name": "_0xa14571"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                            },
                            "kind": "init",
                            "method": false,
                            "shorthand": false
                        }
                    ]
                }
            }
        }
    ],
    "sourceType": "script"
}