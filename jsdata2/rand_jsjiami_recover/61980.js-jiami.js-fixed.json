{
    "type": "Program",
    "body": [
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                    "type": "Identifier",
                    "name": "x"
                },
                "right": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0x0"
                }
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "test1"
            },
            "params": [],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "_0x1733bd"
                                },
                                "init": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "0x1"
                                }
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "_0x5b19bb"
                                },
                                "init": null
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "WithStatement",
                        "object": {
                            "type": "ObjectExpression",
                            "properties": []
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "IfStatement",
                                    "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "Literal",
                                            "value": "vVwbt",
                                            "raw": "'vVwbt'"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "BUzUJ",
                                            "raw": "'BUzUJ'"
                                        }
                                    },
                                    "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "WithStatement",
                                                "object": {
                                                    "type": "ObjectExpression",
                                                    "properties": []
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                                "type": "UnaryExpression",
                                                                "operator": "delete",
                                                                "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "_0x1733bd"
                                                                },
                                                                "prefix": true
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "_0x5b19bb"
                                                    },
                                                    "right": {
                                                        "type": "UnaryExpression",
                                                        "operator": "delete",
                                                        "argument": {
                                                            "type": "Identifier",
                                                            "name": "_0x1733bd"
                                                        },
                                                        "prefix": true
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "ReturnStatement",
                        "argument": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "_0x395025"
                                    },
                                    "property": {
                                        "type": "Literal",
                                        "value": "wLCFX",
                                        "raw": "'wLCFX'"
                                    }
                                },
                                "arguments": [
                                    {
                                        "type": "Identifier",
                                        "name": "_0x1733bd"
                                    },
                                    {
                                        "type": "Literal",
                                        "value": ":",
                                        "raw": "':'"
                                    }
                                ]
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "_0x5b19bb"
                            }
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "1:false",
                        "raw": "'1:false'"
                    },
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "test1"
                        },
                        "arguments": []
                    },
                    {
                        "type": "Literal",
                        "value": "test1",
                        "raw": "'test1'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0x0"
                    },
                    {
                        "type": "Identifier",
                        "name": "x"
                    },
                    {
                        "type": "Literal",
                        "value": "test1",
                        "raw": "'test1'"
                    }
                ]
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "test2"
            },
            "params": [],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "FunctionDeclaration",
                        "id": {
                            "type": "Identifier",
                            "name": "_0xcc4a12"
                        },
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "WithStatement",
                                    "object": {
                                        "type": "ObjectExpression",
                                        "properties": []
                                    },
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "UnaryExpression",
                                                    "operator": "delete",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "_0x48fd37"
                                                    },
                                                    "prefix": true
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    },
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "_0x48fd37"
                                },
                                "init": {
                                    "type": "Literal",
                                    "value": 2,
                                    "raw": "0x2"
                                }
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "_0x796d3"
                                },
                                "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "_0xcc4a12"
                                    },
                                    "arguments": []
                                }
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "ReturnStatement",
                        "argument": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                    "type": "Identifier",
                                    "name": "_0x48fd37"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": ":",
                                    "raw": "':'"
                                }
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "_0x796d3"
                            }
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "2:false",
                        "raw": "'2:false'"
                    },
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "test2"
                        },
                        "arguments": []
                    },
                    {
                        "type": "Literal",
                        "value": "test2",
                        "raw": "'test2'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0x0"
                    },
                    {
                        "type": "Identifier",
                        "name": "x"
                    },
                    {
                        "type": "Literal",
                        "value": "test2",
                        "raw": "'test2'"
                    }
                ]
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "test3"
            },
            "params": [
                {
                    "type": "Identifier",
                    "name": "_0x3f9fc5"
                }
            ],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "_0xb2b17b"
                                },
                                "init": null
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "WithStatement",
                        "object": {
                            "type": "ObjectExpression",
                            "properties": []
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "IfStatement",
                                    "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "Literal",
                                            "value": "pksqu",
                                            "raw": "'pksqu'"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "pksqu",
                                            "raw": "'pksqu'"
                                        }
                                    },
                                    "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "_0xb2b17b"
                                                    },
                                                    "right": {
                                                        "type": "UnaryExpression",
                                                        "operator": "delete",
                                                        "argument": {
                                                            "type": "Identifier",
                                                            "name": "_0x3f9fc5"
                                                        },
                                                        "prefix": true
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "_0xb2b17b"
                                                    },
                                                    "right": {
                                                        "type": "UnaryExpression",
                                                        "operator": "delete",
                                                        "argument": {
                                                            "type": "Identifier",
                                                            "name": "_0x3f9fc5"
                                                        },
                                                        "prefix": true
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "ReturnStatement",
                        "argument": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                    "type": "Identifier",
                                    "name": "_0x3f9fc5"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": ":",
                                    "raw": "':'"
                                }
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "_0xb2b17b"
                            }
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "3:false",
                        "raw": "'3:false'"
                    },
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "test3"
                        },
                        "arguments": [
                            {
                                "type": "Literal",
                                "value": 3,
                                "raw": "0x3"
                            }
                        ]
                    },
                    {
                        "type": "Literal",
                        "value": "test3",
                        "raw": "'test3'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0x0"
                    },
                    {
                        "type": "Identifier",
                        "name": "x"
                    },
                    {
                        "type": "Literal",
                        "value": "test3",
                        "raw": "'test3'"
                    }
                ]
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "test4"
            },
            "params": [
                {
                    "type": "Identifier",
                    "name": "_0xb00e42"
                }
            ],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "FunctionDeclaration",
                        "id": {
                            "type": "Identifier",
                            "name": "_0x2042d3"
                        },
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "IfStatement",
                                    "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                            "type": "Literal",
                                            "value": "FlsbR",
                                            "raw": "'FlsbR'"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "lYDec",
                                            "raw": "'lYDec'"
                                        }
                                    },
                                    "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "WithStatement",
                                                "object": {
                                                    "type": "ObjectExpression",
                                                    "properties": []
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                                "type": "UnaryExpression",
                                                                "operator": "delete",
                                                                "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "_0xb00e42"
                                                                },
                                                                "prefix": true
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "WithStatement",
                                                "object": {
                                                    "type": "ObjectExpression",
                                                    "properties": []
                                                },
                                                "body": {
                                                    "type": "BlockStatement",
                                                    "body": [
                                                        {
                                                            "type": "ReturnStatement",
                                                            "argument": {
                                                                "type": "UnaryExpression",
                                                                "operator": "delete",
                                                                "argument": {
                                                                    "type": "Identifier",
                                                                    "name": "x"
                                                                },
                                                                "prefix": true
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    },
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "_0x36b7ea"
                                },
                                "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "_0x2042d3"
                                    },
                                    "arguments": []
                                }
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "ReturnStatement",
                        "argument": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                    "type": "Identifier",
                                    "name": "_0xb00e42"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": ":",
                                    "raw": "':'"
                                }
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "_0x36b7ea"
                            }
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "4:false",
                        "raw": "'4:false'"
                    },
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "test4"
                        },
                        "arguments": [
                            {
                                "type": "Literal",
                                "value": 4,
                                "raw": "0x4"
                            }
                        ]
                    },
                    {
                        "type": "Literal",
                        "value": "test4",
                        "raw": "'test4'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0x0"
                    },
                    {
                        "type": "Identifier",
                        "name": "x"
                    },
                    {
                        "type": "Literal",
                        "value": "test4",
                        "raw": "'test4'"
                    }
                ]
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "test5"
            },
            "params": [
                {
                    "type": "Identifier",
                    "name": "_0x301736"
                }
            ],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "_0x3eafc6"
                                },
                                "init": null
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "WithStatement",
                        "object": {
                            "type": "ObjectExpression",
                            "properties": []
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "IfStatement",
                                    "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "Literal",
                                            "value": "hSEkU",
                                            "raw": "'hSEkU'"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "qShsK",
                                            "raw": "'qShsK'"
                                        }
                                    },
                                    "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "UnaryExpression",
                                                    "operator": "delete",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "_0x301736"
                                                    },
                                                    "prefix": true
                                                }
                                            }
                                        ]
                                    },
                                    "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ExpressionStatement",
                                                "expression": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                        "type": "Identifier",
                                                        "name": "_0x3eafc6"
                                                    },
                                                    "right": {
                                                        "type": "UnaryExpression",
                                                        "operator": "delete",
                                                        "argument": {
                                                            "type": "Identifier",
                                                            "name": "_0x301736"
                                                        },
                                                        "prefix": true
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "type": "ReturnStatement",
                        "argument": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "arguments"
                                    },
                                    "property": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0x0"
                                    }
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": ":",
                                    "raw": "':'"
                                }
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "_0x3eafc6"
                            }
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "5:false",
                        "raw": "'5:false'"
                    },
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "test5"
                        },
                        "arguments": [
                            {
                                "type": "Literal",
                                "value": 5,
                                "raw": "0x5"
                            }
                        ]
                    },
                    {
                        "type": "Literal",
                        "value": "test5",
                        "raw": "'test5'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0x0"
                    },
                    {
                        "type": "Identifier",
                        "name": "x"
                    },
                    {
                        "type": "Literal",
                        "value": "test5",
                        "raw": "'test5'"
                    }
                ]
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "test6"
            },
            "params": [
                {
                    "type": "Identifier",
                    "name": "_0x5c446d"
                }
            ],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "FunctionDeclaration",
                        "id": {
                            "type": "Identifier",
                            "name": "_0x3e9fcd"
                        },
                        "params": [],
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "WithStatement",
                                    "object": {
                                        "type": "ObjectExpression",
                                        "properties": []
                                    },
                                    "body": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "UnaryExpression",
                                                    "operator": "delete",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "_0x5c446d"
                                                    },
                                                    "prefix": true
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                    },
                    {
                        "type": "VariableDeclaration",
                        "declarations": [
                            {
                                "type": "VariableDeclarator",
                                "id": {
                                    "type": "Identifier",
                                    "name": "_0x37337c"
                                },
                                "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "_0x3e9fcd"
                                    },
                                    "arguments": []
                                }
                            }
                        ],
                        "kind": "var"
                    },
                    {
                        "type": "ReturnStatement",
                        "argument": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "arguments"
                                    },
                                    "property": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0x0"
                                    }
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": ":",
                                    "raw": "':'"
                                }
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "_0x37337c"
                            }
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "6:false",
                        "raw": "'6:false'"
                    },
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "test6"
                        },
                        "arguments": [
                            {
                                "type": "Literal",
                                "value": 6,
                                "raw": "0x6"
                            }
                        ]
                    },
                    {
                        "type": "Literal",
                        "value": "test6",
                        "raw": "'test6'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0x0"
                    },
                    {
                        "type": "Identifier",
                        "name": "x"
                    },
                    {
                        "type": "Literal",
                        "value": "test6",
                        "raw": "'test6'"
                    }
                ]
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "test7"
            },
            "params": [
                {
                    "type": "Identifier",
                    "name": "_0xdf3da"
                }
            ],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "WithStatement",
                        "object": {
                            "type": "Identifier",
                            "name": "_0xdf3da"
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "ReturnStatement",
                                    "argument": {
                                        "type": "UnaryExpression",
                                        "operator": "delete",
                                        "argument": {
                                            "type": "Identifier",
                                            "name": "value"
                                        },
                                        "prefix": true
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "o"
                    },
                    "init": {
                        "type": "ObjectExpression",
                        "properties": []
                    }
                }
            ],
            "kind": "var"
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                                "type": "ArrayExpression",
                                "elements": []
                            },
                            "prefix": true
                        },
                        "prefix": true
                    },
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "test7"
                        },
                        "arguments": [
                            {
                                "type": "Identifier",
                                "name": "o"
                            }
                        ]
                    },
                    {
                        "type": "Literal",
                        "value": "test7",
                        "raw": "'test7'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "UnaryExpression",
                        "operator": "void",
                        "argument": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0x0"
                        },
                        "prefix": true
                    },
                    {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                            "type": "Identifier",
                            "name": "o"
                        },
                        "property": {
                            "type": "Literal",
                            "value": "value",
                            "raw": "'value'"
                        }
                    },
                    {
                        "type": "Literal",
                        "value": "test7",
                        "raw": "'test7'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0x0"
                    },
                    {
                        "type": "Identifier",
                        "name": "x"
                    },
                    {
                        "type": "Literal",
                        "value": "test7",
                        "raw": "'test7'"
                    }
                ]
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "test8"
            },
            "params": [],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "WithStatement",
                        "object": {
                            "type": "ObjectExpression",
                            "properties": []
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "IfStatement",
                                    "test": {
                                        "type": "BinaryExpression",
                                        "operator": "===",
                                        "left": {
                                            "type": "Literal",
                                            "value": "QmOCw",
                                            "raw": "'QmOCw'"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "QmOCw",
                                            "raw": "'QmOCw'"
                                        }
                                    },
                                    "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "UnaryExpression",
                                                    "operator": "delete",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "x"
                                                    },
                                                    "prefix": true
                                                }
                                            }
                                        ]
                                    },
                                    "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "UnaryExpression",
                                                    "operator": "delete",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "value"
                                                    },
                                                    "prefix": true
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                                "type": "ArrayExpression",
                                "elements": []
                            },
                            "prefix": true
                        },
                        "prefix": true
                    },
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "test8"
                        },
                        "arguments": []
                    },
                    {
                        "type": "Literal",
                        "value": "test8",
                        "raw": "'test8'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertThrows"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "x",
                        "raw": "'x'"
                    }
                ]
            }
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "test9"
            },
            "params": [],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "WithStatement",
                        "object": {
                            "type": "ObjectExpression",
                            "properties": []
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "ReturnStatement",
                                    "argument": {
                                        "type": "UnaryExpression",
                                        "operator": "delete",
                                        "argument": {
                                            "type": "Identifier",
                                            "name": "x"
                                        },
                                        "prefix": true
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertThrows"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": "x",
                        "raw": "'x'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                                "type": "ArrayExpression",
                                "elements": []
                            },
                            "prefix": true
                        },
                        "prefix": true
                    },
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "test9"
                        },
                        "arguments": []
                    },
                    {
                        "type": "Literal",
                        "value": "test9",
                        "raw": "'test9'"
                    }
                ]
            }
        },
        {
            "type": "VariableDeclaration",
            "declarations": [
                {
                    "type": "VariableDeclarator",
                    "id": {
                        "type": "Identifier",
                        "name": "y"
                    },
                    "init": {
                        "type": "Literal",
                        "value": 10,
                        "raw": "0xa"
                    }
                }
            ],
            "kind": "var"
        },
        {
            "type": "FunctionDeclaration",
            "id": {
                "type": "Identifier",
                "name": "test10"
            },
            "params": [],
            "body": {
                "type": "BlockStatement",
                "body": [
                    {
                        "type": "WithStatement",
                        "object": {
                            "type": "ObjectExpression",
                            "properties": []
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": [
                                {
                                    "type": "IfStatement",
                                    "test": {
                                        "type": "BinaryExpression",
                                        "operator": "!==",
                                        "left": {
                                            "type": "Literal",
                                            "value": "IILyx",
                                            "raw": "'IILyx'"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": "IILyx",
                                            "raw": "'IILyx'"
                                        }
                                    },
                                    "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "UnaryExpression",
                                                    "operator": "delete",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "y"
                                                    },
                                                    "prefix": true
                                                }
                                            }
                                        ]
                                    },
                                    "alternate": {
                                        "type": "BlockStatement",
                                        "body": [
                                            {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                    "type": "UnaryExpression",
                                                    "operator": "delete",
                                                    "argument": {
                                                        "type": "Identifier",
                                                        "name": "y"
                                                    },
                                                    "prefix": true
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "generator": false,
            "expression": false,
            "async": false
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                            "type": "ArrayExpression",
                            "elements": []
                        },
                        "prefix": true
                    },
                    {
                        "type": "CallExpression",
                        "callee": {
                            "type": "Identifier",
                            "name": "test10"
                        },
                        "arguments": []
                    },
                    {
                        "type": "Literal",
                        "value": "test10",
                        "raw": "'test10'"
                    }
                ]
            }
        },
        {
            "type": "ExpressionStatement",
            "expression": {
                "type": "CallExpression",
                "callee": {
                    "type": "Identifier",
                    "name": "assertEquals"
                },
                "arguments": [
                    {
                        "type": "Literal",
                        "value": 10,
                        "raw": "0xa"
                    },
                    {
                        "type": "Identifier",
                        "name": "y"
                    },
                    {
                        "type": "Literal",
                        "value": "test10",
                        "raw": "'test10'"
                    }
                ]
            }
        }
    ],
    "sourceType": "script"
}