'use strict';
const _0x5d55 = [
    'zvWQr',
    'jMcsk',
    'GXbVq',
    'fqDgM',
    'EXOGT',
    'DrEuK',
    'MRkfF',
    'isKeyword',
    'name',
    'ccdrk',
    'HBqTX',
    '\x22\x20is\x20not\x20a\x20valid\x20identifier',
    'Pureish',
    'Literal',
    'Immutable',
    'NumericLiteral',
    'NumberLiteral',
    'number',
    'NullLiteral',
    'RegExpLiteral',
    'pattern',
    'flags',
    'RegexLiteral',
    '\x22\x20is\x20not\x20a\x20valid\x20RegExp\x20flag',
    'LogicalExpression',
    'LOGICAL_OPERATORS',
    'object',
    'computed',
    'optional',
    'PrivateName',
    'EGpgg',
    'vfJSX',
    'bydEp',
    'sourceType',
    'interpreter',
    'script',
    'properties',
    'ObjectProperty',
    'ObjectMethod',
    'kind',
    'key',
    'method',
    'set',
    'StringLiteral',
    'mPtdr',
    'Uyslo',
    'tQIwm',
    'oneOfNodeTypes',
    'Decorator',
    'UserWhitespacable',
    'ObjectMember',
    'shorthand',
    'HWZkF',
    'IWZMf',
    'mrvfb',
    'shovV',
    'Property\x20shorthand\x20of\x20ObjectProperty\x20cannot\x20be\x20true\x20if\x20computed\x20is\x20true',
    'Property\x20shorthand\x20of\x20ObjectProperty\x20cannot\x20be\x20true\x20if\x20key\x20is\x20not\x20an\x20Identifier',
    'XZvfl',
    'Property',
    'TwZVw',
    'DlKmp',
    'ipFVn',
    'argument',
    'RestProperty',
    'Internal\x20Babel\x20error:\x20malformed\x20key.',
    'WdNoo',
    'RestElement\x20must\x20be\x20last\x20element\x20of\x20',
    'SequenceExpression',
    'expressions',
    'ParenthesizedExpression',
    'ExpressionWrapper',
    'SwitchCase',
    'SwitchStatement',
    'discriminant',
    'cases',
    'ThisExpression',
    'ThrowStatement',
    'CompletionStatement',
    'TryStatement',
    'block',
    'handler',
    'TryStatement\x20expects\x20either\x20a\x20handler\x20or\x20finalizer,\x20or\x20both',
    'finalizer',
    'PuLmX',
    'CatchClause',
    'UnaryExpression',
    'prefix',
    'UnaryLike',
    'declarations',
    'const',
    'VariableDeclarator',
    'Jrdbk',
    'NiAVg',
    'length',
    'Exactly\x20one\x20VariableDeclarator\x20is\x20required\x20in\x20the\x20VariableDeclaration\x20of\x20a\x20',
    'type',
    'ArrayPattern',
    'qAtUB',
    'qwSYO',
    'hxFCK',
    'Pcvdc',
    'WhileStatement',
    'WithStatement',
    'ArrowFunctionExpression',
    'ClassBody',
    'ClassMethod',
    'ClassPrivateMethod',
    'ClassProperty',
    'ClassPrivateProperty',
    'TSDeclareMethod',
    'TSIndexSignature',
    'superClass',
    'mixins',
    'implements',
    'Class',
    'InterfaceExtends',
    'ClassDeclaration',
    'ClassExpression',
    'TSExpressionWithTypeArguments',
    'ClassImplements',
    'wdAvD',
    'trtby',
    'source',
    'ModuleDeclaration',
    'ExportDeclaration',
    'validateOptional',
    'ImportAttribute',
    'declaration',
    'TSDeclareFunction',
    'ExportNamedDeclaration',
    'Only\x20declaration\x20or\x20specifiers\x20is\x20allowed\x20on\x20ExportNamedDeclaration',
    'specifiers',
    'ExportDefaultSpecifier',
    'ObjYi',
    'ExportNamespaceSpecifier',
    'kRwDt',
    'local',
    'ModuleSpecifier',
    'await',
    'mEuAt',
    'iinOP',
    'aWftp',
    'McgTe',
    'oMaHl',
    'ImportDefaultSpecifier',
    'typeof',
    'ImportNamespaceSpecifier',
    'ImportSpecifier',
    'imported',
    'MetaProperty',
    'function',
    'import',
    'ixcMM',
    'sent',
    'new',
    'oKHue',
    'akxMm',
    'protected',
    'yygBj',
    'HhwuB',
    'ETfXI',
    'TSParameterProperty',
    'get',
    'constructor',
    'public',
    'SpreadProperty',
    'Super',
    'tag',
    'TemplateLiteral',
    'TemplateElement',
    'assertShape',
    'quasis',
    'TSType',
    'mDVKS',
    'Number\x20of\x20',
    'LiIrP',
    'delegate',
    'pjjIz',
    'AwaitExpression',
    'Import',
    'BigIntLiteral',
    'exported',
    'YfldB',
    'assertOptionalChainStart',
    'OptionalCallExpression',
    '946093tODXia',
    '1siRvKP',
    '6nzFjbt',
    '30433sSXkTY',
    '13181nSXPma',
    '16DKoRRQ',
    '198673JTLknc',
    '3mJXNMT',
    '516435vQKGhS',
    '1JwQlLA',
    '110154vYMLns',
    '3pbovjn',
    '3851KDHkSH',
    '29qhitLB',
    'defineProperty',
    'classMethodOrDeclareMethodCommon',
    'classMethodOrPropertyCommon',
    'patternLikeCommon',
    'functionTypeAnnotationCommon',
    'functionCommon',
    '../validators/isValidIdentifier',
    '../constants',
    './utils',
    'default',
    'ArrayExpression',
    'chain',
    'assertValueType',
    'array',
    'assertEach',
    'assertNodeOrValueType',
    'null',
    'SpreadElement',
    'elements',
    'Expression',
    'AssignmentExpression',
    'Pattern',
    'string',
    'env',
    'BABEL_TYPES_8_BREAKING',
    'FVXel',
    'assertOneOf',
    'ASSIGNMENT_OPERATORS',
    'RhBzj',
    'left',
    'qHdtX',
    'assertNodeType',
    'LVal',
    'Identifier',
    'MemberExpression',
    'ObjectPattern',
    'right',
    'BinaryExpression',
    'operator',
    'BINARY_OPERATORS',
    'YmwxA',
    'VFkNQ',
    'rRSnW',
    'DmekG',
    'Binary',
    'InterpreterDirective',
    'value',
    'Directive',
    'DirectiveLiteral',
    'directives',
    'Statement',
    'BlockParent',
    'Block',
    'BreakStatement',
    'label',
    'Terminatorless',
    'CallExpression',
    'arguments',
    'typeParameters',
    'typeArguments',
    'callee',
    'assign',
    'JSXNamespacedName',
    'ArgumentPlaceholder',
    'TypeParameterInstantiation',
    'TSTypeParameterInstantiation',
    'param',
    'body',
    'BlockStatement',
    'Scopable',
    'ConditionalExpression',
    'test',
    'consequent',
    'Conditional',
    'ContinueStatement',
    'DebuggerStatement',
    'DoWhileStatement',
    'Loop',
    'While',
    'EmptyStatement',
    'ExpressionStatement',
    'expression',
    'comments',
    'Program',
    'CommentBlock',
    'CommentLine',
    'any',
    'ForInStatement',
    'For',
    'ForXStatement',
    'VariableDeclaration',
    'ForStatement',
    'init',
    'RestElement',
    'TypeAnnotation',
    'TSTypeAnnotation',
    'TypeParameterDeclaration',
    'TSTypeParameterDeclaration',
    'Noop',
    'boolean',
    'FunctionDeclaration',
    'params',
    'generator',
    'async',
    'returnType',
    'FunctionParent',
    'Declaration',
    'ExportDefaultDeclaration',
    'hEDxE',
    'rgzce',
    'aGLnN',
    'Function',
    'typeAnnotation',
    'decorators',
    'PatternLike',
    'TSEntityName',
    '\x22\x20is\x20not\x20a\x20valid\x20identifier\x20name',
    'property',
    'OptionalMemberExpression',
    'Method',
    'ExportSpecifier',
    'meta',
    'this',
    'exec',
    'wkZky',
    'jyGTP',
    'uSeYJ',
    'YhgKN',
    'eGPFL',
    'mzAYS'
];
const _0x53d88e = _0x4a75;
(function (_0x426f06, _0x5be25b) {
    const _0x635cf9 = _0x4a75;
    while (!![]) {
        try {
            const _0x478344 = -parseInt(_0x635cf9(0x1a3)) * parseInt(_0x635cf9(0x1a4)) + parseInt(_0x635cf9(0x1a5)) * parseInt(_0x635cf9(0x1a6)) + parseInt(_0x635cf9(0x1a7)) * -parseInt(_0x635cf9(0x1a8)) + parseInt(_0x635cf9(0x1a9)) * parseInt(_0x635cf9(0x1aa)) + parseInt(_0x635cf9(0x1ab)) * parseInt(_0x635cf9(0x1ac)) + parseInt(_0x635cf9(0x1ad)) * parseInt(_0x635cf9(0x1ae)) + -parseInt(_0x635cf9(0x1af)) * -parseInt(_0x635cf9(0x1b0));
            if (_0x478344 === _0x5be25b)
                break;
            else
                _0x426f06['push'](_0x426f06['shift']());
        } catch (_0x42c17e) {
            _0x426f06['push'](_0x426f06['shift']());
        }
    }
}(_0x5d55, -0x59d96 * 0x2 + -0x2 * -0x247e4 + -0x38 * -0x46f6));
Object[_0x53d88e(0x1b1)](exports, '__esModule', { 'value': !![] }), exports[_0x53d88e(0x1b2)] = exports[_0x53d88e(0x1b3)] = exports[_0x53d88e(0x1b4)] = exports['functionDeclarationCommon'] = exports[_0x53d88e(0x1b5)] = exports[_0x53d88e(0x1b6)] = void (-0x115c + 0x116c + -0x10);
var _is = require('../validators/is'), _isValidIdentifier = require(_0x53d88e(0x1b7)), _helperValidatorIdentifier = require('@babel/helper-validator-identifier'), _constants = require(_0x53d88e(0x1b8)), _utils = require(_0x53d88e(0x1b9));
(0xf * 0x2f + 0xad0 + 0x1 * -0xd91, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1bb), {
    'fields': {
        'elements': {
            'validate': (0x1f67 * -0x1 + -0x16a + -0x20d1 * -0x1, _utils[_0x53d88e(0x1bc)])((-0x143b * -0x1 + -0x1 * -0x1f97 + -0x33d2, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (0x1 * -0x13cb + -0x202 * 0x3 + 0x19d1, _utils[_0x53d88e(0x1bf)])((0x4d6 + 0x112 * -0x17 + -0x1a6 * -0xc, _utils[_0x53d88e(0x1c0)])(_0x53d88e(0x1c1), 'Expression', _0x53d88e(0x1c2)))),
            'default': !process['env']['BABEL_TYPES_8_BREAKING'] ? [] : undefined
        }
    },
    'visitor': [_0x53d88e(0x1c3)],
    'aliases': [_0x53d88e(0x1c4)]
}), (0xa2c + -0x9f4 + -0xe * 0x4, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1c5), {
    'fields': {
        'operator': {
            'validate': function () {
                const _0x58de36 = _0x53d88e, _0x242db2 = {
                        'RhBzj': _0x58de36(0x1c6),
                        'qHdtX': function (_0x51f218, _0x1413a7, _0x1357bc, _0x5ddb49) {
                            return _0x51f218(_0x1413a7, _0x1357bc, _0x5ddb49);
                        },
                        'FVXel': _0x58de36(0x1c7)
                    };
                if (!process[_0x58de36(0x1c8)][_0x58de36(0x1c9)])
                    return (-0xfeb + 0x21b + -0xd0 * -0x11, _utils[_0x58de36(0x1bd)])(_0x242db2[_0x58de36(0x1ca)]);
                const _0x92a8d9 = (-0x6 * -0x3e7 + 0x47 * -0x43 + 0x4d5 * -0x1, _utils[_0x58de36(0x1cb)])(..._constants[_0x58de36(0x1cc)]), _0x31f59a = (0x1e0b * -0x1 + 0xd * -0x277 + 0x9 * 0x6e6, _utils[_0x58de36(0x1cb)])('=');
                return function (_0x517be9, _0x4238ed, _0x12d2cf) {
                    const _0x8d925b = _0x58de36, _0x519b28 = (-0x2 * 0x92b + 0x2 * 0x8e9 + 0x84, _is[_0x8d925b(0x1ba)])(_0x242db2[_0x8d925b(0x1cd)], _0x517be9[_0x8d925b(0x1ce)]) ? _0x31f59a : _0x92a8d9;
                    _0x242db2[_0x8d925b(0x1cf)](_0x519b28, _0x517be9, _0x4238ed, _0x12d2cf);
                };
            }()
        },
        'left': { 'validate': !process[_0x53d88e(0x1c8)][_0x53d88e(0x1c9)] ? (-0x2413 + -0x1edd + 0x33 * 0x150, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d1)) : (0x3db * -0x1 + -0xc * -0x3c + -0x59 * -0x3, _utils['assertNodeType'])(_0x53d88e(0x1d2), _0x53d88e(0x1d3), 'ArrayPattern', _0x53d88e(0x1d4)) },
        'right': { 'validate': (-0x260b * -0x1 + -0x67 * 0xe + -0x2069, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) }
    },
    'builder': [
        'operator',
        'left',
        _0x53d88e(0x1d5)
    ],
    'visitor': [
        'left',
        _0x53d88e(0x1d5)
    ],
    'aliases': [_0x53d88e(0x1c4)]
}), (-0xbc6 + -0x4 * 0x99e + 0x3b * 0xda, _utils['default'])(_0x53d88e(0x1d6), {
    'builder': [
        _0x53d88e(0x1d7),
        _0x53d88e(0x1ce),
        _0x53d88e(0x1d5)
    ],
    'fields': {
        'operator': { 'validate': (0x60 + 0x2619 * 0x1 + -0x1 * 0x2679, _utils[_0x53d88e(0x1cb)])(..._constants[_0x53d88e(0x1d8)]) },
        'left': {
            'validate': function () {
                const _0x3fc8e7 = _0x53d88e, _0x1c6cd3 = {
                        'rRSnW': function (_0xdeb58, _0x15d9b8) {
                            return _0xdeb58 === _0x15d9b8;
                        },
                        'DmekG': function (_0x222712, _0x2f62e4, _0x569038, _0x43dac7) {
                            return _0x222712(_0x2f62e4, _0x569038, _0x43dac7);
                        },
                        'YmwxA': _0x3fc8e7(0x1c4),
                        'VFkNQ': 'PrivateName'
                    }, _0x4f8e11 = (-0xc44 + -0x26 * -0xb + 0x551 * 0x2, _utils['assertNodeType'])(_0x1c6cd3[_0x3fc8e7(0x1d9)]), _0x4f33cf = (0x130c + 0xe1 * -0x29 + 0x10fd, _utils['assertNodeType'])(_0x1c6cd3[_0x3fc8e7(0x1d9)], _0x1c6cd3[_0x3fc8e7(0x1da)]), _0x4c2537 = function (_0x592d19, _0x44e7d5, _0x3d4a3e) {
                        const _0x56c26d = _0x3fc8e7, _0x25eff7 = _0x1c6cd3[_0x56c26d(0x1db)](_0x592d19['operator'], 'in') ? _0x4f33cf : _0x4f8e11;
                        _0x1c6cd3[_0x56c26d(0x1dc)](_0x25eff7, _0x592d19, _0x44e7d5, _0x3d4a3e);
                    };
                return _0x4c2537['oneOfNodeTypes'] = [
                    _0x1c6cd3[_0x3fc8e7(0x1d9)],
                    _0x1c6cd3[_0x3fc8e7(0x1da)]
                ], _0x4c2537;
            }()
        },
        'right': { 'validate': (-0x1116 + 0x78 + 0x109e, _utils['assertNodeType'])(_0x53d88e(0x1c4)) }
    },
    'visitor': [
        _0x53d88e(0x1ce),
        _0x53d88e(0x1d5)
    ],
    'aliases': [
        _0x53d88e(0x1dd),
        _0x53d88e(0x1c4)
    ]
}), (0x11 * 0x1f5 + 0x1186 * -0x1 + 0x1d * -0x8b, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1de), {
    'builder': [_0x53d88e(0x1df)],
    'fields': { 'value': { 'validate': (-0x18c4 * -0x1 + 0x1dd9 + -0x369d, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1c7)) } }
}), (0x147 * 0xb + -0x2187 + 0x137a * 0x1, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1e0), {
    'visitor': [_0x53d88e(0x1df)],
    'fields': { 'value': { 'validate': (-0x1 * 0xbe9 + -0x1 * 0xd3d + 0x1926, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1e1)) } }
}), (0x1647 * 0x1 + 0xb * -0x99 + 0x29e * -0x6, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1e1), {
    'builder': [_0x53d88e(0x1df)],
    'fields': { 'value': { 'validate': (0x1 * 0x266d + -0x1 * -0x3d + -0x26aa, _utils[_0x53d88e(0x1bd)])('string') } }
}), (-0x176d + 0x22c8 + -0x9 * 0x143, _utils[_0x53d88e(0x1ba)])('BlockStatement', {
    'builder': [
        'body',
        _0x53d88e(0x1e2)
    ],
    'visitor': [
        _0x53d88e(0x1e2),
        'body'
    ],
    'fields': {
        'directives': {
            'validate': (0x795 + 0x1 * 0xe98 + -0x162d, _utils[_0x53d88e(0x1bc)])((-0x571 * 0x7 + 0x23df + 0x8 * 0x47, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0x3b * 0x76 + -0x1 * -0x1d30 + -0x1fe, _utils[_0x53d88e(0x1bf)])((-0x3 * -0x75c + -0xb1e + -0xaf6, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1e0)))),
            'default': []
        },
        'body': { 'validate': (0x22f4 + 0x1f95 + -0x4289 * 0x1, _utils[_0x53d88e(0x1bc)])((0x123b * -0x2 + -0x3 * -0xa67 + 0x541, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (0xa3c + 0xd55 * 0x1 + -0x1791, _utils[_0x53d88e(0x1bf)])((-0x2b3 * -0x1 + -0x3 * 0x2bd + 0x4 * 0x161, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1e3)))) }
    },
    'aliases': [
        'Scopable',
        _0x53d88e(0x1e4),
        _0x53d88e(0x1e5),
        'Statement'
    ]
}), (0x1 * 0x981 + 0x268 + -0xbe9, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1e6), {
    'visitor': [_0x53d88e(0x1e7)],
    'fields': {
        'label': {
            'validate': (-0x1dc3 + -0x7 * 0x23e + 0x2d75 * 0x1, _utils[_0x53d88e(0x1d0)])('Identifier'),
            'optional': !![]
        }
    },
    'aliases': [
        _0x53d88e(0x1e3),
        _0x53d88e(0x1e8),
        'CompletionStatement'
    ]
}), (-0x24d * -0x5 + -0x1161 * -0x2 + -0x2e43, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1e9), {
    'visitor': [
        'callee',
        _0x53d88e(0x1ea),
        _0x53d88e(0x1eb),
        _0x53d88e(0x1ec)
    ],
    'builder': [
        _0x53d88e(0x1ed),
        _0x53d88e(0x1ea)
    ],
    'aliases': ['Expression'],
    'fields': Object[_0x53d88e(0x1ee)]({
        'callee': { 'validate': (0x315 * 0x5 + -0x142f * -0x1 + -0x1 * 0x2398, _utils[_0x53d88e(0x1d0)])('Expression', 'V8IntrinsicIdentifier') },
        'arguments': { 'validate': (0x1c5a + 0x1da2 + -0x39fc, _utils['chain'])((0x60b + -0x6b * -0x59 + -0x2b3e, _utils['assertValueType'])(_0x53d88e(0x1be)), (-0x15c * 0xa + 0xca * 0x1d + 0x1d * -0x52, _utils[_0x53d88e(0x1bf)])((0x248a + -0x89f * 0x4 + -0x20e, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4), _0x53d88e(0x1c2), _0x53d88e(0x1ef), _0x53d88e(0x1f0)))) }
    }, !process[_0x53d88e(0x1c8)]['BABEL_TYPES_8_BREAKING'] ? {
        'optional': {
            'validate': (-0x233c + 0x1 * 0x98d + 0x19 * 0x107, _utils['assertOneOf'])(!![], ![]),
            'optional': !![]
        }
    } : {}, {
        'typeArguments': {
            'validate': (0x2 * -0x65b + -0xb3f * -0x3 + -0x1507, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f1)),
            'optional': !![]
        },
        'typeParameters': {
            'validate': (-0x1921 + -0x1 * 0x727 + 0x409 * 0x8, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f2)),
            'optional': !![]
        }
    })
}), (0x1 * -0x237b + -0x19e7 + 0x3d62, _utils[_0x53d88e(0x1ba)])('CatchClause', {
    'visitor': [
        _0x53d88e(0x1f3),
        _0x53d88e(0x1f4)
    ],
    'fields': {
        'param': {
            'validate': (-0x15b9 + 0x442 * 0x9 + 0x1 * -0x1099, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2), 'ArrayPattern', _0x53d88e(0x1d4)),
            'optional': !![]
        },
        'body': { 'validate': (0x19a3 + 0xc02 + -0x17 * 0x1a3, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f5)) }
    },
    'aliases': [
        _0x53d88e(0x1f6),
        'BlockParent'
    ]
}), (0x66 + 0x35 * -0x6 + 0xd8, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1f7), {
    'visitor': [
        _0x53d88e(0x1f8),
        _0x53d88e(0x1f9),
        'alternate'
    ],
    'fields': {
        'test': { 'validate': (-0x25d5 + 0x3 * -0x2fb + 0x2ec6, _utils['assertNodeType'])(_0x53d88e(0x1c4)) },
        'consequent': { 'validate': (-0x1 * 0xf6c + 0x1cc8 + -0x6 * 0x23a, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) },
        'alternate': { 'validate': (0x24e9 + 0x2 * 0x657 + -0x3197, _utils[_0x53d88e(0x1d0)])('Expression') }
    },
    'aliases': [
        _0x53d88e(0x1c4),
        _0x53d88e(0x1fa)
    ]
}), (0x9be + -0x12c9 + -0x1 * -0x90b, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1fb), {
    'visitor': [_0x53d88e(0x1e7)],
    'fields': {
        'label': {
            'validate': (-0xe0a + 0x2524 + -0x171a, _utils[_0x53d88e(0x1d0)])('Identifier'),
            'optional': !![]
        }
    },
    'aliases': [
        _0x53d88e(0x1e3),
        'Terminatorless',
        'CompletionStatement'
    ]
}), (0x2e3 * -0x5 + 0x4 * 0x805 + -0x11a5, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1fc), { 'aliases': [_0x53d88e(0x1e3)] }), (-0x1b0c + 0x144b + 0x6c1, _utils['default'])(_0x53d88e(0x1fd), {
    'visitor': [
        _0x53d88e(0x1f8),
        _0x53d88e(0x1f4)
    ],
    'fields': {
        'test': { 'validate': (-0x12fc + 0xf1e + 0x6 * 0xa5, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) },
        'body': { 'validate': (-0x1d8f + -0x25 * -0x2f + -0x1f * -0xbc, _utils['assertNodeType'])(_0x53d88e(0x1e3)) }
    },
    'aliases': [
        _0x53d88e(0x1e3),
        'BlockParent',
        _0x53d88e(0x1fe),
        _0x53d88e(0x1ff),
        _0x53d88e(0x1f6)
    ]
}), (0x189e + -0x1cee + 0x450, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x200), { 'aliases': ['Statement'] }), (0x5e * 0x3 + -0x4cd + 0x3b3, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x201), {
    'visitor': [_0x53d88e(0x202)],
    'fields': { 'expression': { 'validate': (0x10c7 + 0x217b + 0x2 * -0x1921, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) } },
    'aliases': [
        'Statement',
        'ExpressionWrapper'
    ]
}), (-0xb57 * -0x1 + -0x2 * 0x938 + 0x4f * 0x17, _utils[_0x53d88e(0x1ba)])('File', {
    'builder': [
        'program',
        _0x53d88e(0x203),
        'tokens'
    ],
    'visitor': ['program'],
    'fields': {
        'program': { 'validate': (-0x1b3a + 0x1a * 0x2 + 0x6 * 0x481, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x204)) },
        'comments': {
            'validate': !process[_0x53d88e(0x1c8)]['BABEL_TYPES_8_BREAKING'] ? Object[_0x53d88e(0x1ee)](() => {
            }, {
                'each': {
                    'oneOfNodeTypes': [
                        _0x53d88e(0x205),
                        _0x53d88e(0x206)
                    ]
                }
            }) : (0x1e9e * -0x1 + -0x3 * 0xaf1 + 0x3f71, _utils[_0x53d88e(0x1bf)])((0x8 * -0x3a1 + 0x3 * -0x7b9 + 0x17 * 0x245, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x205), _0x53d88e(0x206))),
            'optional': !![]
        },
        'tokens': {
            'validate': (-0x2 * -0x4d8 + -0x99f + -0x11 * 0x1, _utils[_0x53d88e(0x1bf)])(Object['assign'](() => {
            }, { 'type': _0x53d88e(0x207) })),
            'optional': !![]
        }
    }
}), (-0x999 * 0x1 + 0x5 * -0x92 + 0xc73, _utils['default'])(_0x53d88e(0x208), {
    'visitor': [
        _0x53d88e(0x1ce),
        _0x53d88e(0x1d5),
        _0x53d88e(0x1f4)
    ],
    'aliases': [
        _0x53d88e(0x1f6),
        _0x53d88e(0x1e3),
        _0x53d88e(0x209),
        _0x53d88e(0x1e4),
        _0x53d88e(0x1fe),
        _0x53d88e(0x20a)
    ],
    'fields': {
        'left': { 'validate': !process['env']['BABEL_TYPES_8_BREAKING'] ? (0x16 * 0x9d + 0x240 + -0x326 * 0x5, _utils['assertNodeType'])(_0x53d88e(0x20b), _0x53d88e(0x1d1)) : (-0x403 * 0x1 + 0x14c8 + -0x10c5 * 0x1, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x20b), _0x53d88e(0x1d2), _0x53d88e(0x1d3), 'ArrayPattern', _0x53d88e(0x1d4)) },
        'right': { 'validate': (-0x1 * -0x1849 + -0x1 * 0x1dd9 + 0x590, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) },
        'body': { 'validate': (-0x13e + 0x1c4c + 0xd87 * -0x2, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1e3)) }
    }
}), (0x14 * -0x3a + 0x2141 * 0x1 + -0x39 * 0x81, _utils['default'])(_0x53d88e(0x20c), {
    'visitor': [
        _0x53d88e(0x20d),
        _0x53d88e(0x1f8),
        'update',
        _0x53d88e(0x1f4)
    ],
    'aliases': [
        'Scopable',
        'Statement',
        _0x53d88e(0x209),
        _0x53d88e(0x1e4),
        _0x53d88e(0x1fe)
    ],
    'fields': {
        'init': {
            'validate': (-0x2635 * -0x1 + 0x17d1 + -0x3e06, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x20b), _0x53d88e(0x1c4)),
            'optional': !![]
        },
        'test': {
            'validate': (-0xcd * -0x10 + -0x146 * 0x4 + -0x7b8, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)),
            'optional': !![]
        },
        'update': {
            'validate': (0xd74 + -0x1 * -0x1387 + -0x20fb, _utils['assertNodeType'])(_0x53d88e(0x1c4)),
            'optional': !![]
        },
        'body': { 'validate': (-0x143d + 0x6b1 * -0x3 + -0x50a * -0x8, _utils['assertNodeType'])(_0x53d88e(0x1e3)) }
    }
});
const functionCommon = {
    'params': { 'validate': (-0x6d2 + -0x1 * -0x93f + 0xcf * -0x3, _utils[_0x53d88e(0x1bc)])((0xb93 + 0xfe4 + -0x1b77, _utils['assertValueType'])('array'), (-0x19c8 + 0x509 * -0x6 + 0x2 * 0x1bff, _utils['assertEach'])((0x2274 + -0x6 * -0x443 + -0x3c06, _utils['assertNodeType'])(_0x53d88e(0x1d2), _0x53d88e(0x1c6), _0x53d88e(0x20e)))) },
    'generator': { 'default': ![] },
    'async': { 'default': ![] }
};
exports['functionCommon'] = functionCommon;
const functionTypeAnnotationCommon = {
    'returnType': {
        'validate': (-0x1896 + 0x1 * -0x1421 + 0x2cb7, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x20f), _0x53d88e(0x210), 'Noop'),
        'optional': !![]
    },
    'typeParameters': {
        'validate': (-0x35 * 0x4 + -0x1 * -0x22ed + -0x2219, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x211), _0x53d88e(0x212), _0x53d88e(0x213)),
        'optional': !![]
    }
};
exports[_0x53d88e(0x1b5)] = functionTypeAnnotationCommon;
const functionDeclarationCommon = Object[_0x53d88e(0x1ee)]({}, functionCommon, {
    'declare': {
        'validate': (-0x3 * -0xd03 + -0x5 * -0x2b + -0x27e0, _utils['assertValueType'])(_0x53d88e(0x214)),
        'optional': !![]
    },
    'id': {
        'validate': (0x1cab + 0x1bfc + 0x1 * -0x38a7, _utils['assertNodeType'])(_0x53d88e(0x1d2)),
        'optional': !![]
    }
});
exports['functionDeclarationCommon'] = functionDeclarationCommon, (-0x158 + 0x12c9 * -0x1 + 0x1421, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x215), {
    'builder': [
        'id',
        _0x53d88e(0x216),
        'body',
        _0x53d88e(0x217),
        _0x53d88e(0x218)
    ],
    'visitor': [
        'id',
        _0x53d88e(0x216),
        'body',
        _0x53d88e(0x219),
        _0x53d88e(0x1eb)
    ],
    'fields': Object['assign']({}, functionDeclarationCommon, functionTypeAnnotationCommon, { 'body': { 'validate': (0x77 + -0xf8c + 0xf15, _utils['assertNodeType'])(_0x53d88e(0x1f5)) } }),
    'aliases': [
        _0x53d88e(0x1f6),
        'Function',
        _0x53d88e(0x1e4),
        _0x53d88e(0x21a),
        'Statement',
        'Pureish',
        _0x53d88e(0x21b)
    ],
    'validate': function () {
        const _0x4cbe19 = _0x53d88e, _0xf3f164 = {
                'rgzce': _0x4cbe19(0x21c),
                'aGLnN': function (_0x1d714c, _0x570f5b, _0x5e2d39, _0x3b5e12) {
                    return _0x1d714c(_0x570f5b, _0x5e2d39, _0x3b5e12);
                },
                'hEDxE': 'Identifier'
            };
        if (!process[_0x4cbe19(0x1c8)][_0x4cbe19(0x1c9)])
            return () => {
            };
        const _0x358e5b = (-0x265a + -0x13fe + 0x1 * 0x3a58, _utils[_0x4cbe19(0x1d0)])(_0xf3f164[_0x4cbe19(0x21d)]);
        return function (_0x5d71f2, _0x100b09, _0x3b0deb) {
            const _0x54019d = _0x4cbe19;
            !(-0x1195 + -0x51d + -0x7 * -0x33e, _is[_0x54019d(0x1ba)])(_0xf3f164[_0x54019d(0x21e)], _0x5d71f2) && _0xf3f164[_0x54019d(0x21f)](_0x358e5b, _0x3b0deb, 'id', _0x3b0deb['id']);
        };
    }()
}), (0x84e + -0xa3a * -0x3 + -0xa * 0x3e6, _utils[_0x53d88e(0x1ba)])('FunctionExpression', {
    'inherits': _0x53d88e(0x215),
    'aliases': [
        _0x53d88e(0x1f6),
        _0x53d88e(0x220),
        _0x53d88e(0x1e4),
        _0x53d88e(0x21a),
        'Expression',
        'Pureish'
    ],
    'fields': Object['assign']({}, functionCommon, functionTypeAnnotationCommon, {
        'id': {
            'validate': (-0x20b5 + 0x265 * 0x3 + 0x1986, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2)),
            'optional': !![]
        },
        'body': { 'validate': (-0x1df * 0x1 + -0x96c + 0xb4b, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f5)) }
    })
});
const patternLikeCommon = {
    'typeAnnotation': {
        'validate': (-0x7 * -0x36a + -0x20e9 + 0x903, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x20f), _0x53d88e(0x210), _0x53d88e(0x213)),
        'optional': !![]
    },
    'decorators': { 'validate': (-0xf97 * -0x1 + -0x1 * -0x2197 + -0x312e, _utils[_0x53d88e(0x1bc)])((-0x1928 + 0x1c53 + -0x32b, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0x25f1 * 0x1 + -0x19 * 0x103 + 0x3f3c, _utils['assertEach'])((-0x1d63 + -0x8c * 0x17 + 0x29f7 * 0x1, _utils['assertNodeType'])('Decorator'))) }
};
exports[_0x53d88e(0x1b4)] = patternLikeCommon, (0x1e3 * 0x3 + 0x6e8 * -0x4 + 0x15f7 * 0x1, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1d2), {
    'builder': ['name'],
    'visitor': [
        _0x53d88e(0x221),
        _0x53d88e(0x222)
    ],
    'aliases': [
        _0x53d88e(0x1c4),
        _0x53d88e(0x223),
        'LVal',
        _0x53d88e(0x224)
    ],
    'fields': Object['assign']({}, patternLikeCommon, {
        'name': {
            'validate': (-0x59 * 0xa + 0x19ee + 0x77c * -0x3, _utils[_0x53d88e(0x1bc)])((-0x1 * 0x1a56 + 0x60d + 0x1449 * 0x1, _utils['assertValueType'])(_0x53d88e(0x1c7)), Object[_0x53d88e(0x1ee)](function (_0x366800, _0xeebae6, _0x196c9c) {
                const _0x4a045b = _0x53d88e;
                if (!process[_0x4a045b(0x1c8)][_0x4a045b(0x1c9)])
                    return;
                if (!(-0x1186 + -0x3 * -0x9a9 + -0xb75, _isValidIdentifier[_0x4a045b(0x1ba)])(_0x196c9c, ![]))
                    throw new TypeError('\x22' + _0x196c9c + _0x4a045b(0x225));
            }, { 'type': _0x53d88e(0x1c7) }))
        },
        'optional': {
            'validate': (-0x1b3b + -0x1 * 0x21f7 + -0x6 * -0xa33, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x214)),
            'optional': !![]
        }
    }),
    'validate'(_0x4fc48b, _0x12eef0, _0xc7730d) {
        const _0x6336c = _0x53d88e, _0x3e788c = {
                'wkZky': function (_0x1ef6c5, _0x2c1b2d) {
                    return _0x1ef6c5 === _0x2c1b2d;
                },
                'etNHv': _0x6336c(0x226),
                'jyGTP': _0x6336c(0x1d3),
                'uSeYJ': _0x6336c(0x227),
                'kQVoX': function (_0x26019d, _0x53f8be) {
                    return _0x26019d === _0x53f8be;
                },
                'YhgKN': 'key',
                'eGPFL': 'Property',
                'mzAYS': _0x6336c(0x228),
                'zvWQr': function (_0x201065, _0x196a23) {
                    return _0x201065 === _0x196a23;
                },
                'jMcsk': _0x6336c(0x229),
                'GXbVq': 'imported',
                'fqDgM': 'ImportSpecifier',
                'EXOGT': function (_0x38a9e6, _0x19bcfc) {
                    return _0x38a9e6 === _0x19bcfc;
                },
                'DrEuK': _0x6336c(0x22a),
                'MRkfF': 'MetaProperty',
                'ccdrk': function (_0x1c9a4f, _0x1a0544) {
                    return _0x1c9a4f !== _0x1a0544;
                },
                'HBqTX': _0x6336c(0x22b)
            };
        if (!process[_0x6336c(0x1c8)][_0x6336c(0x1c9)])
            return;
        const _0x373656 = /\.(\w+)$/[_0x6336c(0x22c)](_0x12eef0);
        if (!_0x373656)
            return;
        const [, _0x306626] = _0x373656, _0x5c5d44 = { 'computed': ![] };
        if (_0x3e788c[_0x6336c(0x22d)](_0x306626, _0x3e788c['etNHv'])) {
            if ((0x88 * 0x4 + 0x5 * 0x739 + -0x263d, _is['default'])(_0x3e788c[_0x6336c(0x22e)], _0x4fc48b, _0x5c5d44))
                return;
            if ((0x14c * -0x14 + -0x587 + 0x1f77, _is[_0x6336c(0x1ba)])(_0x3e788c[_0x6336c(0x22f)], _0x4fc48b, _0x5c5d44))
                return;
        } else {
            if (_0x3e788c['kQVoX'](_0x306626, _0x3e788c[_0x6336c(0x230)])) {
                if ((0x1140 + -0x101e * 0x1 + -0x91 * 0x2, _is[_0x6336c(0x1ba)])(_0x3e788c[_0x6336c(0x231)], _0x4fc48b, _0x5c5d44))
                    return;
                if ((0x1 * 0x2ab + 0x1 * 0xe6d + -0x1118 * 0x1, _is[_0x6336c(0x1ba)])(_0x3e788c[_0x6336c(0x232)], _0x4fc48b, _0x5c5d44))
                    return;
            } else {
                if (_0x3e788c[_0x6336c(0x233)](_0x306626, 'exported')) {
                    if ((0x1b7 * -0x12 + 0xfe3 * 0x1 + 0xefb, _is['default'])(_0x3e788c[_0x6336c(0x234)], _0x4fc48b))
                        return;
                } else {
                    if (_0x306626 === _0x3e788c[_0x6336c(0x235)]) {
                        if ((0x3 * -0x2ef + -0x76 * 0x1 + 0x1 * 0x943, _is['default'])(_0x3e788c[_0x6336c(0x236)], _0x4fc48b, { 'imported': _0xc7730d }))
                            return;
                    } else {
                        if (_0x3e788c[_0x6336c(0x237)](_0x306626, _0x3e788c[_0x6336c(0x238)])) {
                            if ((0xba1 * 0x1 + -0x25f0 + 0x1c1 * 0xf, _is[_0x6336c(0x1ba)])(_0x3e788c[_0x6336c(0x239)], _0x4fc48b, { 'meta': _0xc7730d }))
                                return;
                        }
                    }
                }
            }
        }
        if (((-0x1 * -0x85 + 0x7 * -0x2f5 + 0x142e, _helperValidatorIdentifier[_0x6336c(0x23a)])(_0xc7730d['name']) || (-0x16c8 + -0x1 * 0xc82 + 0x2 * 0x11a5, _helperValidatorIdentifier['isReservedWord'])(_0xc7730d[_0x6336c(0x23b)], ![])) && _0x3e788c[_0x6336c(0x23c)](_0xc7730d[_0x6336c(0x23b)], _0x3e788c[_0x6336c(0x23d)]))
            throw new TypeError('\x22' + _0xc7730d[_0x6336c(0x23b)] + _0x6336c(0x23e));
    }
}), (-0x177b * -0x1 + -0xa10 + -0x2af * 0x5, _utils[_0x53d88e(0x1ba)])('IfStatement', {
    'visitor': [
        'test',
        'consequent',
        'alternate'
    ],
    'aliases': [
        _0x53d88e(0x1e3),
        _0x53d88e(0x1fa)
    ],
    'fields': {
        'test': { 'validate': (-0x8e1 + -0x164 * 0x8 + 0x1401, _utils[_0x53d88e(0x1d0)])('Expression') },
        'consequent': { 'validate': (0x1b58 + 0x2342 * 0x1 + -0x3e9a, _utils['assertNodeType'])(_0x53d88e(0x1e3)) },
        'alternate': {
            'optional': !![],
            'validate': (0xad5 + -0xd13 + 0x23e, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1e3))
        }
    }
}), (-0xab2 + -0x4bb + -0x167 * -0xb, _utils[_0x53d88e(0x1ba)])('LabeledStatement', {
    'visitor': [
        _0x53d88e(0x1e7),
        _0x53d88e(0x1f4)
    ],
    'aliases': [_0x53d88e(0x1e3)],
    'fields': {
        'label': { 'validate': (0x10e4 + 0xcf7 * -0x1 + -0x3ed, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2)) },
        'body': { 'validate': (-0x2a8 * 0x5 + 0x57 * -0x2b + 0x1be5, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1e3)) }
    }
}), (-0x2 * -0x1b0 + -0x1 * 0xe15 + 0xab5, _utils['default'])('StringLiteral', {
    'builder': [_0x53d88e(0x1df)],
    'fields': { 'value': { 'validate': (0x5b5 * 0x1 + -0xdc3 + 0x80e, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1c7)) } },
    'aliases': [
        _0x53d88e(0x1c4),
        _0x53d88e(0x23f),
        _0x53d88e(0x240),
        _0x53d88e(0x241)
    ]
}), (0xb * 0x2f + 0x30 * -0x91 + 0x11 * 0x17b, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x242), {
    'builder': [_0x53d88e(0x1df)],
    'deprecatedAlias': _0x53d88e(0x243),
    'fields': { 'value': { 'validate': (0x1256 + 0xedb * 0x1 + 0x2131 * -0x1, _utils['assertValueType'])(_0x53d88e(0x244)) } },
    'aliases': [
        'Expression',
        _0x53d88e(0x23f),
        'Literal',
        _0x53d88e(0x241)
    ]
}), (0x3eb * -0x3 + -0x2352 + 0x2f13, _utils['default'])(_0x53d88e(0x245), {
    'aliases': [
        _0x53d88e(0x1c4),
        _0x53d88e(0x23f),
        _0x53d88e(0x240),
        'Immutable'
    ]
}), (0xe50 + 0xb * -0x13f + -0x9b, _utils['default'])('BooleanLiteral', {
    'builder': [_0x53d88e(0x1df)],
    'fields': { 'value': { 'validate': (0x7 * -0x5 + -0x1d4 * 0x3 + 0x59f, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x214)) } },
    'aliases': [
        _0x53d88e(0x1c4),
        _0x53d88e(0x23f),
        _0x53d88e(0x240),
        'Immutable'
    ]
}), (0x71 * 0x2d + -0x1 * -0x2659 + -0x3a36, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x246), {
    'builder': [
        _0x53d88e(0x247),
        _0x53d88e(0x248)
    ],
    'deprecatedAlias': _0x53d88e(0x249),
    'aliases': [
        _0x53d88e(0x1c4),
        _0x53d88e(0x23f),
        _0x53d88e(0x240)
    ],
    'fields': {
        'pattern': { 'validate': (-0x989 + 0x13 * 0xf7 + -0x1 * 0x8cc, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1c7)) },
        'flags': {
            'validate': (0xc * 0x6c + -0x10 * 0x6 + -0x4b0, _utils[_0x53d88e(0x1bc)])((0x10f + 0x2435 + -0x2544, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1c7)), Object['assign'](function (_0x174712, _0x3cc17d, _0x3c2ff5) {
                const _0x4939b9 = _0x53d88e;
                if (!process[_0x4939b9(0x1c8)][_0x4939b9(0x1c9)])
                    return;
                const _0x383a7e = /[^gimsuy]/['exec'](_0x3c2ff5);
                if (_0x383a7e)
                    throw new TypeError('\x22' + _0x383a7e[0x43 * 0x20 + -0x1 * -0x1f9a + -0x27fa] + _0x4939b9(0x24a));
            }, { 'type': _0x53d88e(0x1c7) })),
            'default': ''
        }
    }
}), (0x3 * 0x5c + -0x71 * -0xa + -0x4a * 0x13, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x24b), {
    'builder': [
        _0x53d88e(0x1d7),
        _0x53d88e(0x1ce),
        _0x53d88e(0x1d5)
    ],
    'visitor': [
        _0x53d88e(0x1ce),
        _0x53d88e(0x1d5)
    ],
    'aliases': [
        _0x53d88e(0x1dd),
        'Expression'
    ],
    'fields': {
        'operator': { 'validate': (-0x9 * 0x3b9 + -0x3 * 0xae7 + 0x96 * 0x71, _utils[_0x53d88e(0x1cb)])(..._constants[_0x53d88e(0x24c)]) },
        'left': { 'validate': (0x1 * -0x95d + -0x3e7 + 0xd44, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) },
        'right': { 'validate': (-0x2 * 0x8b4 + -0x2125 * 0x1 + 0x328d, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) }
    }
}), (0x138f * 0x1 + -0x419 * -0x3 + 0x54f * -0x6, _utils['default'])(_0x53d88e(0x1d3), {
    'builder': [
        _0x53d88e(0x24d),
        _0x53d88e(0x226),
        _0x53d88e(0x24e),
        ...!process[_0x53d88e(0x1c8)]['BABEL_TYPES_8_BREAKING'] ? [_0x53d88e(0x24f)] : []
    ],
    'visitor': [
        _0x53d88e(0x24d),
        'property'
    ],
    'aliases': [
        _0x53d88e(0x1c4),
        _0x53d88e(0x1d1)
    ],
    'fields': Object[_0x53d88e(0x1ee)]({
        'object': { 'validate': (-0x11ea + 0x4 * 0x825 + -0xeaa, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) },
        'property': {
            'validate': function () {
                const _0x191c3f = _0x53d88e, _0x2102bb = {
                        'vfJSX': function (_0x3fe960, _0x4af710, _0x2dd16f, _0x5860a2) {
                            return _0x3fe960(_0x4af710, _0x2dd16f, _0x5860a2);
                        },
                        'bydEp': _0x191c3f(0x1d2),
                        'EGpgg': _0x191c3f(0x250)
                    }, _0x46dd12 = (-0x24b3 + -0x2660 + -0x4b13 * -0x1, _utils[_0x191c3f(0x1d0)])(_0x2102bb['bydEp'], _0x2102bb[_0x191c3f(0x251)]), _0x5bc76a = (-0x1 * -0x937 + -0x1660 + 0x3 * 0x463, _utils[_0x191c3f(0x1d0)])(_0x191c3f(0x1c4)), _0x479df5 = function (_0x30be91, _0x16b9aa, _0xb1dd70) {
                        const _0x4e3254 = _0x191c3f, _0x5865e2 = _0x30be91[_0x4e3254(0x24e)] ? _0x5bc76a : _0x46dd12;
                        _0x2102bb[_0x4e3254(0x252)](_0x5865e2, _0x30be91, _0x16b9aa, _0xb1dd70);
                    };
                return _0x479df5['oneOfNodeTypes'] = [
                    _0x191c3f(0x1c4),
                    _0x2102bb[_0x191c3f(0x253)],
                    _0x2102bb[_0x191c3f(0x251)]
                ], _0x479df5;
            }()
        },
        'computed': { 'default': ![] }
    }, !process[_0x53d88e(0x1c8)]['BABEL_TYPES_8_BREAKING'] ? {
        'optional': {
            'validate': (-0x3 * -0x5f3 + -0x94e + -0x2d9 * 0x3, _utils[_0x53d88e(0x1cb)])(!![], ![]),
            'optional': !![]
        }
    } : {})
}), (-0x215a + -0x72 * 0x27 + 0x32b8, _utils['default'])('NewExpression', { 'inherits': _0x53d88e(0x1e9) }), (0x224c + 0x42d + -0x2679, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x204), {
    'visitor': [
        'directives',
        _0x53d88e(0x1f4)
    ],
    'builder': [
        _0x53d88e(0x1f4),
        _0x53d88e(0x1e2),
        _0x53d88e(0x254),
        _0x53d88e(0x255)
    ],
    'fields': {
        'sourceFile': { 'validate': (0x586 * 0x1 + 0xd83 + -0x1309, _utils[_0x53d88e(0x1bd)])('string') },
        'sourceType': {
            'validate': (0x207d + 0x1 * 0x707 + -0x2784, _utils[_0x53d88e(0x1cb)])(_0x53d88e(0x256), 'module'),
            'default': _0x53d88e(0x256)
        },
        'interpreter': {
            'validate': (0x137d + -0x8b + -0x12f2, _utils[_0x53d88e(0x1d0)])('InterpreterDirective'),
            'default': null,
            'optional': !![]
        },
        'directives': {
            'validate': (-0x14fb + 0x1417 + -0x4c * -0x3, _utils[_0x53d88e(0x1bc)])((0xf7c * 0x1 + 0x23ae + -0x332a, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (0x21f2 + -0x1def * -0x1 + 0xed * -0x45, _utils[_0x53d88e(0x1bf)])((-0x1a83 * -0x1 + -0x43 * 0x7b + -0x1 * -0x5ae, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1e0)))),
            'default': []
        },
        'body': { 'validate': (-0x265a + 0x26a6 + 0x2 * -0x26, _utils['chain'])((0x635 * 0x1 + -0x18d * 0x3 + -0x18e, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0x1858 + 0x8 * -0x13a + 0x88a * 0x4, _utils[_0x53d88e(0x1bf)])((-0x1b4b + -0xa8 * 0x15 + -0xf * -0x2bd, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1e3)))) }
    },
    'aliases': [
        _0x53d88e(0x1f6),
        'BlockParent',
        _0x53d88e(0x1e5)
    ]
}), (0x120f + -0x24c7 + 0x257 * 0x8, _utils[_0x53d88e(0x1ba)])('ObjectExpression', {
    'visitor': [_0x53d88e(0x257)],
    'aliases': [_0x53d88e(0x1c4)],
    'fields': { 'properties': { 'validate': (-0x2443 * 0x1 + 0x5c8 + -0x1e7b * -0x1, _utils[_0x53d88e(0x1bc)])((-0x241f + 0x27f + 0x10d0 * 0x2, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0x68 * -0x2c + 0x21d2 + -0x1fd * 0x1a, _utils[_0x53d88e(0x1bf)])((0xd3c + 0x240f + -0x314b, _utils[_0x53d88e(0x1d0)])('ObjectMethod', _0x53d88e(0x258), _0x53d88e(0x1c2)))) } }
}), (-0x1f4f + 0x1f22 * -0x1 + 0x3e71, _utils['default'])(_0x53d88e(0x259), {
    'builder': [
        _0x53d88e(0x25a),
        _0x53d88e(0x25b),
        _0x53d88e(0x216),
        _0x53d88e(0x1f4),
        _0x53d88e(0x24e),
        _0x53d88e(0x217),
        _0x53d88e(0x218)
    ],
    'fields': Object[_0x53d88e(0x1ee)]({}, functionCommon, functionTypeAnnotationCommon, {
        'kind': Object[_0x53d88e(0x1ee)]({ 'validate': (0x242b + -0x11ea + -0x1241 * 0x1, _utils['assertOneOf'])(_0x53d88e(0x25c), 'get', _0x53d88e(0x25d)) }, !process['env'][_0x53d88e(0x1c9)] ? { 'default': _0x53d88e(0x25c) } : {}),
        'computed': { 'default': ![] },
        'key': {
            'validate': function () {
                const _0x4f2dee = _0x53d88e, _0x55320e = {
                        'tQIwm': function (_0x11c725, _0x4c0abc, _0x542ecb, _0x4af0ad) {
                            return _0x11c725(_0x4c0abc, _0x542ecb, _0x4af0ad);
                        },
                        'mPtdr': _0x4f2dee(0x25e),
                        'Uyslo': _0x4f2dee(0x242),
                        'OCUZc': 'Expression'
                    }, _0x50bfb0 = (-0x3 * 0x49c + 0xa91 + 0x343, _utils[_0x4f2dee(0x1d0)])(_0x4f2dee(0x1d2), _0x55320e[_0x4f2dee(0x25f)], _0x55320e[_0x4f2dee(0x260)]), _0x87be34 = (-0x1 * -0x2f9 + -0x8 * -0x2db + -0x19d1, _utils[_0x4f2dee(0x1d0)])(_0x55320e['OCUZc']), _0x4aa088 = function (_0x256f33, _0x28d79d, _0x301259) {
                        const _0xf14a32 = _0x4f2dee, _0x13b502 = _0x256f33[_0xf14a32(0x24e)] ? _0x87be34 : _0x50bfb0;
                        _0x55320e[_0xf14a32(0x261)](_0x13b502, _0x256f33, _0x28d79d, _0x301259);
                    };
                return _0x4aa088[_0x4f2dee(0x262)] = [
                    _0x4f2dee(0x1c4),
                    _0x4f2dee(0x1d2),
                    _0x4f2dee(0x25e),
                    _0x55320e[_0x4f2dee(0x260)]
                ], _0x4aa088;
            }()
        },
        'decorators': {
            'validate': (-0x4a2 * -0x6 + 0xfd * -0x14 + -0x1 * 0x808, _utils[_0x53d88e(0x1bc)])((0x3ef * 0x3 + 0x10e4 + -0x5bd * 0x5, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (0x66d + 0x97 * -0x17 + -0x392 * -0x2, _utils[_0x53d88e(0x1bf)])((-0x114f + -0x7f1 + 0x1940, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x263)))),
            'optional': !![]
        },
        'body': { 'validate': (-0x39 * 0x9b + 0x21a6 * -0x1 + 0x4429, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f5)) }
    }),
    'visitor': [
        'key',
        _0x53d88e(0x216),
        'body',
        _0x53d88e(0x222),
        _0x53d88e(0x219),
        'typeParameters'
    ],
    'aliases': [
        _0x53d88e(0x264),
        'Function',
        _0x53d88e(0x1f6),
        _0x53d88e(0x1e4),
        'FunctionParent',
        'Method',
        _0x53d88e(0x265)
    ]
}), (0x2 * -0xad8 + 0x1511 + 0x9f, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x258), {
    'builder': [
        'key',
        _0x53d88e(0x1df),
        _0x53d88e(0x24e),
        _0x53d88e(0x266),
        ...!process[_0x53d88e(0x1c8)][_0x53d88e(0x1c9)] ? [_0x53d88e(0x222)] : []
    ],
    'fields': {
        'computed': { 'default': ![] },
        'key': {
            'validate': function () {
                const _0xf23634 = _0x53d88e, _0x1c5241 = {
                        'mrvfb': function (_0x34547f, _0x1e6077, _0x2844d8, _0xf93b43) {
                            return _0x34547f(_0x1e6077, _0x2844d8, _0xf93b43);
                        },
                        'HWZkF': _0xf23634(0x1d2),
                        'shovV': 'StringLiteral',
                        'GjAEc': 'NumericLiteral',
                        'IWZMf': _0xf23634(0x1c4)
                    }, _0x4516f9 = (0xc8c + 0xbc2 + -0x184e, _utils[_0xf23634(0x1d0)])(_0x1c5241[_0xf23634(0x267)], _0x1c5241['shovV'], _0x1c5241['GjAEc']), _0x84e82f = (-0xa61 + -0x1 * 0x2cd + -0xf1 * -0xe, _utils[_0xf23634(0x1d0)])(_0x1c5241[_0xf23634(0x268)]), _0x4a069b = function (_0x4b2e37, _0x57e853, _0x210e88) {
                        const _0x449aca = _0xf23634, _0x26ff5d = _0x4b2e37['computed'] ? _0x84e82f : _0x4516f9;
                        _0x1c5241[_0x449aca(0x269)](_0x26ff5d, _0x4b2e37, _0x57e853, _0x210e88);
                    };
                return _0x4a069b[_0xf23634(0x262)] = [
                    _0xf23634(0x1c4),
                    _0x1c5241[_0xf23634(0x267)],
                    _0x1c5241[_0xf23634(0x26a)],
                    'NumericLiteral'
                ], _0x4a069b;
            }()
        },
        'value': { 'validate': (-0xda * -0xa + 0x26a9 + 0x2f2d * -0x1, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4), _0x53d88e(0x223)) },
        'shorthand': {
            'validate': (-0x2265 + 0xaf1 + 0x1774, _utils[_0x53d88e(0x1bc)])((0x1883 * -0x1 + 0xa5d * -0x1 + 0x20 * 0x117, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x214)), Object[_0x53d88e(0x1ee)](function (_0x44e1ae, _0x4b7d6c, _0x326c11) {
                const _0x1cf9c6 = _0x53d88e, _0x93d76 = { 'BYqcS': _0x1cf9c6(0x26b) };
                if (!process[_0x1cf9c6(0x1c8)][_0x1cf9c6(0x1c9)])
                    return;
                if (_0x326c11 && _0x44e1ae[_0x1cf9c6(0x24e)])
                    throw new TypeError(_0x93d76['BYqcS']);
            }, { 'type': _0x53d88e(0x214) }), function (_0x47d5fa, _0x38b108, _0x520959) {
                const _0x14130c = _0x53d88e, _0x292199 = { 'XZvfl': _0x14130c(0x26c) };
                if (!process[_0x14130c(0x1c8)]['BABEL_TYPES_8_BREAKING'])
                    return;
                if (_0x520959 && !(0x5fe * 0x1 + 0x1684 + -0x59 * 0x52, _is[_0x14130c(0x1ba)])('Identifier', _0x47d5fa[_0x14130c(0x25b)]))
                    throw new TypeError(_0x292199[_0x14130c(0x26d)]);
            }),
            'default': ![]
        },
        'decorators': {
            'validate': (-0x125 * -0x1f + 0x6b * -0x3c + -0xa67 * 0x1, _utils[_0x53d88e(0x1bc)])((0x1f86 + -0x8 * 0x1e7 + -0x104e, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (0x1ce5 + -0x9 * -0x7b + 0x1 * -0x2138, _utils[_0x53d88e(0x1bf)])((-0x3e1 * 0x2 + -0x1 * 0x2479 + -0x43 * -0xa9, _utils['assertNodeType'])(_0x53d88e(0x263)))),
            'optional': !![]
        }
    },
    'visitor': [
        _0x53d88e(0x25b),
        _0x53d88e(0x1df),
        _0x53d88e(0x222)
    ],
    'aliases': [
        'UserWhitespacable',
        _0x53d88e(0x26e),
        _0x53d88e(0x265)
    ],
    'validate': function () {
        const _0x318081 = _0x53d88e, _0x977e9f = {
                'ipFVn': _0x318081(0x1d4),
                'SYgWa': function (_0x52f78d, _0x18506c, _0x1b8526, _0x264333) {
                    return _0x52f78d(_0x18506c, _0x1b8526, _0x264333);
                },
                'TwZVw': _0x318081(0x1d2),
                'DlKmp': _0x318081(0x1c4)
            }, _0x2d2bde = (-0xa * 0x137 + -0x20 * -0x1b + 0x8c6, _utils[_0x318081(0x1d0)])(_0x977e9f[_0x318081(0x26f)], 'Pattern'), _0x593e0f = (0x60 * -0xd + -0x1 * 0x35e + 0x83e, _utils[_0x318081(0x1d0)])(_0x977e9f[_0x318081(0x270)]);
        return function (_0x1f4ad0, _0xbb6cff, _0x6d21be) {
            const _0xa89d80 = _0x318081;
            if (!process[_0xa89d80(0x1c8)][_0xa89d80(0x1c9)])
                return;
            const _0x166f33 = (-0x385 * 0xb + 0x2206 + 0x4b1, _is['default'])(_0x977e9f[_0xa89d80(0x271)], _0x1f4ad0) ? _0x2d2bde : _0x593e0f;
            _0x977e9f['SYgWa'](_0x166f33, _0x6d21be, _0xa89d80(0x1df), _0x6d21be[_0xa89d80(0x1df)]);
        };
    }()
}), (-0x1077 + 0x1107 * -0x2 + 0x3285, _utils['default'])(_0x53d88e(0x20e), {
    'visitor': [
        _0x53d88e(0x272),
        'typeAnnotation'
    ],
    'builder': ['argument'],
    'aliases': [
        'LVal',
        _0x53d88e(0x223)
    ],
    'deprecatedAlias': _0x53d88e(0x273),
    'fields': Object['assign']({}, patternLikeCommon, { 'argument': { 'validate': !process[_0x53d88e(0x1c8)][_0x53d88e(0x1c9)] ? (-0xb77 * 0x2 + 0x5 * 0x158 + -0x32 * -0x53, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d1)) : (-0x2 * -0x883 + 0x227e * 0x1 + -0x3384, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2), _0x53d88e(0x1c6), _0x53d88e(0x1d3)) } }),
    'validate'(_0x40030a, _0x89b81c) {
        const _0x2d789b = _0x53d88e, _0x3f7f0a = {
                'WdNoo': _0x2d789b(0x274),
                'ZMGsI': function (_0x4a2e96, _0x49a3c7) {
                    return _0x4a2e96 > _0x49a3c7;
                }
            };
        if (!process[_0x2d789b(0x1c8)][_0x2d789b(0x1c9)])
            return;
        const _0x628efa = /(\w+)\[(\d+)\]/[_0x2d789b(0x22c)](_0x89b81c);
        if (!_0x628efa)
            throw new Error(_0x3f7f0a[_0x2d789b(0x275)]);
        const [, _0xda6b04, _0x5931ee] = _0x628efa;
        if (_0x3f7f0a['ZMGsI'](_0x40030a[_0xda6b04]['length'], _0x5931ee + (-0xc6f + 0xc3 * -0xe + -0x2 * -0xb8d)))
            throw new TypeError(_0x2d789b(0x276) + _0xda6b04);
    }
}), (-0xae1 + -0x1 * -0xd69 + -0x288, _utils[_0x53d88e(0x1ba)])('ReturnStatement', {
    'visitor': ['argument'],
    'aliases': [
        _0x53d88e(0x1e3),
        _0x53d88e(0x1e8),
        'CompletionStatement'
    ],
    'fields': {
        'argument': {
            'validate': (0xcd2 + -0x3aa + 0x494 * -0x2, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)),
            'optional': !![]
        }
    }
}), (0x24b3 + -0x797 * 0x2 + -0x1 * 0x1585, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x277), {
    'visitor': [_0x53d88e(0x278)],
    'fields': { 'expressions': { 'validate': (0x3 * 0x8d6 + 0x21fd + -0x3c7f, _utils[_0x53d88e(0x1bc)])((0xacc * 0x3 + -0x895 + 0x109 * -0x17, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (0x11e8 + -0xa4 * 0x7 + -0xd6c, _utils[_0x53d88e(0x1bf)])((-0x10eb * 0x2 + -0x1 * 0x173b + -0x827 * -0x7, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)))) } },
    'aliases': [_0x53d88e(0x1c4)]
}), (0x163d * -0x1 + -0x347 * -0x2 + 0xfaf, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x279), {
    'visitor': [_0x53d88e(0x202)],
    'aliases': [
        _0x53d88e(0x1c4),
        _0x53d88e(0x27a)
    ],
    'fields': { 'expression': { 'validate': (0x24c6 + 0xa91 * 0x3 + -0x4479, _utils['assertNodeType'])(_0x53d88e(0x1c4)) } }
}), (-0x3af * -0x1 + -0x25b2 + 0x1 * 0x2203, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x27b), {
    'visitor': [
        _0x53d88e(0x1f8),
        _0x53d88e(0x1f9)
    ],
    'fields': {
        'test': {
            'validate': (0x24f5 * -0x1 + -0x1683 + 0x3b78, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)),
            'optional': !![]
        },
        'consequent': { 'validate': (-0xe32 + -0x1 * -0xed5 + -0xa3, _utils[_0x53d88e(0x1bc)])((-0x1ebb + -0x1f * -0x141 + -0x4 * 0x209, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0x21cc + 0x25 * 0x57 + 0x1539, _utils[_0x53d88e(0x1bf)])((0x1 * 0x1847 + 0xcb * 0x31 + 0x2 * -0x1f91, _utils['assertNodeType'])(_0x53d88e(0x1e3)))) }
    }
}), (-0xe36 + 0x146f + -0x639, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x27c), {
    'visitor': [
        _0x53d88e(0x27d),
        _0x53d88e(0x27e)
    ],
    'aliases': [
        _0x53d88e(0x1e3),
        _0x53d88e(0x1e4),
        _0x53d88e(0x1f6)
    ],
    'fields': {
        'discriminant': { 'validate': (-0x17e2 + 0x10d1 * -0x2 + 0x3984, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) },
        'cases': { 'validate': (-0x266 * -0x8 + -0x1336 * -0x1 + -0x2666, _utils[_0x53d88e(0x1bc)])((0xa7 * 0x29 + 0x19bf + -0x347e, _utils['assertValueType'])('array'), (-0x652 * 0x2 + 0x69d * 0x5 + -0x146d, _utils['assertEach'])((0x1089 + -0x5 * 0x6b9 + 0x1114, _utils[_0x53d88e(0x1d0)])('SwitchCase'))) }
    }
}), (-0xf * -0x3b + -0x2 * -0xbff + -0x1b73 * 0x1, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x27f), { 'aliases': [_0x53d88e(0x1c4)] }), (-0x1 * -0x80f + 0x8ae + 0x1 * -0x10bd, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x280), {
    'visitor': ['argument'],
    'aliases': [
        _0x53d88e(0x1e3),
        'Terminatorless',
        _0x53d88e(0x281)
    ],
    'fields': { 'argument': { 'validate': (-0xc2b * -0x1 + 0x1cec + -0x2917, _utils['assertNodeType'])('Expression') } }
}), (0x1b * -0x67 + -0x1777 + -0xd * -0x2a4, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x282), {
    'visitor': [
        _0x53d88e(0x283),
        _0x53d88e(0x284),
        'finalizer'
    ],
    'aliases': [_0x53d88e(0x1e3)],
    'fields': {
        'block': {
            'validate': (0x1f97 * 0x1 + -0x1 * -0x1330 + -0x32c7, _utils[_0x53d88e(0x1bc)])((0x588 + 0x1 * 0x1a6f + -0xa7 * 0x31, _utils['assertNodeType'])(_0x53d88e(0x1f5)), Object[_0x53d88e(0x1ee)](function (_0x4e0011) {
                const _0x3ed13e = _0x53d88e, _0x377f55 = { 'PuLmX': _0x3ed13e(0x285) };
                if (!process['env'][_0x3ed13e(0x1c9)])
                    return;
                if (!_0x4e0011[_0x3ed13e(0x284)] && !_0x4e0011[_0x3ed13e(0x286)])
                    throw new TypeError(_0x377f55[_0x3ed13e(0x287)]);
            }, { 'oneOfNodeTypes': [_0x53d88e(0x1f5)] }))
        },
        'handler': {
            'optional': !![],
            'validate': (-0x117c + -0x19d6 * -0x1 + -0x85a, _utils['assertNodeType'])(_0x53d88e(0x288))
        },
        'finalizer': {
            'optional': !![],
            'validate': (0xdac + -0x2209 + 0x145d, _utils[_0x53d88e(0x1d0)])('BlockStatement')
        }
    }
}), (-0x17 * 0x4 + -0x14a + -0x1 * -0x1a6, _utils['default'])(_0x53d88e(0x289), {
    'builder': [
        _0x53d88e(0x1d7),
        _0x53d88e(0x272),
        _0x53d88e(0x28a)
    ],
    'fields': {
        'prefix': { 'default': !![] },
        'argument': { 'validate': (-0x41a * -0x4 + -0x1f07 + 0xe9f, _utils['assertNodeType'])(_0x53d88e(0x1c4)) },
        'operator': { 'validate': (0xc2 * 0x3 + -0x1fe0 + 0x1d9a, _utils['assertOneOf'])(..._constants['UNARY_OPERATORS']) }
    },
    'visitor': [_0x53d88e(0x272)],
    'aliases': [
        _0x53d88e(0x28b),
        _0x53d88e(0x1c4)
    ]
}), (-0x2 * -0x8 + 0x14a5 + 0x24d * -0x9, _utils[_0x53d88e(0x1ba)])('UpdateExpression', {
    'builder': [
        _0x53d88e(0x1d7),
        _0x53d88e(0x272),
        'prefix'
    ],
    'fields': {
        'prefix': { 'default': ![] },
        'argument': { 'validate': !process['env']['BABEL_TYPES_8_BREAKING'] ? (0x1760 * 0x1 + -0x599 + -0x11c7, _utils[_0x53d88e(0x1d0)])('Expression') : (0x101e + 0x1 * -0xf7e + -0xa0, _utils['assertNodeType'])(_0x53d88e(0x1d2), _0x53d88e(0x1d3)) },
        'operator': { 'validate': (-0x1af0 + 0x1f7d + -0x48d, _utils['assertOneOf'])(..._constants['UPDATE_OPERATORS']) }
    },
    'visitor': [_0x53d88e(0x272)],
    'aliases': [_0x53d88e(0x1c4)]
}), (-0x1 * -0x24d9 + 0x269d + -0x4b76, _utils['default'])(_0x53d88e(0x20b), {
    'builder': [
        _0x53d88e(0x25a),
        _0x53d88e(0x28c)
    ],
    'visitor': [_0x53d88e(0x28c)],
    'aliases': [
        _0x53d88e(0x1e3),
        _0x53d88e(0x21b)
    ],
    'fields': {
        'declare': {
            'validate': (0x13a9 + 0xb * -0x257 + 0x614, _utils['assertValueType'])(_0x53d88e(0x214)),
            'optional': !![]
        },
        'kind': { 'validate': (-0xdd + -0x3e6 * 0x3 + 0xc8f * 0x1, _utils['assertOneOf'])('var', 'let', _0x53d88e(0x28d)) },
        'declarations': { 'validate': (-0x2618 + -0xf1b + 0x3533 * 0x1, _utils['chain'])((0x61 * 0x35 + 0x155 + -0x156a, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (0xb65 + 0xa26 + -0x158b, _utils[_0x53d88e(0x1bf)])((0xf2 + 0xaea + -0xbdc, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x28e)))) }
    },
    'validate'(_0x25761c, _0x266242, _0x8f12bb) {
        const _0x48443f = _0x53d88e, _0x4227dd = {
                'Jrdbk': _0x48443f(0x20a),
                'NiAVg': function (_0x394e8a, _0x4049f1) {
                    return _0x394e8a !== _0x4049f1;
                }
            };
        if (!process[_0x48443f(0x1c8)][_0x48443f(0x1c9)])
            return;
        if (!(-0x13 * -0x12f + -0x29 * -0x54 + 0x23f1 * -0x1, _is['default'])(_0x4227dd[_0x48443f(0x28f)], _0x25761c, { 'left': _0x8f12bb }))
            return;
        if (_0x4227dd[_0x48443f(0x290)](_0x8f12bb[_0x48443f(0x28c)][_0x48443f(0x291)], -0x2044 + -0x11c9 + 0x320e))
            throw new TypeError(_0x48443f(0x292) + _0x25761c[_0x48443f(0x293)]);
    }
}), (-0x394 + 0x21d4 + -0x1e40, _utils[_0x53d88e(0x1ba)])('VariableDeclarator', {
    'visitor': [
        'id',
        _0x53d88e(0x20d)
    ],
    'fields': {
        'id': {
            'validate': function () {
                const _0x16e800 = _0x53d88e, _0x396323 = {
                        'Pcvdc': function (_0x39c8b2, _0x257d9d, _0x22ac2e, _0x5c7f83) {
                            return _0x39c8b2(_0x257d9d, _0x22ac2e, _0x5c7f83);
                        },
                        'qAtUB': 'LVal',
                        'qwSYO': _0x16e800(0x1d2),
                        'geaJO': _0x16e800(0x294),
                        'hxFCK': _0x16e800(0x1d4)
                    };
                if (!process[_0x16e800(0x1c8)][_0x16e800(0x1c9)])
                    return (0x1 * -0x1f7b + -0x97c + 0x28f7, _utils[_0x16e800(0x1d0)])(_0x396323[_0x16e800(0x295)]);
                const _0x10492f = (-0xa50 + 0x73c * -0x2 + 0x18c8, _utils[_0x16e800(0x1d0)])(_0x396323[_0x16e800(0x296)], _0x396323['geaJO'], _0x396323[_0x16e800(0x297)]), _0x39b50f = (0x338 + 0x1a21 + 0x1 * -0x1d59, _utils[_0x16e800(0x1d0)])(_0x16e800(0x1d2));
                return function (_0x3e757b, _0x8eae8b, _0x4ae4aa) {
                    const _0x4e31cb = _0x16e800, _0xe53b6a = _0x3e757b[_0x4e31cb(0x20d)] ? _0x10492f : _0x39b50f;
                    _0x396323[_0x4e31cb(0x298)](_0xe53b6a, _0x3e757b, _0x8eae8b, _0x4ae4aa);
                };
            }()
        },
        'definite': {
            'optional': !![],
            'validate': (-0xaa3 + 0x11 * 0x56 + 0x4ed, _utils['assertValueType'])(_0x53d88e(0x214))
        },
        'init': {
            'optional': !![],
            'validate': (-0x1 * 0x6d3 + 0x1 * 0x1cdd + -0x160a, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4))
        }
    }
}), (0xe12 + 0x1a02 + -0x14 * 0x201, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x299), {
    'visitor': [
        'test',
        _0x53d88e(0x1f4)
    ],
    'aliases': [
        _0x53d88e(0x1e3),
        _0x53d88e(0x1e4),
        _0x53d88e(0x1fe),
        _0x53d88e(0x1ff),
        'Scopable'
    ],
    'fields': {
        'test': { 'validate': (-0x1872 + -0x1313 * 0x1 + 0x359 * 0xd, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) },
        'body': { 'validate': (-0x4 * 0x365 + 0x1d88 + -0xff4, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1e3)) }
    }
}), (0x23a8 + -0x4 * -0x29b + -0x2e14, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x29a), {
    'visitor': [
        _0x53d88e(0x24d),
        _0x53d88e(0x1f4)
    ],
    'aliases': [_0x53d88e(0x1e3)],
    'fields': {
        'object': { 'validate': (-0x43 * -0x57 + -0x21 * 0x67 + -0x6 * 0x195, _utils[_0x53d88e(0x1d0)])('Expression') },
        'body': { 'validate': (0x2414 + 0x24b * -0xb + -0xadb, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1e3)) }
    }
}), (0x1c05 + -0x28f * -0x2 + 0x1f3 * -0x11, _utils[_0x53d88e(0x1ba)])('AssignmentPattern', {
    'visitor': [
        _0x53d88e(0x1ce),
        _0x53d88e(0x1d5),
        _0x53d88e(0x222)
    ],
    'builder': [
        _0x53d88e(0x1ce),
        _0x53d88e(0x1d5)
    ],
    'aliases': [
        'Pattern',
        _0x53d88e(0x223),
        _0x53d88e(0x1d1)
    ],
    'fields': Object[_0x53d88e(0x1ee)]({}, patternLikeCommon, {
        'left': { 'validate': (-0x17c4 * 0x1 + -0x1 * 0x2400 + 0x3bc4, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2), 'ObjectPattern', _0x53d88e(0x294), _0x53d88e(0x1d3)) },
        'right': { 'validate': (0x1bd1 + -0x1509 + -0x6c8, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) },
        'decorators': {
            'validate': (0x2616 * -0x1 + -0x1 * 0x1448 + 0x3a5e, _utils[_0x53d88e(0x1bc)])((-0x2318 + -0x468 + 0x9e0 * 0x4, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (0x3 * 0x674 + 0x164f * 0x1 + -0x1 * 0x29ab, _utils[_0x53d88e(0x1bf)])((-0x209 * 0xb + -0x10fd + 0x70 * 0x5a, _utils['assertNodeType'])(_0x53d88e(0x263)))),
            'optional': !![]
        }
    })
}), (-0x1669 + 0xe8 * 0x4 + 0x12c9, _utils['default'])(_0x53d88e(0x294), {
    'visitor': [
        _0x53d88e(0x1c3),
        'typeAnnotation'
    ],
    'builder': [_0x53d88e(0x1c3)],
    'aliases': [
        'Pattern',
        _0x53d88e(0x223),
        'LVal'
    ],
    'fields': Object['assign']({}, patternLikeCommon, {
        'elements': { 'validate': (0x147b + 0x1 * -0x1350 + -0x12b, _utils[_0x53d88e(0x1bc)])((0x156a + 0x1 * -0x1c45 + 0x6db, _utils['assertValueType'])(_0x53d88e(0x1be)), (-0x1b6d + 0x181b + 0x1a9 * 0x2, _utils['assertEach'])((0x1772 * 0x1 + -0x1 * -0x2437 + 0x9 * -0x6a1, _utils[_0x53d88e(0x1c0)])(_0x53d88e(0x1c1), _0x53d88e(0x223)))) },
        'decorators': {
            'validate': (0x863 * -0x3 + -0x9f5 * -0x1 + 0xf34, _utils[_0x53d88e(0x1bc)])((-0x1 * 0x10f7 + -0x22 * 0x1 + 0x3 * 0x5b3, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0x3 * -0x3b5 + 0x56 * 0x65 + -0x2d0d, _utils[_0x53d88e(0x1bf)])((0x1 * -0xd2b + 0xfb * 0x15 + -0x76c, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x263)))),
            'optional': !![]
        }
    })
}), (-0x1 * -0xb3 + -0x465 + 0x3b2, _utils['default'])(_0x53d88e(0x29b), {
    'builder': [
        _0x53d88e(0x216),
        _0x53d88e(0x1f4),
        _0x53d88e(0x218)
    ],
    'visitor': [
        'params',
        _0x53d88e(0x1f4),
        _0x53d88e(0x219),
        'typeParameters'
    ],
    'aliases': [
        _0x53d88e(0x1f6),
        _0x53d88e(0x220),
        _0x53d88e(0x1e4),
        _0x53d88e(0x21a),
        'Expression',
        _0x53d88e(0x23f)
    ],
    'fields': Object[_0x53d88e(0x1ee)]({}, functionCommon, functionTypeAnnotationCommon, {
        'expression': { 'validate': (0x2455 + -0x1e4 + -0x2271, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x214)) },
        'body': { 'validate': (-0x1200 + 0x18f3 + 0x6f3 * -0x1, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f5), 'Expression') }
    })
}), (0x1b * 0x8 + -0x2b3 * -0x5 + -0xe57, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x29c), {
    'visitor': [_0x53d88e(0x1f4)],
    'fields': { 'body': { 'validate': (0x1d30 + 0x1 * 0x1bb + -0x1eeb * 0x1, _utils[_0x53d88e(0x1bc)])((-0x1 * -0xfbd + -0x8d + -0x4 * 0x3cc, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0xe5 * -0x2a + 0x770 + -0x2d02, _utils[_0x53d88e(0x1bf)])((-0x7 * -0x33b + 0x30b * -0x6 + -0x5 * 0xdf, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x29d), _0x53d88e(0x29e), _0x53d88e(0x29f), _0x53d88e(0x2a0), _0x53d88e(0x2a1), _0x53d88e(0x2a2)))) } }
}), (-0x1e1c + -0x1d * 0x109 + -0x3 * -0x140b, _utils[_0x53d88e(0x1ba)])('ClassExpression', {
    'builder': [
        'id',
        _0x53d88e(0x2a3),
        _0x53d88e(0x1f4),
        _0x53d88e(0x222)
    ],
    'visitor': [
        'id',
        _0x53d88e(0x1f4),
        'superClass',
        _0x53d88e(0x2a4),
        _0x53d88e(0x1eb),
        'superTypeParameters',
        _0x53d88e(0x2a5),
        _0x53d88e(0x222)
    ],
    'aliases': [
        _0x53d88e(0x1f6),
        _0x53d88e(0x2a6),
        _0x53d88e(0x1c4)
    ],
    'fields': {
        'id': {
            'validate': (0x2 * -0xcf9 + 0x2c7 + 0x7b9 * 0x3, _utils[_0x53d88e(0x1d0)])('Identifier'),
            'optional': !![]
        },
        'typeParameters': {
            'validate': (0x26a * -0x4 + -0xe63 + 0x180b, _utils[_0x53d88e(0x1d0)])('TypeParameterDeclaration', 'TSTypeParameterDeclaration', _0x53d88e(0x213)),
            'optional': !![]
        },
        'body': { 'validate': (0xb3e + 0x56 * -0x7 + 0x1 * -0x8e4, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x29c)) },
        'superClass': {
            'optional': !![],
            'validate': (-0xade + 0x626 + -0x25c * -0x2, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4))
        },
        'superTypeParameters': {
            'validate': (-0x1 * 0xc9d + 0xdcc + 0x12f * -0x1, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f1), _0x53d88e(0x1f2)),
            'optional': !![]
        },
        'implements': {
            'validate': (-0xa00 + 0x175c + -0x9 * 0x17c, _utils[_0x53d88e(0x1bc)])((0x1 * 0x2078 + 0x1 * -0x7e1 + 0x5 * -0x4eb, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (0x1 * 0x150f + -0xe * -0x2af + -0x3aa1 * 0x1, _utils[_0x53d88e(0x1bf)])((0x2d + 0x5c7 + -0x17d * 0x4, _utils[_0x53d88e(0x1d0)])('TSExpressionWithTypeArguments', 'ClassImplements'))),
            'optional': !![]
        },
        'decorators': {
            'validate': (0x1e21 + 0xb05 + -0x2926, _utils[_0x53d88e(0x1bc)])((-0x1d81 + -0xfe * -0x21 + -0x33d, _utils['assertValueType'])(_0x53d88e(0x1be)), (-0x1bbb + 0x139a + -0x821 * -0x1, _utils['assertEach'])((-0x6 * -0x281 + 0x1015 + 0x1 * -0x1f1b, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x263)))),
            'optional': !![]
        },
        'mixins': {
            'validate': (0x7f0 + 0xe3 * -0x5 + 0x3 * -0x12b, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x2a7)),
            'optional': !![]
        }
    }
}), (0xaed * -0x2 + -0x6e8 + -0x332 * -0x9, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x2a8), {
    'inherits': _0x53d88e(0x2a9),
    'aliases': [
        'Scopable',
        'Class',
        _0x53d88e(0x1e3),
        _0x53d88e(0x21b)
    ],
    'fields': {
        'id': { 'validate': (0x18a4 + -0x656 + -0x42 * 0x47, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2)) },
        'typeParameters': {
            'validate': (0x2 * 0x1bb + -0x1982 + 0x160c, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x211), 'TSTypeParameterDeclaration', _0x53d88e(0x213)),
            'optional': !![]
        },
        'body': { 'validate': (-0x1996 + -0x677 * -0x1 + -0x131f * -0x1, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x29c)) },
        'superClass': {
            'optional': !![],
            'validate': (0x186d + 0x2b * 0x91 + -0x30c8, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4))
        },
        'superTypeParameters': {
            'validate': (0x1f43 + -0x1ef + -0x1d54, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f1), _0x53d88e(0x1f2)),
            'optional': !![]
        },
        'implements': {
            'validate': (-0x865 + -0x26 + 0x51 * 0x1b, _utils[_0x53d88e(0x1bc)])((-0x2548 * 0x1 + 0x1f45 + 0x603, _utils['assertValueType'])('array'), (0x12e * -0x1f + -0x1 * 0xa4d + 0x2edf, _utils[_0x53d88e(0x1bf)])((-0x5 * -0xbf + 0xaa1 + -0xe5c, _utils['assertNodeType'])(_0x53d88e(0x2aa), _0x53d88e(0x2ab)))),
            'optional': !![]
        },
        'decorators': {
            'validate': (0x1264 + 0x1d9b + -0x1 * 0x2fff, _utils[_0x53d88e(0x1bc)])((0x1438 + -0x617 * 0x6 + 0x1052, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0x21f2 + -0x1620 + -0x2 * -0x1c09, _utils[_0x53d88e(0x1bf)])((-0x711 + -0x15d3 * -0x1 + -0xec2, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x263)))),
            'optional': !![]
        },
        'mixins': {
            'validate': (0x1 * 0x2e9 + -0x1d * 0x145 + 0xd9 * 0x28, _utils['assertNodeType'])(_0x53d88e(0x2a7)),
            'optional': !![]
        },
        'declare': {
            'validate': (-0x3b * 0x11 + -0x2356 * 0x1 + 0x2741, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x214)),
            'optional': !![]
        },
        'abstract': {
            'validate': (-0x17 * -0xcd + -0x1 * -0x890 + 0x1afb * -0x1, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x214)),
            'optional': !![]
        }
    },
    'validate': function () {
        const _0x5650aa = _0x53d88e, _0x25a76f = {
                'jUTwJ': _0x5650aa(0x21c),
                'trtby': function (_0x5da287, _0x4f79fb, _0x34b166, _0x365a8d) {
                    return _0x5da287(_0x4f79fb, _0x34b166, _0x365a8d);
                },
                'wdAvD': _0x5650aa(0x1d2)
            }, _0x26c614 = (-0x763 + -0x23c2 + 0x2b25, _utils['assertNodeType'])(_0x25a76f[_0x5650aa(0x2ac)]);
        return function (_0x4bc8fc, _0x5a7e99, _0x20cf88) {
            const _0x371970 = _0x5650aa;
            if (!process['env'][_0x371970(0x1c9)])
                return;
            !(-0x116 + 0x1 * -0x649 + 0x75f, _is[_0x371970(0x1ba)])(_0x25a76f['jUTwJ'], _0x4bc8fc) && _0x25a76f[_0x371970(0x2ad)](_0x26c614, _0x20cf88, 'id', _0x20cf88['id']);
        };
    }()
}), (0x5ac + 0x28a + -0x836, _utils['default'])('ExportAllDeclaration', {
    'visitor': [_0x53d88e(0x2ae)],
    'aliases': [
        _0x53d88e(0x1e3),
        _0x53d88e(0x21b),
        _0x53d88e(0x2af),
        _0x53d88e(0x2b0)
    ],
    'fields': {
        'source': { 'validate': (-0x206e * 0x1 + -0x1 * 0xe87 + -0x1 * -0x2ef5, _utils['assertNodeType'])(_0x53d88e(0x25e)) },
        'exportKind': (-0x259 * -0xa + 0xa78 + -0x21f2, _utils[_0x53d88e(0x2b1)])((-0x1e63 + -0x1575 + 0x13c * 0x2a, _utils[_0x53d88e(0x1cb)])(_0x53d88e(0x293), _0x53d88e(0x1df))),
        'assertions': {
            'optional': !![],
            'validate': (-0x2673 + -0xfc5 + 0x3638, _utils[_0x53d88e(0x1bc)])((-0x40b + -0x1b71 + 0x34 * 0x9b, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0x3d * 0x3b + 0x12f5 * 0x2 + -0x17db, _utils[_0x53d88e(0x1bf)])((0xdb5 + 0x739 + -0x14ee, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x2b2))))
        }
    }
}), (-0xa73 + -0xd71 + 0x17e4, _utils['default'])(_0x53d88e(0x21c), {
    'visitor': [_0x53d88e(0x2b3)],
    'aliases': [
        'Statement',
        _0x53d88e(0x21b),
        'ModuleDeclaration',
        'ExportDeclaration'
    ],
    'fields': { 'declaration': { 'validate': (-0x1ce0 + -0x5 * 0x3ce + 0x2fe6, _utils[_0x53d88e(0x1d0)])('FunctionDeclaration', _0x53d88e(0x2b4), 'ClassDeclaration', _0x53d88e(0x1c4)) } }
}), (0x5 * 0x602 + -0xfef * -0x2 + -0x38 * 0x11b, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x2b5), {
    'visitor': [
        'declaration',
        'specifiers',
        _0x53d88e(0x2ae)
    ],
    'aliases': [
        _0x53d88e(0x1e3),
        _0x53d88e(0x21b),
        _0x53d88e(0x2af),
        _0x53d88e(0x2b0)
    ],
    'fields': {
        'declaration': {
            'optional': !![],
            'validate': (-0xf42 + -0x2026 * -0x1 + -0x10e4, _utils['chain'])((-0x1283 + -0xbd7 + 0x1e5a, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x21b)), Object['assign'](function (_0x61815d, _0x3bda39, _0x4bd93f) {
                const _0x54a80f = _0x53d88e, _0x2bcbc3 = { 'fjLmu': _0x54a80f(0x2b6) };
                if (!process[_0x54a80f(0x1c8)][_0x54a80f(0x1c9)])
                    return;
                if (_0x4bd93f && _0x61815d[_0x54a80f(0x2b7)]['length'])
                    throw new TypeError(_0x2bcbc3['fjLmu']);
            }, { 'oneOfNodeTypes': [_0x53d88e(0x21b)] }), function (_0x4d83fd, _0x2d3797, _0x36d54c) {
                const _0x211783 = _0x53d88e, _0x44772e = { 'cusps': 'Cannot\x20export\x20a\x20declaration\x20from\x20a\x20source' };
                if (!process[_0x211783(0x1c8)][_0x211783(0x1c9)])
                    return;
                if (_0x36d54c && _0x4d83fd['source'])
                    throw new TypeError(_0x44772e['cusps']);
            })
        },
        'assertions': {
            'optional': !![],
            'validate': (0x29d * 0x7 + -0x26bb + 0x368 * 0x6, _utils['chain'])((0x1868 + -0x17f7 + -0x71 * 0x1, _utils['assertValueType'])(_0x53d88e(0x1be)), (-0x14 * -0x1a + 0x1082 + -0x71 * 0x2a, _utils[_0x53d88e(0x1bf)])((-0x1 * 0x173d + -0xe24 + -0x557 * -0x7, _utils[_0x53d88e(0x1d0)])('ImportAttribute')))
        },
        'specifiers': {
            'default': [],
            'validate': (-0x9bf * 0x2 + -0xea * 0xd + 0x1f60, _utils['chain'])((-0x1ffb + -0x1 * 0x1ddb + 0x3dd6, _utils['assertValueType'])('array'), (0x231 * -0x2 + 0x5c2 + -0x160, _utils[_0x53d88e(0x1bf)])(function () {
                const _0x3634e4 = _0x53d88e, _0x497ace = {
                        'EyCtV': function (_0x57b10b, _0x3c0539, _0x5c19f8, _0x27b3bd) {
                            return _0x57b10b(_0x3c0539, _0x5c19f8, _0x27b3bd);
                        },
                        'ObjYi': _0x3634e4(0x2b8),
                        'kRwDt': _0x3634e4(0x229)
                    }, _0x1f4df6 = (-0x954 + 0x7c7 * 0x2 + 0x1 * -0x63a, _utils['assertNodeType'])(_0x3634e4(0x229), _0x497ace[_0x3634e4(0x2b9)], _0x3634e4(0x2ba)), _0x28c15f = (0x1 * -0x22db + 0xd59 + 0x1582, _utils['assertNodeType'])(_0x497ace[_0x3634e4(0x2bb)]);
                if (!process['env']['BABEL_TYPES_8_BREAKING'])
                    return _0x1f4df6;
                return function (_0x15dfe1, _0x35873c, _0x537ffd) {
                    const _0x21dd74 = _0x3634e4, _0x2e6361 = _0x15dfe1[_0x21dd74(0x2ae)] ? _0x1f4df6 : _0x28c15f;
                    _0x497ace['EyCtV'](_0x2e6361, _0x15dfe1, _0x35873c, _0x537ffd);
                };
            }()))
        },
        'source': {
            'validate': (-0xdcf + -0x1 * 0x2317 + 0x30e6, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x25e)),
            'optional': !![]
        },
        'exportKind': (0x59 * 0x9 + -0x71 * 0x11 + -0x1 * -0x460, _utils[_0x53d88e(0x2b1)])((0x3d * 0x72 + -0x21ba + 0x2 * 0x348, _utils[_0x53d88e(0x1cb)])(_0x53d88e(0x293), _0x53d88e(0x1df)))
    }
}), (-0x224 + 0x939 * 0x1 + -0x715, _utils['default'])(_0x53d88e(0x229), {
    'visitor': [
        _0x53d88e(0x2bc),
        'exported'
    ],
    'aliases': [_0x53d88e(0x2bd)],
    'fields': {
        'local': { 'validate': (0x9e1 + -0x15 * 0x19d + 0x1800, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2)) },
        'exported': { 'validate': (0x14b * 0x4 + -0xa81 * -0x2 + 0x1a2e * -0x1, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2), _0x53d88e(0x25e)) }
    }
}), (0x74e * -0x2 + -0x269e + 0x9 * 0x5ea, _utils[_0x53d88e(0x1ba)])('ForOfStatement', {
    'visitor': [
        _0x53d88e(0x1ce),
        'right',
        _0x53d88e(0x1f4)
    ],
    'builder': [
        'left',
        'right',
        _0x53d88e(0x1f4),
        _0x53d88e(0x2be)
    ],
    'aliases': [
        _0x53d88e(0x1f6),
        'Statement',
        _0x53d88e(0x209),
        'BlockParent',
        _0x53d88e(0x1fe),
        _0x53d88e(0x20a)
    ],
    'fields': {
        'left': {
            'validate': function () {
                const _0xc90821 = _0x53d88e, _0x13ff35 = {
                        'mEuAt': _0xc90821(0x20b),
                        'oMaHl': function (_0x11c224, _0x4c016f, _0x37d3fb, _0x83754) {
                            return _0x11c224(_0x4c016f, _0x37d3fb, _0x83754);
                        },
                        'iinOP': _0xc90821(0x1d1),
                        'aWftp': _0xc90821(0x1d2),
                        'McgTe': _0xc90821(0x1d3)
                    };
                if (!process[_0xc90821(0x1c8)][_0xc90821(0x1c9)])
                    return (-0xd0 * 0x29 + 0x2 * 0x278 + 0xe3 * 0x20, _utils[_0xc90821(0x1d0)])(_0x13ff35[_0xc90821(0x2bf)], _0x13ff35[_0xc90821(0x2c0)]);
                const _0x5e5d91 = (-0x35 * -0x1 + 0x6 * 0x47c + 0x277 * -0xb, _utils['assertNodeType'])(_0x13ff35[_0xc90821(0x2bf)]), _0x4e550f = (-0x1d * 0x55 + 0x21d * -0x1 + -0x5df * -0x2, _utils['assertNodeType'])(_0x13ff35[_0xc90821(0x2c1)], _0x13ff35[_0xc90821(0x2c2)], _0xc90821(0x294), _0xc90821(0x1d4));
                return function (_0x1a044a, _0x37b012, _0x771fbb) {
                    const _0x25105a = _0xc90821;
                    (0xdf9 * -0x1 + 0xc * -0x23f + 0x28ed, _is[_0x25105a(0x1ba)])(_0x13ff35[_0x25105a(0x2bf)], _0x771fbb) ? _0x5e5d91(_0x1a044a, _0x37b012, _0x771fbb) : _0x13ff35[_0x25105a(0x2c3)](_0x4e550f, _0x1a044a, _0x37b012, _0x771fbb);
                };
            }()
        },
        'right': { 'validate': (-0x25b1 * 0x1 + 0x2267 + 0x1a5 * 0x2, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) },
        'body': { 'validate': (-0x1aaf + 0x137b + 0x734, _utils[_0x53d88e(0x1d0)])('Statement') },
        'await': { 'default': ![] }
    }
}), (-0x158c + -0x1d0d + 0x3299, _utils[_0x53d88e(0x1ba)])('ImportDeclaration', {
    'visitor': [
        _0x53d88e(0x2b7),
        _0x53d88e(0x2ae)
    ],
    'aliases': [
        'Statement',
        'Declaration',
        'ModuleDeclaration'
    ],
    'fields': {
        'assertions': {
            'optional': !![],
            'validate': (-0x3d6 + 0x1 * 0x629 + -0x253, _utils[_0x53d88e(0x1bc)])((0x3 * 0x767 + -0x1afa + 0x6f * 0xb, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (0x2124 + -0x1804 + 0x920 * -0x1, _utils[_0x53d88e(0x1bf)])((-0x2242 + -0x2474 + 0x3 * 0x1792, _utils['assertNodeType'])(_0x53d88e(0x2b2))))
        },
        'specifiers': { 'validate': (-0x1bd2 + -0x11ee + 0x2dc0, _utils[_0x53d88e(0x1bc)])((0x551 + -0x5a1 * -0x2 + -0x1093, _utils['assertValueType'])(_0x53d88e(0x1be)), (-0xd06 + 0x17cb + -0xac5, _utils['assertEach'])((-0x1310 + 0xc4f * -0x3 + 0x37fd * 0x1, _utils[_0x53d88e(0x1d0)])('ImportSpecifier', _0x53d88e(0x2c4), 'ImportNamespaceSpecifier'))) },
        'source': { 'validate': (-0x1 * 0x1b79 + -0x1053 + 0x4 * 0xaf3, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x25e)) },
        'importKind': {
            'validate': (0x562 + -0x157a * -0x1 + -0x1adc, _utils[_0x53d88e(0x1cb)])(_0x53d88e(0x293), _0x53d88e(0x2c5), 'value'),
            'optional': !![]
        }
    }
}), (0x5bc + -0x18d2 + 0x1 * 0x1316, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x2c4), {
    'visitor': ['local'],
    'aliases': [_0x53d88e(0x2bd)],
    'fields': { 'local': { 'validate': (-0x475 * -0x7 + -0x1ee + -0x1d45, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2)) } }
}), (-0x1 * 0x62b + 0x7fd * 0x1 + 0x1 * -0x1d2, _utils['default'])(_0x53d88e(0x2c6), {
    'visitor': [_0x53d88e(0x2bc)],
    'aliases': ['ModuleSpecifier'],
    'fields': { 'local': { 'validate': (-0x1fb9 + -0x1671 + 0x362a * 0x1, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2)) } }
}), (-0x11 * -0xb5 + 0x1cba + -0x28bf, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x2c7), {
    'visitor': [
        _0x53d88e(0x2bc),
        _0x53d88e(0x2c8)
    ],
    'aliases': ['ModuleSpecifier'],
    'fields': {
        'local': { 'validate': (-0x24c6 + -0xd5c + 0x3222, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2)) },
        'imported': { 'validate': (-0x1 * 0x1645 + -0x392 + 0x19d7, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2), _0x53d88e(0x25e)) },
        'importKind': {
            'validate': (0x34 * 0x31 + 0x2 * -0xf86 + -0x438 * -0x5, _utils[_0x53d88e(0x1cb)])('type', _0x53d88e(0x2c5)),
            'optional': !![]
        }
    }
}), (0x1468 + -0x2183 + 0xd1b, _utils['default'])(_0x53d88e(0x2c9), {
    'visitor': [
        _0x53d88e(0x22a),
        _0x53d88e(0x226)
    ],
    'aliases': [_0x53d88e(0x1c4)],
    'fields': {
        'meta': {
            'validate': (-0x1dc5 + 0x181e + 0x5a7, _utils[_0x53d88e(0x1bc)])((-0x1 * -0x361 + -0xc5 * 0xd + 0x6a * 0x10, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2)), Object[_0x53d88e(0x1ee)](function (_0x4d890f, _0x31a966, _0x2bba45) {
                const _0x1b4be7 = _0x53d88e, _0x1e1ec8 = {
                        'ixcMM': _0x1b4be7(0x2ca),
                        'oKHue': 'target',
                        'uEhOj': _0x1b4be7(0x2cb),
                        'tUDsL': 'meta',
                        'akxMm': 'Identifier',
                        'fRwZj': 'Unrecognised\x20MetaProperty'
                    };
                if (!process[_0x1b4be7(0x1c8)]['BABEL_TYPES_8_BREAKING'])
                    return;
                let _0x122555;
                switch (_0x2bba45[_0x1b4be7(0x23b)]) {
                case _0x1e1ec8[_0x1b4be7(0x2cc)]:
                    _0x122555 = _0x1b4be7(0x2cd);
                    break;
                case _0x1b4be7(0x2ce):
                    _0x122555 = _0x1e1ec8[_0x1b4be7(0x2cf)];
                    break;
                case _0x1e1ec8['uEhOj']:
                    _0x122555 = _0x1e1ec8['tUDsL'];
                    break;
                }
                if (!(0x11 * -0x2 + -0x1f0b + 0x1f2d, _is[_0x1b4be7(0x1ba)])(_0x1e1ec8[_0x1b4be7(0x2d0)], _0x4d890f['property'], { 'name': _0x122555 }))
                    throw new TypeError(_0x1e1ec8['fRwZj']);
            }, { 'oneOfNodeTypes': ['Identifier'] }))
        },
        'property': { 'validate': (-0x6b1 + 0x1 * -0x1fcb + 0x267c, _utils[_0x53d88e(0x1d0)])('Identifier') }
    }
});
const classMethodOrPropertyCommon = {
    'abstract': {
        'validate': (-0x4 * -0x5cc + -0x19fa + -0x165 * -0x2, _utils[_0x53d88e(0x1bd)])('boolean'),
        'optional': !![]
    },
    'accessibility': {
        'validate': (0x12d4 + 0x98d + -0x1c61, _utils[_0x53d88e(0x1cb)])('public', 'private', _0x53d88e(0x2d1)),
        'optional': !![]
    },
    'static': { 'default': ![] },
    'override': { 'default': ![] },
    'computed': { 'default': ![] },
    'optional': {
        'validate': (-0x177a + -0x1d40 + 0x34ba, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x214)),
        'optional': !![]
    },
    'key': {
        'validate': (0x265 + -0xa37 + -0xd * -0x9a, _utils[_0x53d88e(0x1bc)])(function () {
            const _0x37cd39 = _0x53d88e, _0x2ead1b = {
                    'yygBj': 'Identifier',
                    'HhwuB': _0x37cd39(0x25e),
                    'jkAxu': _0x37cd39(0x242),
                    'ETfXI': 'Expression'
                }, _0x1cf08b = (0x18cd + -0xa12 + -0xebb, _utils[_0x37cd39(0x1d0)])(_0x2ead1b[_0x37cd39(0x2d2)], _0x2ead1b[_0x37cd39(0x2d3)], _0x2ead1b['jkAxu']), _0x2bf30d = (0x22ce + -0x1cb8 + -0x52 * 0x13, _utils[_0x37cd39(0x1d0)])(_0x2ead1b[_0x37cd39(0x2d4)]);
            return function (_0x1e2165, _0x1f0176, _0x3eae1c) {
                const _0xde5191 = _0x37cd39, _0x49473c = _0x1e2165[_0xde5191(0x24e)] ? _0x2bf30d : _0x1cf08b;
                _0x49473c(_0x1e2165, _0x1f0176, _0x3eae1c);
            };
        }(), (0x2e * -0x5f + -0x5 * -0x29f + 0x3f7, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2), _0x53d88e(0x25e), 'NumericLiteral', 'Expression'))
    }
};
exports[_0x53d88e(0x1b3)] = classMethodOrPropertyCommon;
function _0x4a75(_0x2803a7, _0x5a29e4) {
    return _0x4a75 = function (_0x4bc393, _0xa2bca9) {
        _0x4bc393 = _0x4bc393 - (0x47f * 0x2 + -0x128f + 0x3bc * 0x3);
        let _0xa89125 = _0x5d55[_0x4bc393];
        return _0xa89125;
    }, _0x4a75(_0x2803a7, _0x5a29e4);
}
const classMethodOrDeclareMethodCommon = Object[_0x53d88e(0x1ee)]({}, functionCommon, classMethodOrPropertyCommon, {
    'params': { 'validate': (0xf31 * 0x1 + -0x7c2 + -0x76f, _utils[_0x53d88e(0x1bc)])((-0x1 * -0x24f3 + -0x19b0 + 0x1f * -0x5d, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0x11f * 0x1c + 0x29b * 0x6 + -0x7e1 * -0x2, _utils['assertEach'])((0x211c + -0x1 * 0x1636 + 0x5 * -0x22e, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1d2), _0x53d88e(0x1c6), _0x53d88e(0x20e), _0x53d88e(0x2d5)))) },
    'kind': {
        'validate': (-0x1cb5 + 0x18c6 + 0x35 * 0x13, _utils[_0x53d88e(0x1cb)])(_0x53d88e(0x2d6), 'set', _0x53d88e(0x25c), _0x53d88e(0x2d7)),
        'default': _0x53d88e(0x25c)
    },
    'access': {
        'validate': (-0xf2 * 0xb + -0x3 * -0x55b + -0x5ab, _utils[_0x53d88e(0x1bc)])((-0x1dc8 + -0x1 * -0x1d59 + 0x6f, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1c7)), (0x4 * 0x283 + 0x1991 + -0xbdf * 0x3, _utils['assertOneOf'])(_0x53d88e(0x2d8), 'private', _0x53d88e(0x2d1))),
        'optional': !![]
    },
    'decorators': {
        'validate': (0x1 * -0x2642 + -0x268c * -0x1 + -0x4a, _utils[_0x53d88e(0x1bc)])((0x1b35 * -0x1 + -0x12 * -0x182 + -0x11 * -0x1, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (0x13af + 0x11cc + -0x1f9 * 0x13, _utils[_0x53d88e(0x1bf)])((-0x23af + 0x265 * 0x5 + 0x4be * 0x5, _utils['assertNodeType'])('Decorator'))),
        'optional': !![]
    }
});
exports[_0x53d88e(0x1b2)] = classMethodOrDeclareMethodCommon, (-0x49d + 0x1 * 0x1e74 + 0x93 * -0x2d, _utils[_0x53d88e(0x1ba)])('ClassMethod', {
    'aliases': [
        _0x53d88e(0x220),
        _0x53d88e(0x1f6),
        'BlockParent',
        _0x53d88e(0x21a),
        _0x53d88e(0x228)
    ],
    'builder': [
        _0x53d88e(0x25a),
        'key',
        _0x53d88e(0x216),
        'body',
        _0x53d88e(0x24e),
        'static',
        _0x53d88e(0x217),
        _0x53d88e(0x218)
    ],
    'visitor': [
        _0x53d88e(0x25b),
        _0x53d88e(0x216),
        _0x53d88e(0x1f4),
        _0x53d88e(0x222),
        _0x53d88e(0x219),
        _0x53d88e(0x1eb)
    ],
    'fields': Object[_0x53d88e(0x1ee)]({}, classMethodOrDeclareMethodCommon, functionTypeAnnotationCommon, { 'body': { 'validate': (0xe26 + -0x1516 + 0x6f0, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f5)) } })
}), (0x4d * -0x42 + -0x193e + -0x25 * -0x138, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x1d4), {
    'visitor': [
        _0x53d88e(0x257),
        _0x53d88e(0x221),
        _0x53d88e(0x222)
    ],
    'builder': [_0x53d88e(0x257)],
    'aliases': [
        _0x53d88e(0x1c6),
        _0x53d88e(0x223),
        _0x53d88e(0x1d1)
    ],
    'fields': Object[_0x53d88e(0x1ee)]({}, patternLikeCommon, { 'properties': { 'validate': (-0x1c90 + -0x8ae + 0x253e, _utils[_0x53d88e(0x1bc)])((0x1 * 0x2038 + 0xa2a + 0x19 * -0x1b2, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0x21c1 * -0x1 + -0x1c10 + -0x5b1, _utils['assertEach'])((0x1b64 + 0x4b1 * 0x5 + -0x32d9, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x20e), _0x53d88e(0x258)))) } })
}), (-0x11f3 + -0x8bc + 0x1aaf, _utils[_0x53d88e(0x1ba)])('SpreadElement', {
    'visitor': [_0x53d88e(0x272)],
    'aliases': ['UnaryLike'],
    'deprecatedAlias': _0x53d88e(0x2d9),
    'fields': { 'argument': { 'validate': (-0x1922 * -0x1 + -0x262 * 0xe + 0x15f * 0x6, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) } }
}), (-0x1 * -0x39f + 0x21d4 * -0x1 + 0xd1 * 0x25, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x2da), { 'aliases': [_0x53d88e(0x1c4)] }), (-0x176e + 0x1f3f + -0x1 * 0x7d1, _utils[_0x53d88e(0x1ba)])('TaggedTemplateExpression', {
    'visitor': [
        _0x53d88e(0x2db),
        'quasi'
    ],
    'aliases': [_0x53d88e(0x1c4)],
    'fields': {
        'tag': { 'validate': (-0x1366 * -0x1 + -0x26af * -0x1 + -0x3a15, _utils['assertNodeType'])(_0x53d88e(0x1c4)) },
        'quasi': { 'validate': (0xf91 + -0x1 * -0x1b19 + -0x2aaa, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x2dc)) },
        'typeParameters': {
            'validate': (0x1270 + -0x44 * 0x49 + 0xf4, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f1), _0x53d88e(0x1f2)),
            'optional': !![]
        }
    }
}), (-0x366 * -0xa + 0x1880 + -0x3a7c, _utils['default'])(_0x53d88e(0x2dd), {
    'builder': [
        'value',
        'tail'
    ],
    'fields': {
        'value': {
            'validate': (0x2 * 0x87d + 0x1 * 0x533 + -0x162d * 0x1, _utils[_0x53d88e(0x2de)])({
                'raw': { 'validate': (0x45 * -0x7e + -0x1 * 0xc97 + -0x11 * -0x2bd, _utils[_0x53d88e(0x1bd)])('string') },
                'cooked': {
                    'validate': (-0xf3f + 0x2626 + -0x16e7, _utils['assertValueType'])(_0x53d88e(0x1c7)),
                    'optional': !![]
                }
            })
        },
        'tail': { 'default': ![] }
    }
}), (-0x22cf + 0x3ff + 0x1ed * 0x10, _utils['default'])(_0x53d88e(0x2dc), {
    'visitor': [
        _0x53d88e(0x2df),
        _0x53d88e(0x278)
    ],
    'aliases': [
        _0x53d88e(0x1c4),
        _0x53d88e(0x240)
    ],
    'fields': {
        'quasis': { 'validate': (-0x6 * 0x419 + -0x157e + 0x170a * 0x2, _utils['chain'])((0xf4b + -0xbae + -0x39d, _utils[_0x53d88e(0x1bd)])('array'), (-0x1 * -0xd6c + -0x2255 + 0x14e9, _utils[_0x53d88e(0x1bf)])((-0x198a + -0x186 + 0x1b10, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x2dd)))) },
        'expressions': {
            'validate': (-0x58e * 0x1 + -0x22ad + 0x283b, _utils[_0x53d88e(0x1bc)])((-0x1b55 * 0x1 + 0xee5 + 0xc70, _utils['assertValueType'])(_0x53d88e(0x1be)), (-0x1cd2 + 0x1d1a + -0x48, _utils[_0x53d88e(0x1bf)])((-0x2 * -0xb4f + 0x9f * -0x3 + 0x2f7 * -0x7, _utils[_0x53d88e(0x1d0)])('Expression', _0x53d88e(0x2e0))), function (_0x500be3, _0x21c1d2, _0x210358) {
                const _0x2e8cdd = _0x53d88e, _0xb8a366 = {
                        'mDVKS': function (_0x3fee90, _0x17294e) {
                            return _0x3fee90 !== _0x17294e;
                        },
                        'LiIrP': function (_0x4f887e, _0x25d6b5) {
                            return _0x4f887e + _0x25d6b5;
                        }
                    };
                if (_0xb8a366[_0x2e8cdd(0x2e1)](_0x500be3[_0x2e8cdd(0x2df)]['length'], _0xb8a366['LiIrP'](_0x210358[_0x2e8cdd(0x291)], 0x7cf + 0x1ded * -0x1 + -0x7 * -0x329)))
                    throw new TypeError(_0x2e8cdd(0x2e2) + _0x500be3['type'] + '\x20quasis\x20should\x20be\x20exactly\x20one\x20more\x20than\x20the\x20number\x20of\x20expressions.\x0aExpected\x20' + _0xb8a366[_0x2e8cdd(0x2e3)](_0x210358[_0x2e8cdd(0x291)], 0x2061 + 0x245 * 0x2 + 0x13b * -0x1e) + '\x20quasis\x20but\x20got\x20' + _0x500be3[_0x2e8cdd(0x2df)][_0x2e8cdd(0x291)]);
            })
        }
    }
}), (-0x2b2 + -0x3f5 * -0x3 + -0x92d, _utils[_0x53d88e(0x1ba)])('YieldExpression', {
    'builder': [
        _0x53d88e(0x272),
        _0x53d88e(0x2e4)
    ],
    'visitor': [_0x53d88e(0x272)],
    'aliases': [
        _0x53d88e(0x1c4),
        _0x53d88e(0x1e8)
    ],
    'fields': {
        'delegate': {
            'validate': (0x2 * -0x141 + -0x268a * -0x1 + -0x2408, _utils[_0x53d88e(0x1bc)])((-0xbbd * 0x1 + -0x1ca8 + 0x1b * 0x17f, _utils[_0x53d88e(0x1bd)])('boolean'), Object[_0x53d88e(0x1ee)](function (_0x518f14, _0x4bd0b3, _0x4ee1a0) {
                const _0x16cc22 = _0x53d88e, _0x218766 = { 'pjjIz': 'Property\x20delegate\x20of\x20YieldExpression\x20cannot\x20be\x20true\x20if\x20there\x20is\x20no\x20argument' };
                if (!process[_0x16cc22(0x1c8)][_0x16cc22(0x1c9)])
                    return;
                if (_0x4ee1a0 && !_0x518f14[_0x16cc22(0x272)])
                    throw new TypeError(_0x218766[_0x16cc22(0x2e5)]);
            }, { 'type': _0x53d88e(0x214) })),
            'default': ![]
        },
        'argument': {
            'optional': !![],
            'validate': (-0x143 + -0x121e + 0x1 * 0x1361, _utils['assertNodeType'])(_0x53d88e(0x1c4))
        }
    }
}), (0x18ad + -0x4 * 0x85 + -0x1699 * 0x1, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x2e6), {
    'builder': ['argument'],
    'visitor': ['argument'],
    'aliases': [
        _0x53d88e(0x1c4),
        _0x53d88e(0x1e8)
    ],
    'fields': { 'argument': { 'validate': (0x57e + -0x21b7 + 0x1c39, _utils[_0x53d88e(0x1d0)])('Expression') } }
}), (-0x193b + -0xaad + 0x23e8, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x2e7), { 'aliases': ['Expression'] }), (-0x1656 + -0x6da * -0x3 + 0x1c8, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x2e8), {
    'builder': [_0x53d88e(0x1df)],
    'fields': { 'value': { 'validate': (0x1 * -0x581 + 0x3 * 0x322 + -0x3e5, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1c7)) } },
    'aliases': [
        'Expression',
        _0x53d88e(0x23f),
        'Literal',
        'Immutable'
    ]
}), (0x3 * 0x8f5 + -0x1ecc + 0x3ed, _utils['default'])(_0x53d88e(0x2ba), {
    'visitor': [_0x53d88e(0x2e9)],
    'aliases': [_0x53d88e(0x2bd)],
    'fields': { 'exported': { 'validate': (-0x1b * 0x14e + 0x9fd + 0x193d, _utils['assertNodeType'])(_0x53d88e(0x1d2)) } }
}), (-0x26a0 + -0x77 * -0x9 + 0x2271, _utils['default'])(_0x53d88e(0x227), {
    'builder': [
        _0x53d88e(0x24d),
        _0x53d88e(0x226),
        _0x53d88e(0x24e),
        _0x53d88e(0x24f)
    ],
    'visitor': [
        _0x53d88e(0x24d),
        'property'
    ],
    'aliases': [_0x53d88e(0x1c4)],
    'fields': {
        'object': { 'validate': (-0x1df0 + -0x7 * -0x538 + 0x8 * -0xd3, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4)) },
        'property': {
            'validate': function () {
                const _0x53a2d8 = _0x53d88e, _0x39eef4 = {
                        'mnqrI': function (_0x24b69c, _0x3cb5ac, _0x171aa2, _0x2ac827) {
                            return _0x24b69c(_0x3cb5ac, _0x171aa2, _0x2ac827);
                        },
                        'YfldB': _0x53a2d8(0x1d2),
                        'uIOfa': _0x53a2d8(0x1c4)
                    }, _0x2134cb = (0x1e * 0x2a + 0x638 + -0xb24, _utils[_0x53a2d8(0x1d0)])(_0x39eef4[_0x53a2d8(0x2ea)]), _0x4078a5 = (-0x660 + -0x8f * -0x29 + 0x1087 * -0x1, _utils[_0x53a2d8(0x1d0)])(_0x53a2d8(0x1c4)), _0x5e80bb = function (_0x528adb, _0x40a96f, _0x5bb4b5) {
                        const _0x93b11e = _0x528adb['computed'] ? _0x4078a5 : _0x2134cb;
                        _0x39eef4['mnqrI'](_0x93b11e, _0x528adb, _0x40a96f, _0x5bb4b5);
                    };
                return _0x5e80bb['oneOfNodeTypes'] = [
                    _0x39eef4['uIOfa'],
                    _0x39eef4[_0x53a2d8(0x2ea)]
                ], _0x5e80bb;
            }()
        },
        'computed': { 'default': ![] },
        'optional': { 'validate': !process[_0x53d88e(0x1c8)][_0x53d88e(0x1c9)] ? (0x14a + -0x24da + 0x2 * 0x11c8, _utils['assertValueType'])(_0x53d88e(0x214)) : (-0x5f * -0x5d + 0x1605 * -0x1 + -0x1a * 0x7b, _utils[_0x53d88e(0x1bc)])((-0xf01 + -0x22fe + -0x31ff * -0x1, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x214)), (-0x13c2 + 0x193 * 0x1 + 0x122f, _utils[_0x53d88e(0x2eb)])()) }
    }
}), (-0x72a + 0x4 * -0x2c7 + 0x1246, _utils[_0x53d88e(0x1ba)])(_0x53d88e(0x2ec), {
    'visitor': [
        _0x53d88e(0x1ed),
        _0x53d88e(0x1ea),
        'typeParameters',
        'typeArguments'
    ],
    'builder': [
        _0x53d88e(0x1ed),
        _0x53d88e(0x1ea),
        'optional'
    ],
    'aliases': ['Expression'],
    'fields': {
        'callee': { 'validate': (-0x637 + -0x23ac + 0x29e3, _utils[_0x53d88e(0x1d0)])('Expression') },
        'arguments': { 'validate': (0x74 * -0x42 + -0x178d * -0x1 + 0x65b, _utils['chain'])((0x2071 + -0x17 * -0x54 + 0x1 * -0x27fd, _utils[_0x53d88e(0x1bd)])(_0x53d88e(0x1be)), (-0x217b + -0x15cd + 0x3748, _utils[_0x53d88e(0x1bf)])((0x2014 + 0x1389 + -0xb5 * 0x49, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1c4), 'SpreadElement', _0x53d88e(0x1ef), _0x53d88e(0x1f0)))) },
        'optional': { 'validate': !process[_0x53d88e(0x1c8)][_0x53d88e(0x1c9)] ? (0x13b7 + 0x1505 + 0xc * -0x365, _utils['assertValueType'])(_0x53d88e(0x214)) : (0x515 + 0x198e + -0x1ea3, _utils[_0x53d88e(0x1bc)])((0x222a + 0x1a34 + -0x3c5e, _utils[_0x53d88e(0x1bd)])('boolean'), (0x1 * 0x21dd + 0x2678 + -0x4855, _utils[_0x53d88e(0x2eb)])()) },
        'typeArguments': {
            'validate': (-0xf04 + 0x472 * 0x3 + 0x1ae, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f1)),
            'optional': !![]
        },
        'typeParameters': {
            'validate': (0x13 * -0xd3 + -0x1 * 0x127d + -0x2 * -0x1113, _utils[_0x53d88e(0x1d0)])(_0x53d88e(0x1f2)),
            'optional': !![]
        }
    }
});
