'use strict';
const _0x48ef = [
    'TestInt64Truncation',
    '47021ppcvQU',
    '300006qgqkHd',
    '4yfrnZK',
    '59956bBZEOe',
    '265909PcMKoF',
    '1sjyPTU',
    '1ObkCUU',
    '202164aLBQwL',
    '22872LqqVMk',
    '1qYWfZS',
    '96013kzuhwt',
    '../../common',
    'assert',
    './build/',
    'buildType',
    '/test_number',
    'strictEqual',
    'Test',
    'MIN_SAFE_INTEGER',
    'MIN_VALUE',
    'MAX_VALUE',
    'POSITIVE_INFINITY',
    'NEGATIVE_INFINITY',
    'NaN',
    'TestUint32Truncation',
    'pow',
    'MAX_SAFE_INTEGER'
];
const _0x1aa398 = _0x6463;
(function (_0x3cc445, _0x4ebe1d) {
    const _0x5084c7 = _0x6463;
    while (!![]) {
        try {
            const _0xda9c90 = parseInt(_0x5084c7(0x100)) + -parseInt(_0x5084c7(0x101)) + parseInt(_0x5084c7(0x102)) * parseInt(_0x5084c7(0x103)) + parseInt(_0x5084c7(0x104)) * parseInt(_0x5084c7(0x105)) + parseInt(_0x5084c7(0x106)) * -parseInt(_0x5084c7(0x107)) + parseInt(_0x5084c7(0x108)) + parseInt(_0x5084c7(0x109)) * parseInt(_0x5084c7(0x10a));
            if (_0xda9c90 === _0x4ebe1d)
                break;
            else
                _0x3cc445['push'](_0x3cc445['shift']());
        } catch (_0x1d19ef) {
            _0x3cc445['push'](_0x3cc445['shift']());
        }
    }
}(_0x48ef, -0x50c02 + 0x1edc9 * 0x1 + -0x5b436 * -0x1));
const common = require(_0x1aa398(0x10b)), assert = require(_0x1aa398(0x10c)), test_number = require(_0x1aa398(0x10d) + common[_0x1aa398(0x10e)] + _0x1aa398(0x10f));
function testNumber(_0x2aa80c) {
    const _0x20e0d7 = _0x1aa398;
    assert[_0x20e0d7(0x110)](_0x2aa80c, test_number[_0x20e0d7(0x111)](_0x2aa80c));
}
testNumber(-0x1b2b + -0x19 * 0xaa + 0x2bc5), testNumber(-(0x1a * 0x4 + 0xd1c + 0xa * -0x15a)), testNumber(-0x853 + -0x229f * -0x1 + -0x1a4b), testNumber(-(-0x1cbd + -0x5 * -0x423 + 0x80f)), testNumber(-0x6 * -0x303 + -0x2 * 0x7a + -0x10ba), testNumber(0x3 * 0xb99 + -0x1b44 + 0x61 * 0x2), testNumber(-(0x16e0 + -0xc5e + -0x5b1)), testNumber(-0x2f325 * 0x2 + -0x9229f * 0x1 + 0x16 * 0x15e20), testNumber(-(-0x79aad + -0x24fec * 0x9 + -0x15a88e * -0x2)), testNumber(0xf015e11daa0a400000000000000000000000000000000000000000), testNumber(-0xa93a03bb9aa5e0000000000000000000000000000000000000000), testNumber(Number[_0x1aa398(0x112)]), testNumber(Number['MAX_SAFE_INTEGER']), testNumber(Number['MAX_SAFE_INTEGER'] + (-0x377 * 0x7 + -0x1db3 + 0x35fe)), testNumber(Number[_0x1aa398(0x113)]), testNumber(Number[_0x1aa398(0x114)]), testNumber(Number[_0x1aa398(0x114)] + (0x12b + -0x1c0b + 0x1aea)), testNumber(Number[_0x1aa398(0x115)]), testNumber(Number[_0x1aa398(0x116)]), testNumber(Number[_0x1aa398(0x117)]);
function _0x6463(_0x228f5c, _0x414693) {
    return _0x6463 = function (_0x4ab75d, _0x148f8f) {
        _0x4ab75d = _0x4ab75d - (-0x482 * 0x1 + -0x160d + 0x1b8f);
        let _0x74c072 = _0x48ef[_0x4ab75d];
        return _0x74c072;
    }, _0x6463(_0x228f5c, _0x414693);
}
function testUint32(_0x4099b3, _0x21ad52 = _0x4099b3) {
    const _0x438821 = _0x1aa398;
    assert[_0x438821(0x110)](_0x21ad52, test_number[_0x438821(0x118)](_0x4099b3));
}
testUint32(-0x2 * 0x502 + -0x444 + 0xe48, -0x1cd0 + -0x16b8 + -0x184 * -0x22), testUint32(-(0x7e * 0x14 + -0x1 * -0xf53 + -0x192b), -0x12 * -0xd2 + 0x1352 + -0x1 * 0x2216), testUint32(0x1c665a823 * 0x1 + -0x49 * 0x5f12fb3 + 0xeb60f1e7 * 0x1), testUint32(-0x11654 * -0x78b6 + -0x1c3fcba38 + 0x240bf7a80, -0xe7c + 0x1b88 + 0x2 * -0x686), testUint32(0x79546 * 0x3311 + 0x27a45eb0 + 0xaae23a55 * -0x1, -0x7 * 0x42d + 0x59 * -0x2c + 0x1644 * 0x2), testUint32((-0x5 * 0x7b0 + -0x3d * 0x8b + 0x47a0) * (0x989f0eb8 + -0xc298d334 + 0x94fce23e * 0x2) + (0x3d * -0x13 + -0x25c + -0x6e4 * -0x1), 0x1 * 0x1ebb + 0x1 * -0x305 + 0x1bb5 * -0x1), testUint32(-(0xa * -0x17 + -0x1c4 * 0x2 + -0x1 * -0x46f), -0x38b32d54 + -0xf4f83037 + 0xb * 0x32b27cde);
function testInt32(_0x9b74c8, _0x5157c0 = _0x9b74c8) {
    assert['strictEqual'](_0x5157c0, test_number['TestInt32Truncation'](_0x9b74c8));
}
testInt32(0xc8 * -0x1f + 0x87e * -0x1 + 0x20b6, -0x102 * -0x1d + -0x7 * 0x27a + -0xbe4 * 0x1), testInt32(-(-0x1 * -0x222f + -0xb24 + -0x170b), -0x1107 + -0x8 * -0x14e + 0x697), testInt32(-Math[_0x1aa398(0x119)](0x14c4 + -0x12f7 + -0x1cb, 0x2108 + -0x1 * -0x3d7 + -0x24c0)), testInt32(Math['pow'](0x1 * -0xda7 + -0x410 + 0x15d * 0xd, -0x2555 * 0x1 + 0xf48 + 0x6 * 0x3b2) - (-0x2 * -0xf8e + 0xdb3 + 0x5 * -0x8f6)), testInt32(0x1 * 0xdfe19e15 + -0x9661853d + 0xb67fe729, 0x15ef + 0x220f * 0x1 + -0x37fd * 0x1), testInt32(0x7ed50e10 + 0x1e8608 * 0xf01 + -0x1bb0574 * 0xbe, 0x56e * 0x2 + 0xf09 + 0x1 * -0x19e5), testInt32(0x1a * 0x10a663c + -0x29532c * 0x22c + 0x13eb24177, -(0x254e + -0x821 + -0x1d2c)), testInt32((-0x4 * -0x470603f9 + 0x197609d84 + -0x1b378ad68) * (-0x156e + 0xedc + -0x7 * -0xf1) + (-0xf27 + -0x1 * 0x1921 + -0x1 * -0x284b), -0x111e + 0x2703 + -0x15e2), testInt32(Number['MIN_SAFE_INTEGER'], -0x1 * 0x1945 + 0x1202 + 0x1d1 * 0x4), testInt32(Number[_0x1aa398(0x11a)], -(-0x1dc2 + 0x1cdd + 0xe6 * 0x1)), testInt32(-Math[_0x1aa398(0x119)](0x1b89 + 0x1251 + 0x2 * -0x16ec, 0x16 * 0x67 + -0x1e8e + 0x15f3) + (Math['pow'](0x130a + 0x5 * 0x4a3 + -0x2a37 * 0x1, 0x207e + -0xe58 * -0x2 + -0x58f * 0xb) + (0x92f + 0x1568 + 0xae * -0x2d)), 0x27e + -0x2 * -0x35f + -0x53c), testInt32(Math[_0x1aa398(0x119)](0xc97 + 0x2ef * 0xa + -0xdf9 * 0x3, 0x207d + -0x1a1 * 0x9 + -0x1195 * 0x1) - (Math[_0x1aa398(0x119)](-0x5 * -0x48b + 0xab3 + 0x2168 * -0x1, -0x1c10 * 0x1 + -0xfe6 + 0x1 * 0x2bff) + (0x1eda + -0xf3e + -0xf9b)), -(0x1762 + -0x1de6 + 0xa84)), testInt32(-Number[_0x1aa398(0x113)], 0x1 * -0x2493 + 0x14f + 0x2344), testInt32(Number[_0x1aa398(0x113)], -0x1f7d + -0x285 + 0x2 * 0x1101), testInt32(-Number[_0x1aa398(0x114)], 0x19ff + -0x1453 * -0x1 + 0x16 * -0x21b), testInt32(Number[_0x1aa398(0x114)], 0xc4c * 0x2 + -0x1b98 + 0x300), testInt32(-Math['pow'](0x11cd + 0x1689 + -0x2854, 0x2b * -0x6b + 0xa88 * 0x1 + -0x1ec * -0x4) + Math[_0x1aa398(0x119)](0x793 + -0x1278 + 0xae7, -0x70d + 0xb * -0x14b + 0x5 * 0x443), -0x996 + -0xcf8 + -0xb47 * -0x2), testInt32(Math[_0x1aa398(0x119)](-0x2f4 * 0xd + -0x104e * -0x1 + 0x1618, 0x151 * -0x1 + -0x35 * -0x3 + 0xf1) - Math[_0x1aa398(0x119)](-0x13b * 0x17 + 0x1500 + 0x74f, -0x1 * -0x174b + 0x178 + -0xf * 0x1a6), 0x1a0b * -0x1 + -0x1 * 0x18c7 + 0x5 * 0xa2a), testInt32(Number[_0x1aa398(0x115)], -0x1 * 0x17b1 + 0x16c + 0x1 * 0x1645), testInt32(Number[_0x1aa398(0x116)], -0xba0 + 0x42 * -0x1a + -0x33 * -0x5c), testInt32(Number[_0x1aa398(0x117)], 0x25c + 0x1550 + -0x17ac);
function testInt64(_0x509e14, _0x577650 = _0x509e14) {
    const _0x5b0070 = _0x1aa398;
    assert[_0x5b0070(0x110)](_0x577650, test_number[_0x5b0070(0x11b)](_0x509e14));
}
const RANGEERROR_POSITIVE = Math[_0x1aa398(0x119)](-0xdde + -0x4 * 0x7f1 + -0x1 * -0x2da4, -0x329 + -0xcc8 + 0x1030), RANGEERROR_NEGATIVE = -Math[_0x1aa398(0x119)](0x3 * -0x21a + -0xf89 * 0x1 + 0x15d9, 0x84d + -0x1344 * -0x1 + -0x10d * 0x1a);
testInt64(-0x8cb * -0x1 + -0x2198 + -0x38b * -0x7, -0x1873 * -0x1 + -0x1383 + -0x4f0), testInt64(-(-0xc7a + -0x1a17 + 0x2691), 0x14f + -0x1cea * 0x1 + -0x25 * -0xbf), testInt64(Number['MIN_SAFE_INTEGER']), testInt64(Number[_0x1aa398(0x11a)]), testInt64(-Math[_0x1aa398(0x119)](-0xad * -0x1a + 0x1991 + -0xb5 * 0x3d, 0x219d + 0x1 * 0x189 + -0x22e7) + (Math[_0x1aa398(0x119)](-0x246c + -0x7ea + 0x6 * 0x764, -0x1 * -0x1ba7 + -0x17e5 + -0x3b9) + (-0x1b71 + 0x2012 + -0x25 * 0x20))), testInt64(Math['pow'](0x25df + -0x880 + -0x1d5d, -0x61b + 0xcd3 + 0x1 * -0x679) - (Math['pow'](0x1 * 0xf2c + 0x80e * 0x2 + -0x1f46, -0xf8 * -0x1 + -0x99c + 0x8ad) + (-0xb72 * -0x1 + -0x47 * -0x4b + -0x2 * 0x101f))), testInt64(-Number[_0x1aa398(0x113)], -0x61 * -0x43 + 0xd * 0x1bf + -0x3016), testInt64(Number[_0x1aa398(0x113)], 0x1e7 + -0x21bd + 0x1fd6), testInt64(-Number[_0x1aa398(0x114)], RANGEERROR_NEGATIVE), testInt64(Number[_0x1aa398(0x114)], RANGEERROR_POSITIVE), testInt64(-Math[_0x1aa398(0x119)](0x10d1 * 0x2 + 0x244f + 0x45ef * -0x1, 0x1 * 0x2105 + 0x7 * -0x518 + 0xf6 * 0x3) + Math[_0x1aa398(0x119)](-0xd11 + 0x1078 + -0x365 * 0x1, -0x224d + -0xabb * 0x2 + -0x1be6 * -0x2), RANGEERROR_NEGATIVE), testInt64(Math[_0x1aa398(0x119)](-0x7 * -0x529 + -0x1d89 + -0x694, 0xf3a + 0x311 * -0x2 + -0x97 * 0xf) - Math[_0x1aa398(0x119)](0x34b * 0xb + -0x14f8 + -0xf3f, -0x1413 + 0xc1 * 0x29 + -0x7 * 0x18b), RANGEERROR_POSITIVE), testInt64(Number[_0x1aa398(0x115)], 0x11 * -0xef + 0x19ea + -0xa0b * 0x1), testInt64(Number[_0x1aa398(0x116)], 0x2 * -0x1214 + 0x2 * -0x1271 + 0x1 * 0x490a), testInt64(Number[_0x1aa398(0x117)], 0x1af4 * -0x1 + 0x121a + 0x8da);
