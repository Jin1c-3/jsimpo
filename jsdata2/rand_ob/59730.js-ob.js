var _0x3b59 = [
    'uXFvD',
    '};\x20Module',
    '1401516DQPpie',
    '1053884XPUNZw',
    '7051DhSPgj',
    '7KitpKf',
    '22SXdGyw',
    '52567wajwPe',
    '7bDDJIe',
    '204865taRTsx',
    '551849kQDRup',
    '2IyBIyN',
    '5587xGsCAp',
    '465emRLLN',
    'mod_',
    '\x20function\x20',
    '(dividend)\x20{\x0a',
    '\x20\x20dividend\x20=\x20dividend\x20|\x200;\x0a',
    ')\x20|\x200;\x0a',
    '\x20}\x0a',
    'yoDKh',
    'ABLUK',
    'JtNqs',
    'kySnC',
    'vICTo',
    'xRWcc',
    'OVNnb',
    'UcSbt',
    'pSUwa',
    'fhfUb'
];
function _0x43b9(_0x10f084, _0x5546ce) {
    return _0x43b9 = function (_0x304ef9, _0x8cb653) {
        _0x304ef9 = _0x304ef9 - (0x10 * -0x14b + -0x64e + 0x1c45);
        var _0x2c019b = _0x3b59[_0x304ef9];
        return _0x2c019b;
    }, _0x43b9(_0x10f084, _0x5546ce);
}
(function (_0x2b95c5, _0x28bf6f) {
    var _0x3d6bcf = _0x43b9;
    while (!![]) {
        try {
            var _0x3b1f38 = -parseInt(_0x3d6bcf(0x147)) + parseInt(_0x3d6bcf(0x148)) + parseInt(_0x3d6bcf(0x149)) * parseInt(_0x3d6bcf(0x14a)) + parseInt(_0x3d6bcf(0x14b)) * parseInt(_0x3d6bcf(0x14c)) + parseInt(_0x3d6bcf(0x14d)) * parseInt(_0x3d6bcf(0x14e)) + -parseInt(_0x3d6bcf(0x14f)) * -parseInt(_0x3d6bcf(0x150)) + -parseInt(_0x3d6bcf(0x151)) * parseInt(_0x3d6bcf(0x152));
            if (_0x3b1f38 === _0x28bf6f)
                break;
            else
                _0x2b95c5['push'](_0x2b95c5['shift']());
        } catch (_0x265ce5) {
            _0x2b95c5['push'](_0x2b95c5['shift']());
        }
    }
}(_0x3b59, -0x149591 + 0x21d51 + -0x1ea56d * -0x1));
var stdlib = {}, foreign = {}, heap = new ArrayBuffer((-0x34 * -0x6 + -0x13 * 0x1d5 + -0x1 * -0x21d7) * (0x2 * 0x388 + 0x1901 + 0x1df * -0xf));
function Uint32Mod(_0x3d8bf7) {
    var _0x5f5491 = _0x43b9, _0x4c6535 = {
            'yoDKh': _0x5f5491(0x153),
            'RPIXh': function (_0x4b7e02, _0x30d535) {
                return _0x4b7e02 + _0x30d535;
            },
            'wiUwb': function (_0x5d1c0c, _0x148f3f) {
                return _0x5d1c0c + _0x148f3f;
            },
            'ABLUK': function (_0x1b054e, _0x16a498) {
                return _0x1b054e + _0x16a498;
            },
            'JtNqs': function (_0x5ada42, _0x193800) {
                return _0x5ada42 + _0x193800;
            },
            'kySnC': function (_0xf17e71, _0x9f1e4e) {
                return _0xf17e71 + _0x9f1e4e;
            },
            'vICTo': '\x20\x22use\x20asm\x22;\x0a',
            'xRWcc': _0x5f5491(0x154),
            'OVNnb': _0x5f5491(0x155),
            'UcSbt': _0x5f5491(0x156),
            'pSUwa': _0x5f5491(0x157),
            'fhfUb': _0x5f5491(0x158),
            'uXFvD': '\x20return\x20{\x20f:\x20'
        }, _0x5d85f5 = _0x4c6535[_0x5f5491(0x159)];
    _0x5d85f5 += _0x3d8bf7;
    var _0x19783b = eval(_0x4c6535['RPIXh'](_0x4c6535['RPIXh'](_0x4c6535['wiUwb'](_0x4c6535[_0x5f5491(0x15a)](_0x4c6535[_0x5f5491(0x15a)](_0x4c6535[_0x5f5491(0x15b)](_0x4c6535['JtNqs'](_0x4c6535[_0x5f5491(0x15c)](_0x4c6535['kySnC'](_0x4c6535['kySnC']('function\x20Module(stdlib,\x20foreign,\x20heap)\x20{\x0a', _0x4c6535[_0x5f5491(0x15d)]), _0x4c6535[_0x5f5491(0x15e)]), _0x5d85f5), _0x4c6535[_0x5f5491(0x15f)]) + _0x4c6535[_0x5f5491(0x160)], '\x20\x20return\x20((dividend\x20>>>\x200)\x20%\x20'), _0x3d8bf7), _0x4c6535[_0x5f5491(0x161)]) + _0x4c6535[_0x5f5491(0x162)] + _0x4c6535[_0x5f5491(0x163)], _0x5d85f5), '}\x0a'), _0x5f5491(0x164)));
    return _0x19783b(stdlib, foreign, heap)['f'];
}
var divisors = [
    0x164c + -0x16ad + 0x61,
    0x24 * -0x10b + -0x1c1b + -0xb * -0x5f8,
    -0x1c6d + 0x1f87 + 0x71 * -0x7,
    0x2dd + 0x20af + -0x2388,
    0xd6 * -0x2 + -0x1 * 0x2209 + -0x23bf * -0x1,
    -0x822 * 0x4 + -0x2127 + 0x41d9,
    -0x961 + -0xd2b + -0xb66 * -0x2,
    0x180b + -0x1d * 0xc0 + -0x1e7 * 0x1,
    0xb * -0x1de + -0x1 * -0x1c49 + -0x89 * 0x7,
    -0x604e7909 + 0x9e699bb9 + 0x41e4dd4f,
    0x7 * -0x2ecd74c + 0xd257eb5b + -0x69cff2c * -0xa
];
for (var i in divisors) {
    var divisor = divisors[i], mod = Uint32Mod(divisor);
    for (var dividend = -0x733 * -0x3 + -0x240b * 0x1 + -0xe72 * -0x1; dividend < 0x4 * -0x57687e53 + 0x7 * 0x12e4b0d4 + 0x1d9612380; dividend += -0x1 * -0x6a4eb4 + -0x1 * 0x5716b + -0x27d52c) {
        assertEquals(dividend % divisor | -0x15eb * -0x1 + 0x4a7 * -0x2 + -0xc9d, mod(dividend));
    }
}
