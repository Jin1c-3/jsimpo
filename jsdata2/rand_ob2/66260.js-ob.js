var _0x4fc9 = [
    'options.passphrase',
    'optionalString',
    'cipher',
    'isPrivateKey',
    'readUInt32BE',
    'writeInt',
    'toBuffer',
    'rfc4253',
    'writeString',
    '_offset',
    'randomBytes',
    'writeBuffer',
    'createCipheriv',
    'opensslName',
    'once',
    'concat',
    'Unsupported\x20kdf\x20',
    'writeCString',
    'OPENSSH\x20PUBLIC\x20KEY',
    'toString',
    'base64',
    '-----BEGIN\x20',
    '-----\x0a',
    '-----END\x20',
    '169966zYmqoj',
    '10ebwRCE',
    '1197886AzPVzP',
    '1zmzTCY',
    '1579254mRxfcJ',
    '36857ewYvTi',
    '25WiCjgR',
    '1coyRaV',
    '1178747ggUnyz',
    '308103ckDmYb',
    '4KPAUDJ',
    '3843772bmROpL',
    'exports',
    'assert-plus',
    'safer-buffer',
    'Buffer',
    '../algs',
    'crypto',
    '../key',
    '../private-key',
    './pem',
    './rfc4253',
    '../ssh-buffer',
    '../errors',
    'read',
    'openssh-key-v1',
    'readCString',
    'strictEqual',
    'bad\x20magic\x20string',
    'readString',
    'readInt',
    'OpenSSH-format\x20key\x20file\x20contains\x20',
    'multiple\x20keys:\x20this\x20is\x20unsupported.',
    'readBuffer',
    'public',
    'atEnd',
    'excess\x20bytes\x20left\x20after\x20key',
    'none',
    'but\x20specifies\x20a\x20cipher\x20other\x20than\x20\x22none\x22',
    'bcrypt',
    'opensshCipherInfo',
    'bcrypt-pbkdf',
    'passphrase',
    'from',
    'utf-8',
    'isBuffer',
    'KeyEncryptedError',
    'filename',
    'OpenSSH',
    'keySize',
    'blockSize',
    'pbkdf',
    'length',
    'bcrypt_pbkdf\x20function\x20returned\x20',
    'failure,\x20parameters\x20invalid',
    'slice',
    'createDecipheriv',
    'setAutoPadding',
    'error',
    'Incorrect\x20passphrase\x20',
    'write',
    'end',
    'push',
    'Incorrect\x20passphrase\x20supplied,\x20could\x20not\x20',
    'decrypt\x20key',
    'readInternal',
    'skip',
    'consumed',
    'comment',
    'toPublic',
    'alloc',
    'string',
    'buffer'
];
var _0x41b49e = _0x1dba;
(function (_0x389ab4, _0x9b7438) {
    var _0x247078 = _0x1dba;
    while (!![]) {
        try {
            var _0x55fbac = parseInt(_0x247078(0x6d)) * -parseInt(_0x247078(0x6e)) + parseInt(_0x247078(0x6f)) * -parseInt(_0x247078(0x70)) + -parseInt(_0x247078(0x71)) + parseInt(_0x247078(0x72)) * -parseInt(_0x247078(0x73)) + parseInt(_0x247078(0x74)) * parseInt(_0x247078(0x75)) + -parseInt(_0x247078(0x76)) * -parseInt(_0x247078(0x77)) + parseInt(_0x247078(0x78));
            if (_0x55fbac === _0x9b7438)
                break;
            else
                _0x389ab4['push'](_0x389ab4['shift']());
        } catch (_0x5bba7c) {
            _0x389ab4['push'](_0x389ab4['shift']());
        }
    }
}(_0x4fc9, 0xd1282), module[_0x41b49e(0x79)] = {
    'read': read,
    'readSSHPrivate': readSSHPrivate,
    'write': write
});
var assert = require(_0x41b49e(0x7a)), asn1 = require('asn1'), Buffer = require(_0x41b49e(0x7b))[_0x41b49e(0x7c)], algs = require(_0x41b49e(0x7d)), utils = require('../utils'), crypto = require(_0x41b49e(0x7e)), Key = require(_0x41b49e(0x7f)), PrivateKey = require(_0x41b49e(0x80)), pem = require(_0x41b49e(0x81)), rfc4253 = require(_0x41b49e(0x82)), SSHBuffer = require(_0x41b49e(0x83)), errors = require(_0x41b49e(0x84)), bcrypt;
function read(_0x3554af, _0x3e5a96) {
    var _0x2ee49f = _0x41b49e;
    return pem[_0x2ee49f(0x85)](_0x3554af, _0x3e5a96);
}
var MAGIC = _0x41b49e(0x86);
function _0x1dba(_0x157392, _0x516ca8) {
    return _0x1dba = function (_0x4fc93a, _0x1dba05) {
        _0x4fc93a = _0x4fc93a - 0x6d;
        var _0x5d571d = _0x4fc9[_0x4fc93a];
        return _0x5d571d;
    }, _0x1dba(_0x157392, _0x516ca8);
}
function readSSHPrivate(_0x4b23b7, _0x30d9d1, _0x30d51) {
    var _0x1e3e86 = _0x41b49e;
    _0x30d9d1 = new SSHBuffer({ 'buffer': _0x30d9d1 });
    var _0x2eeee5 = _0x30d9d1[_0x1e3e86(0x87)]();
    assert[_0x1e3e86(0x88)](_0x2eeee5, MAGIC, _0x1e3e86(0x89));
    var _0x42f3a2 = _0x30d9d1[_0x1e3e86(0x8a)](), _0x565279 = _0x30d9d1[_0x1e3e86(0x8a)](), _0x26d723 = _0x30d9d1['readBuffer'](), _0x5aa9ba = _0x30d9d1[_0x1e3e86(0x8b)]();
    if (_0x5aa9ba !== 0x1)
        throw new Error(_0x1e3e86(0x8c) + _0x1e3e86(0x8d));
    var _0x30a5bf = _0x30d9d1[_0x1e3e86(0x8e)]();
    if (_0x4b23b7 === _0x1e3e86(0x8f))
        return assert['ok'](_0x30d9d1[_0x1e3e86(0x90)](), _0x1e3e86(0x91)), rfc4253['read'](_0x30a5bf);
    var _0x11390d = _0x30d9d1[_0x1e3e86(0x8e)]();
    assert['ok'](_0x30d9d1[_0x1e3e86(0x90)](), _0x1e3e86(0x91));
    var _0x431fdf = new SSHBuffer({ 'buffer': _0x26d723 });
    switch (_0x565279) {
    case _0x1e3e86(0x92):
        if (_0x42f3a2 !== _0x1e3e86(0x92))
            throw new Error('OpenSSH-format\x20key\x20uses\x20KDF\x20\x22none\x22\x20' + _0x1e3e86(0x93));
        break;
    case _0x1e3e86(0x94):
        var _0x263196 = _0x431fdf[_0x1e3e86(0x8e)](), _0x4e048c = _0x431fdf['readInt'](), _0x2f3bea = utils[_0x1e3e86(0x95)](_0x42f3a2);
        bcrypt === undefined && (bcrypt = require(_0x1e3e86(0x96)));
        typeof _0x30d51[_0x1e3e86(0x97)] === 'string' && (_0x30d51[_0x1e3e86(0x97)] = Buffer[_0x1e3e86(0x98)](_0x30d51['passphrase'], _0x1e3e86(0x99)));
        if (!Buffer[_0x1e3e86(0x9a)](_0x30d51[_0x1e3e86(0x97)]))
            throw new errors[(_0x1e3e86(0x9b))](_0x30d51[_0x1e3e86(0x9c)], _0x1e3e86(0x9d));
        var _0x342240 = new Uint8Array(_0x30d51[_0x1e3e86(0x97)]), _0x52842a = new Uint8Array(_0x263196), _0x78791f = new Uint8Array(_0x2f3bea[_0x1e3e86(0x9e)] + _0x2f3bea[_0x1e3e86(0x9f)]), _0x5694ac = bcrypt[_0x1e3e86(0xa0)](_0x342240, _0x342240[_0x1e3e86(0xa1)], _0x52842a, _0x52842a[_0x1e3e86(0xa1)], _0x78791f, _0x78791f['length'], _0x4e048c);
        if (_0x5694ac !== 0x0)
            throw new Error(_0x1e3e86(0xa2) + _0x1e3e86(0xa3));
        _0x78791f = Buffer['from'](_0x78791f);
        var _0x49a72c = _0x78791f[_0x1e3e86(0xa4)](0x0, _0x2f3bea['keySize']), _0x5a9d07 = _0x78791f['slice'](_0x2f3bea['keySize'], _0x2f3bea[_0x1e3e86(0x9e)] + _0x2f3bea['blockSize']), _0x2b2b74 = crypto[_0x1e3e86(0xa5)](_0x2f3bea['opensslName'], _0x49a72c, _0x5a9d07);
        _0x2b2b74[_0x1e3e86(0xa6)](![]);
        var _0xb4b9a2, _0x434b66 = [];
        _0x2b2b74['once'](_0x1e3e86(0xa7), function (_0x15d842) {
            var _0x4a6f44 = _0x1e3e86;
            if (_0x15d842['toString']()['indexOf']('bad\x20decrypt') !== -0x1)
                throw new Error(_0x4a6f44(0xa8) + 'supplied,\x20could\x20not\x20decrypt\x20key');
            throw _0x15d842;
        }), _0x2b2b74[_0x1e3e86(0xa9)](_0x11390d), _0x2b2b74[_0x1e3e86(0xaa)]();
        while ((_0xb4b9a2 = _0x2b2b74['read']()) !== null)
            _0x434b66[_0x1e3e86(0xab)](_0xb4b9a2);
        _0x11390d = Buffer['concat'](_0x434b66);
        break;
    default:
        throw new Error('OpenSSH-format\x20key\x20uses\x20unknown\x20KDF\x20\x22' + _0x565279 + '\x22');
    }
    _0x30d9d1 = new SSHBuffer({ 'buffer': _0x11390d });
    var _0x56dbdd = _0x30d9d1[_0x1e3e86(0x8b)](), _0x58af8e = _0x30d9d1[_0x1e3e86(0x8b)]();
    if (_0x56dbdd !== _0x58af8e)
        throw new Error(_0x1e3e86(0xac) + _0x1e3e86(0xad));
    var _0x6b0122 = {}, _0x3b5923 = rfc4253[_0x1e3e86(0xae)](_0x6b0122, 'private', _0x30d9d1['remainder']());
    _0x30d9d1[_0x1e3e86(0xaf)](_0x6b0122[_0x1e3e86(0xb0)]);
    var _0x33d77f = _0x30d9d1[_0x1e3e86(0x8a)]();
    return _0x3b5923[_0x1e3e86(0xb1)] = _0x33d77f, _0x3b5923;
}
function write(_0x4cadaf, _0x1ee1bc) {
    var _0xcb610c = _0x41b49e, _0x2998fd;
    if (PrivateKey['isPrivateKey'](_0x4cadaf))
        _0x2998fd = _0x4cadaf[_0xcb610c(0xb2)]();
    else
        _0x2998fd = _0x4cadaf;
    var _0x2cc8d3 = 'none', _0x154c59 = _0xcb610c(0x92), _0x4014d6 = Buffer[_0xcb610c(0xb3)](0x0), _0x91a10e = { 'blockSize': 0x8 }, _0x4bb954;
    if (_0x1ee1bc !== undefined) {
        _0x4bb954 = _0x1ee1bc['passphrase'];
        if (typeof _0x4bb954 === _0xcb610c(0xb4))
            _0x4bb954 = Buffer[_0xcb610c(0x98)](_0x4bb954, _0xcb610c(0x99));
        if (_0x4bb954 !== undefined) {
            assert[_0xcb610c(0xb5)](_0x4bb954, _0xcb610c(0xb6)), assert[_0xcb610c(0xb7)](_0x1ee1bc[_0xcb610c(0xb8)], 'options.cipher'), _0x2cc8d3 = _0x1ee1bc[_0xcb610c(0xb8)];
            if (_0x2cc8d3 === undefined)
                _0x2cc8d3 = 'aes128-ctr';
            _0x91a10e = utils['opensshCipherInfo'](_0x2cc8d3), _0x154c59 = _0xcb610c(0x94);
        }
    }
    var _0x1c879c;
    if (PrivateKey[_0xcb610c(0xb9)](_0x4cadaf)) {
        _0x1c879c = new SSHBuffer({});
        var _0x37e31e = crypto['randomBytes'](0x4)[_0xcb610c(0xba)](0x0);
        _0x1c879c[_0xcb610c(0xbb)](_0x37e31e), _0x1c879c[_0xcb610c(0xbb)](_0x37e31e), _0x1c879c[_0xcb610c(0xa9)](_0x4cadaf[_0xcb610c(0xbc)](_0xcb610c(0xbd))), _0x1c879c[_0xcb610c(0xbe)](_0x4cadaf['comment'] || '');
        var _0x3870e3 = 0x1;
        while (_0x1c879c[_0xcb610c(0xbf)] % _0x91a10e[_0xcb610c(0x9f)] !== 0x0)
            _0x1c879c['writeChar'](_0x3870e3++);
        _0x1c879c = _0x1c879c['toBuffer']();
    }
    switch (_0x154c59) {
    case _0xcb610c(0x92):
        break;
    case _0xcb610c(0x94):
        var _0x2d1bc5 = crypto[_0xcb610c(0xc0)](0x10), _0x35d4c7 = 0x10, _0x5cc36e = new SSHBuffer({});
        _0x5cc36e[_0xcb610c(0xc1)](_0x2d1bc5), _0x5cc36e[_0xcb610c(0xbb)](_0x35d4c7), _0x4014d6 = _0x5cc36e[_0xcb610c(0xbc)]();
        bcrypt === undefined && (bcrypt = require(_0xcb610c(0x96)));
        var _0x1214b2 = new Uint8Array(_0x4bb954), _0x539d88 = new Uint8Array(_0x2d1bc5), _0x44aef9 = new Uint8Array(_0x91a10e['keySize'] + _0x91a10e[_0xcb610c(0x9f)]), _0x22d3a4 = bcrypt[_0xcb610c(0xa0)](_0x1214b2, _0x1214b2[_0xcb610c(0xa1)], _0x539d88, _0x539d88[_0xcb610c(0xa1)], _0x44aef9, _0x44aef9[_0xcb610c(0xa1)], _0x35d4c7);
        if (_0x22d3a4 !== 0x0)
            throw new Error(_0xcb610c(0xa2) + _0xcb610c(0xa3));
        _0x44aef9 = Buffer[_0xcb610c(0x98)](_0x44aef9);
        var _0x57c11a = _0x44aef9[_0xcb610c(0xa4)](0x0, _0x91a10e['keySize']), _0xbd01fb = _0x44aef9[_0xcb610c(0xa4)](_0x91a10e[_0xcb610c(0x9e)], _0x91a10e[_0xcb610c(0x9e)] + _0x91a10e[_0xcb610c(0x9f)]), _0x31eede = crypto[_0xcb610c(0xc2)](_0x91a10e[_0xcb610c(0xc3)], _0x57c11a, _0xbd01fb);
        _0x31eede[_0xcb610c(0xa6)](![]);
        var _0xc8a13a, _0x527206 = [];
        _0x31eede[_0xcb610c(0xc4)](_0xcb610c(0xa7), function (_0x2c6624) {
            throw _0x2c6624;
        }), _0x31eede[_0xcb610c(0xa9)](_0x1c879c), _0x31eede[_0xcb610c(0xaa)]();
        while ((_0xc8a13a = _0x31eede['read']()) !== null)
            _0x527206[_0xcb610c(0xab)](_0xc8a13a);
        _0x1c879c = Buffer[_0xcb610c(0xc5)](_0x527206);
        break;
    default:
        throw new Error(_0xcb610c(0xc6) + _0x154c59);
    }
    var _0x574864 = new SSHBuffer({});
    _0x574864[_0xcb610c(0xc7)](MAGIC), _0x574864[_0xcb610c(0xbe)](_0x2cc8d3), _0x574864[_0xcb610c(0xbe)](_0x154c59), _0x574864[_0xcb610c(0xc1)](_0x4014d6), _0x574864[_0xcb610c(0xbb)](0x1), _0x574864['writeBuffer'](_0x2998fd['toBuffer'](_0xcb610c(0xbd)));
    if (_0x1c879c)
        _0x574864['writeBuffer'](_0x1c879c);
    _0x574864 = _0x574864[_0xcb610c(0xbc)]();
    var _0x58382c;
    if (PrivateKey[_0xcb610c(0xb9)](_0x4cadaf))
        _0x58382c = 'OPENSSH\x20PRIVATE\x20KEY';
    else
        _0x58382c = _0xcb610c(0xc8);
    var _0xa98350 = _0x574864[_0xcb610c(0xc9)](_0xcb610c(0xca)), _0x488e9f = _0xa98350[_0xcb610c(0xa1)] + _0xa98350[_0xcb610c(0xa1)] / 0x46 + 0x12 + 0x10 + _0x58382c['length'] * 0x2 + 0xa;
    _0x574864 = Buffer[_0xcb610c(0xb3)](_0x488e9f);
    var _0xdca07f = 0x0;
    _0xdca07f += _0x574864['write'](_0xcb610c(0xcb) + _0x58382c + _0xcb610c(0xcc), _0xdca07f);
    for (var _0x1e602a = 0x0; _0x1e602a < _0xa98350[_0xcb610c(0xa1)];) {
        var _0x1524a0 = _0x1e602a + 0x46;
        if (_0x1524a0 > _0xa98350[_0xcb610c(0xa1)])
            _0x1524a0 = _0xa98350['length'];
        _0xdca07f += _0x574864[_0xcb610c(0xa9)](_0xa98350[_0xcb610c(0xa4)](_0x1e602a, _0x1524a0), _0xdca07f), _0x574864[_0xdca07f++] = 0xa, _0x1e602a = _0x1524a0;
    }
    return _0xdca07f += _0x574864[_0xcb610c(0xa9)](_0xcb610c(0xcd) + _0x58382c + _0xcb610c(0xcc), _0xdca07f), _0x574864[_0xcb610c(0xa4)](0x0, _0xdca07f);
}
