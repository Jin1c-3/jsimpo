'use strict';
const _0x3a3e = [
    'root-builtin-rules',
    'package-necessary-rules',
    'path',
    'npm-normalize-package-bin',
    'glob',
    '.npmignore',
    '**/.git',
    '**/CVS',
    '**/.svn/**',
    '**/.hg/**',
    '/.lock-wscript',
    '/build/config.gypi',
    'npm-debug.log',
    '.*.swp',
    '.DS_Store',
    '**/.DS_Store/**',
    '._*',
    '**/._*/**',
    '*.orig',
    '/package-lock.json',
    '/yarn.lock',
    '/archived-packages/**',
    'test',
    'ignoreFiles',
    'package.json',
    '.gitignore',
    'includeEmpty',
    'cwd',
    'parent',
    'root',
    'replace',
    'substr',
    'length',
    'follow',
    'bundled',
    'from',
    'filter',
    'map',
    'split',
    'packageJsonCache',
    'onReadIgnoreFile',
    'bundledScopes',
    '.git',
    'node_modules',
    'includes',
    'onReaddir',
    'resolve',
    'has',
    'object',
    'readPackageJson',
    'stringify',
    'onReadPackageJson',
    'emit',
    'error',
    'getPackageFiles',
    'mustHaveFilesFromPackage',
    'browser',
    'push',
    'main',
    'bin',
    'toString',
    'isArray',
    'files',
    'bundleDependencies',
    'bundledDependencies',
    'reduce',
    'match',
    'delete',
    'add',
    'forEach',
    'concat',
    'globFiles',
    'filterEntry',
    'basename',
    'indexOf',
    'npm-shrinkwrap.json',
    'package-lock.json',
    'filterEntries',
    'ignoreRules',
    'addIgnoreFile',
    'onPackageJson',
    'get',
    'set',
    'join',
    'onstat',
    'isSymbolicLink',
    'parse',
    'sort',
    'walker',
    'done',
    'start',
    '/package.json',
    'readFileSync',
    'walkerOpt',
    'then',
    'result',
    'extname',
    'toLowerCase',
    'localeCompare',
    'exports',
    'sync',
    'WalkerSync',
    '5347fEqqda',
    '13thSnoy',
    '591211OGHhVE',
    '722397OQKxDT',
    '662256dNQHxc',
    '699529eyAUIT',
    '590027YWysZE',
    '1047fJIWHC',
    '27miIoDE',
    'npm-bundled',
    'BundleWalker',
    'BundleWalkerSync',
    'ignore-walk',
    'Walker'
];
const _0x470673 = _0x117b;
(function (_0xffcd1a, _0x396692) {
    const _0x488e2e = _0x117b;
    while (!![]) {
        try {
            const _0x348b0b = parseInt(_0x488e2e(0xa2)) * parseInt(_0x488e2e(0xa3)) + parseInt(_0x488e2e(0xa4)) + parseInt(_0x488e2e(0xa5)) + -parseInt(_0x488e2e(0xa6)) + -parseInt(_0x488e2e(0xa7)) + parseInt(_0x488e2e(0xa8)) + -parseInt(_0x488e2e(0xa9)) * parseInt(_0x488e2e(0xaa));
            if (_0x348b0b === _0x396692)
                break;
            else
                _0xffcd1a['push'](_0xffcd1a['shift']());
        } catch (_0x3d538f) {
            _0xffcd1a['push'](_0xffcd1a['shift']());
        }
    }
}(_0x3a3e, 0x8e5b4));
function _0x117b(_0x4541dc, _0x3443b0) {
    return _0x117b = function (_0x3a3eae, _0x117b4a) {
        _0x3a3eae = _0x3a3eae - 0xa2;
        let _0xe1629f = _0x3a3e[_0x3a3eae];
        return _0xe1629f;
    }, _0x117b(_0x4541dc, _0x3443b0);
}
const bundleWalk = require(_0x470673(0xab)), BundleWalker = bundleWalk[_0x470673(0xac)], BundleWalkerSync = bundleWalk[_0x470673(0xad)], ignoreWalk = require(_0x470673(0xae)), IgnoreWalker = ignoreWalk[_0x470673(0xaf)], IgnoreWalkerSync = ignoreWalk['WalkerSync'], rootBuiltinRules = Symbol(_0x470673(0xb0)), packageNecessaryRules = Symbol(_0x470673(0xb1)), path = require(_0x470673(0xb2)), normalizePackageBin = require(_0x470673(0xb3)), packageMustHaveFileNames = 'readme|copying|license|licence', packageMustHaves = '@(' + packageMustHaveFileNames + '){,.*[^~$]}', packageMustHavesRE = new RegExp('^(' + packageMustHaveFileNames + ')(\x5c..*[^~$])?$', 'i'), fs = require('fs'), glob = require(_0x470673(0xb4)), defaultRules = [
        _0x470673(0xb5),
        '.gitignore',
        _0x470673(0xb6),
        '**/.svn',
        '**/.hg',
        _0x470673(0xb7),
        '**/.git/**',
        _0x470673(0xb8),
        _0x470673(0xb9),
        '**/CVS/**',
        _0x470673(0xba),
        '/.wafpickle-*',
        _0x470673(0xbb),
        _0x470673(0xbc),
        '**/.npmrc',
        _0x470673(0xbd),
        _0x470673(0xbe),
        _0x470673(0xbf),
        _0x470673(0xc0),
        _0x470673(0xc1),
        _0x470673(0xc2),
        _0x470673(0xc3),
        _0x470673(0xc4),
        _0x470673(0xc5)
    ], nameIsBadForWindows = _0x36d6f1 => /\*/[_0x470673(0xc6)](_0x36d6f1), npmWalker = _0x259872 => class _0x48cb6f extends _0x259872 {
        constructor(_0x2c00d9) {
            const _0x45fe64 = _0x470673;
            _0x2c00d9 = _0x2c00d9 || {}, _0x2c00d9[_0x45fe64(0xc7)] = [
                rootBuiltinRules,
                _0x45fe64(0xc8),
                _0x45fe64(0xb5),
                _0x45fe64(0xc9),
                packageNecessaryRules
            ], _0x2c00d9[_0x45fe64(0xca)] = ![], _0x2c00d9[_0x45fe64(0xb2)] = _0x2c00d9[_0x45fe64(0xb2)] || process[_0x45fe64(0xcb)]();
            const _0x439a94 = /^(?:\/node_modules\/(?:@[^/]+\/[^/]+|[^/]+)\/)*\/node_modules(?:\/@[^/]+)?$/, _0x949d7d = _0x2c00d9[_0x45fe64(0xcc)] ? _0x2c00d9['parent'][_0x45fe64(0xcd)] : _0x2c00d9[_0x45fe64(0xb2)], _0x577436 = _0x2c00d9[_0x45fe64(0xb2)][_0x45fe64(0xce)](/\\/g, '/')[_0x45fe64(0xcf)](_0x949d7d[_0x45fe64(0xd0)]);
            _0x2c00d9[_0x45fe64(0xd1)] = _0x439a94[_0x45fe64(0xc6)](_0x577436), super(_0x2c00d9);
            if (!this[_0x45fe64(0xcc)]) {
                this[_0x45fe64(0xd2)] = _0x2c00d9[_0x45fe64(0xd2)] || [], this['bundledScopes'] = Array[_0x45fe64(0xd3)](new Set(this[_0x45fe64(0xd2)][_0x45fe64(0xd4)](_0x2834e5 => /^@/[_0x45fe64(0xc6)](_0x2834e5))[_0x45fe64(0xd5)](_0x1b19d2 => _0x1b19d2[_0x45fe64(0xd6)]('/')[0x0])));
                const _0x3b9ae7 = defaultRules['join']('\x0a') + '\x0a';
                this[_0x45fe64(0xd7)] = _0x2c00d9[_0x45fe64(0xd7)] || new Map(), super[_0x45fe64(0xd8)](rootBuiltinRules, _0x3b9ae7, _0x1dcdfb => _0x1dcdfb);
            } else
                this[_0x45fe64(0xd2)] = [], this[_0x45fe64(0xd9)] = [], this[_0x45fe64(0xd7)] = this[_0x45fe64(0xcc)][_0x45fe64(0xd7)];
        }
        ['onReaddir'](_0x39766b) {
            const _0x4e8dee = _0x470673;
            !this[_0x4e8dee(0xcc)] && (_0x39766b = _0x39766b[_0x4e8dee(0xd4)](_0x2f58bc => _0x2f58bc !== _0x4e8dee(0xda) && !(_0x2f58bc === _0x4e8dee(0xdb) && this[_0x4e8dee(0xd2)]['length'] === 0x0)));
            if (this[_0x4e8dee(0xcc)] || !_0x39766b[_0x4e8dee(0xdc)](_0x4e8dee(0xc8)))
                return super[_0x4e8dee(0xdd)](_0x39766b);
            const _0x565bad = path[_0x4e8dee(0xde)](this['path'], _0x4e8dee(0xc8));
            if (this[_0x4e8dee(0xd7)][_0x4e8dee(0xdf)](_0x565bad)) {
                const _0x442209 = this[_0x4e8dee(0xd7)]['get'](_0x565bad);
                if (!_0x442209 || typeof _0x442209 !== _0x4e8dee(0xe0))
                    return this[_0x4e8dee(0xe1)](_0x39766b);
                return this['getPackageFiles'](_0x39766b, JSON[_0x4e8dee(0xe2)](_0x442209));
            }
            this[_0x4e8dee(0xe1)](_0x39766b);
        }
        [_0x470673(0xe3)](_0x579e22, _0x39477e, _0x3b9d3a) {
            const _0x4e5bde = _0x470673;
            if (_0x39477e)
                this[_0x4e5bde(0xe4)](_0x4e5bde(0xe5), _0x39477e);
            else
                this[_0x4e5bde(0xe6)](_0x579e22, _0x3b9d3a);
        }
        [_0x470673(0xe7)](_0x19fd80) {
            const _0x564618 = _0x470673, _0x36ac01 = [];
            if (_0x19fd80[_0x564618(0xe8)])
                _0x36ac01[_0x564618(0xe9)]('/' + _0x19fd80['browser']);
            if (_0x19fd80[_0x564618(0xea)])
                _0x36ac01[_0x564618(0xe9)]('/' + _0x19fd80[_0x564618(0xea)]);
            if (_0x19fd80[_0x564618(0xeb)]) {
                for (const _0x2426a7 in _0x19fd80[_0x564618(0xeb)])
                    _0x36ac01['push']('/' + _0x19fd80[_0x564618(0xeb)][_0x2426a7]);
            }
            return _0x36ac01[_0x564618(0xe9)]('/package.json', '/npm-shrinkwrap.json', '!/package-lock.json', packageMustHaves), _0x36ac01;
        }
        [_0x470673(0xe6)](_0x21c9ca, _0x37d85e) {
            const _0x2a419f = _0x470673;
            try {
                _0x37d85e = normalizePackageBin(JSON['parse'](_0x37d85e[_0x2a419f(0xec)]()));
            } catch (_0x4f704d) {
                return super[_0x2a419f(0xdd)](_0x21c9ca);
            }
            const _0x148346 = path[_0x2a419f(0xde)](this[_0x2a419f(0xb2)], _0x2a419f(0xc8));
            this[_0x2a419f(0xd7)]['set'](_0x148346, _0x37d85e);
            if (!Array[_0x2a419f(0xed)](_0x37d85e[_0x2a419f(0xee)]))
                return super[_0x2a419f(0xdd)](_0x21c9ca);
            _0x37d85e[_0x2a419f(0xee)][_0x2a419f(0xe9)](...this[_0x2a419f(0xe7)](_0x37d85e));
            if ((_0x37d85e[_0x2a419f(0xef)] || _0x37d85e[_0x2a419f(0xf0)]) && _0x21c9ca['includes'](_0x2a419f(0xdb)))
                _0x37d85e[_0x2a419f(0xee)]['push'](_0x2a419f(0xdb));
            const _0x2da46c = Array[_0x2a419f(0xd3)](new Set(_0x37d85e[_0x2a419f(0xee)]))[_0x2a419f(0xf1)]((_0x37d03f, _0x17860c) => {
                const _0x40f2d0 = _0x2a419f, _0x576085 = _0x17860c[_0x40f2d0(0xf2)](/^!+/);
                if (_0x576085)
                    _0x17860c = _0x17860c['substr'](_0x576085[0x0][_0x40f2d0(0xd0)]);
                _0x17860c = _0x17860c[_0x40f2d0(0xce)](/^\/+/, '');
                const _0x13ddfa = _0x576085 && _0x576085[0x0][_0x40f2d0(0xd0)] % 0x2 === 0x1;
                return _0x37d03f[_0x40f2d0(0xe9)]({
                    'pattern': _0x17860c,
                    'negate': _0x13ddfa
                }), _0x37d03f;
            }, []);
            let _0x337096 = _0x2da46c[_0x2a419f(0xd0)];
            const _0x5ed37e = new Set(), _0x46ffca = new Set(), _0x5aec40 = [], _0xaf5709 = (_0x3fda38, _0x551ee3, _0x43dfdc, _0x127f71, _0x50fdf5) => {
                    const _0x592292 = _0x2a419f;
                    if (_0x43dfdc)
                        return this[_0x592292(0xe4)]('error', _0x43dfdc);
                    _0x5aec40[_0x50fdf5] = {
                        'negate': _0x551ee3,
                        'fileList': _0x127f71
                    };
                    if (--_0x337096 === 0x0)
                        _0x38d1f7(_0x5aec40);
                }, _0x38d1f7 = _0x34dceb => {
                    const _0x2cef10 = _0x2a419f;
                    for (const {
                                negate: _0x14ee3c,
                                fileList: _0x5f2261
                            } of _0x34dceb) {
                        _0x14ee3c ? _0x5f2261['forEach'](_0x54ca7d => {
                            const _0x3a0d68 = _0x117b;
                            _0x54ca7d = _0x54ca7d[_0x3a0d68(0xce)](/\/+$/, ''), _0x5ed37e[_0x3a0d68(0xf3)](_0x54ca7d), _0x46ffca[_0x3a0d68(0xf4)](_0x54ca7d);
                        }) : _0x5f2261[_0x2cef10(0xf5)](_0x3a3305 => {
                            const _0x3a4e62 = _0x2cef10;
                            _0x3a3305 = _0x3a3305[_0x3a4e62(0xce)](/\/+$/, ''), _0x5ed37e['add'](_0x3a3305), _0x46ffca[_0x3a4e62(0xf3)](_0x3a3305);
                        });
                    }
                    const _0x50e7f1 = Array[_0x2cef10(0xd3)](_0x5ed37e);
                    _0x37d85e['files'] = _0x50e7f1[_0x2cef10(0xf6)](Array[_0x2cef10(0xd3)](_0x46ffca)[_0x2cef10(0xd5)](_0x4bba95 => '!' + _0x4bba95));
                    const _0x191c18 = Array[_0x2cef10(0xd3)](new Set(_0x50e7f1[_0x2cef10(0xd5)](_0x58310f => _0x58310f[_0x2cef10(0xce)](/^\/+/, ''))));
                    super[_0x2cef10(0xdd)](_0x191c18);
                };
            _0x2da46c[_0x2a419f(0xf5)](({
                pattern: _0x259772,
                negate: _0x35e3fc
            }, _0x14763d) => this[_0x2a419f(0xf7)](_0x259772, (_0x38de80, _0x38f757) => _0xaf5709(_0x259772, _0x35e3fc, _0x38de80, _0x38f757, _0x14763d)));
        }
        [_0x470673(0xf8)](_0x12b0c7, _0x2bedff) {
            const _0x146bd2 = _0x470673, _0x2e9a0d = this[_0x146bd2(0xb2)]['substr'](this[_0x146bd2(0xcd)]['length'] + 0x1), _0x10d5ca = /^node_modules\/(@[^/]+\/?[^/]+|[^/]+)(\/.*)?$/, _0x2ee713 = !this[_0x146bd2(0xcc)], _0x495b1e = _0x2ee713 && _0x10d5ca[_0x146bd2(0xc6)](_0x12b0c7) ? _0x12b0c7[_0x146bd2(0xce)](_0x10d5ca, '$1') : null, _0x279b15 = _0x2ee713 && _0x12b0c7 === _0x146bd2(0xdb), _0x30b6b5 = _0x2ee713 && _0x12b0c7 === _0x146bd2(0xc8);
            return /^node_modules($|\/)/i[_0x146bd2(0xc6)](_0x2e9a0d) ? this[_0x146bd2(0xcc)][_0x146bd2(0xf8)](this[_0x146bd2(0xf9)] + '/' + _0x12b0c7, _0x2bedff) : _0x495b1e ? this[_0x146bd2(0xd2)][_0x146bd2(0xfa)](_0x495b1e) !== -0x1 || this[_0x146bd2(0xd9)][_0x146bd2(0xfa)](_0x495b1e) !== -0x1 : _0x279b15 ? !!this[_0x146bd2(0xd2)]['length'] : _0x30b6b5 ? !![] : packageMustHavesRE['test'](_0x12b0c7) ? !![] : _0x2ee713 && (_0x12b0c7 === _0x146bd2(0xfb) || _0x12b0c7 === _0x146bd2(0xc8)) ? !![] : _0x2ee713 && _0x12b0c7 === _0x146bd2(0xfc) ? ![] : super[_0x146bd2(0xf8)](_0x12b0c7, _0x2bedff);
        }
        [_0x470673(0xfd)]() {
            const _0x3e0c3e = _0x470673;
            if (this['ignoreRules']['.npmignore'])
                this[_0x3e0c3e(0xfe)]['.gitignore'] = null;
            this[_0x3e0c3e(0xfd)] = super[_0x3e0c3e(0xfd)], super[_0x3e0c3e(0xfd)]();
        }
        [_0x470673(0xff)](_0x3101ce, _0x193b97) {
            const _0x2b54a7 = _0x470673, _0x51648f = path[_0x2b54a7(0xde)](this[_0x2b54a7(0xb2)], _0x3101ce);
            if (_0x3101ce === _0x2b54a7(0xc8) && this[_0x2b54a7(0xcc)])
                _0x193b97();
            else {
                if (this[_0x2b54a7(0xd7)][_0x2b54a7(0xdf)](_0x51648f))
                    this[_0x2b54a7(0x100)](_0x51648f, this[_0x2b54a7(0xd7)][_0x2b54a7(0x101)](_0x51648f), _0x193b97);
                else
                    super['addIgnoreFile'](_0x3101ce, _0x193b97);
            }
        }
        [_0x470673(0x100)](_0x4f293e, _0x4cc9ad, _0x2f61ce) {
            const _0x3dca52 = _0x470673;
            this[_0x3dca52(0xd7)][_0x3dca52(0x102)](_0x4f293e, _0x4cc9ad);
            if (Array['isArray'](_0x4cc9ad['files']))
                super[_0x3dca52(0xd8)](_0x3dca52(0xc8), _0x4cc9ad[_0x3dca52(0xee)]['map'](_0x2c1b20 => '!' + _0x2c1b20)[_0x3dca52(0x103)]('\x0a') + '\x0a', _0x2f61ce);
            else {
                const _0x3a13d2 = this[_0x3dca52(0xe7)](_0x4cc9ad)[_0x3dca52(0xd5)](_0x3ca0bb => '!' + _0x3ca0bb), _0x2663f5 = _0x3a13d2[_0x3dca52(0x103)]('\x0a') + '\x0a';
                super['onReadIgnoreFile'](packageNecessaryRules, _0x2663f5, _0x2f61ce);
            }
        }
        ['stat'](_0x3166ac, _0x53c9f5, _0x18fe13, _0x3c57b5) {
            if (nameIsBadForWindows(_0x3166ac))
                _0x3c57b5();
            else
                super['stat'](_0x3166ac, _0x53c9f5, _0x18fe13, _0x3c57b5);
        }
        [_0x470673(0x104)](_0x2e05c2, _0x5051d3, _0x30aca1, _0x14d362, _0x4ba369) {
            const _0x4b7e1e = _0x470673;
            if (_0x2e05c2[_0x4b7e1e(0x105)]())
                _0x4ba369();
            else
                super[_0x4b7e1e(0x104)](_0x2e05c2, _0x5051d3, _0x30aca1, _0x14d362, _0x4ba369);
        }
        ['onReadIgnoreFile'](_0x10e57e, _0x534192, _0x111f62) {
            const _0x2327bc = _0x470673;
            if (_0x10e57e === _0x2327bc(0xc8))
                try {
                    const _0x2fcc70 = path['resolve'](this[_0x2327bc(0xb2)], _0x10e57e);
                    this[_0x2327bc(0x100)](_0x2fcc70, JSON[_0x2327bc(0x106)](_0x534192), _0x111f62);
                } catch (_0x58302e) {
                    _0x111f62();
                }
            else
                super[_0x2327bc(0xd8)](_0x10e57e, _0x534192, _0x111f62);
        }
        [_0x470673(0x107)](_0x475c3c, _0x588799) {
            return sort(_0x475c3c, _0x588799);
        }
    };
class Walker extends npmWalker(IgnoreWalker) {
    [_0x470673(0xf7)](_0x49298d, _0x425f3c) {
        const _0x5c2fd9 = _0x470673;
        glob(_0x49298d, {
            'dot': !![],
            'cwd': this[_0x5c2fd9(0xb2)],
            'nocase': !![]
        }, _0x425f3c);
    }
    [_0x470673(0xe1)](_0x536cdc) {
        const _0x4f28bf = _0x470673;
        fs['readFile'](this[_0x4f28bf(0xb2)] + '/package.json', (_0x4d6671, _0x49e083) => this[_0x4f28bf(0xe3)](_0x536cdc, _0x4d6671, _0x49e083));
    }
    [_0x470673(0x108)](_0x186481, _0x183273) {
        const _0x5ae6b7 = _0x470673;
        new Walker(this['walkerOpt'](_0x186481))['on'](_0x5ae6b7(0x109), _0x183273)[_0x5ae6b7(0x10a)]();
    }
}
class WalkerSync extends npmWalker(IgnoreWalkerSync) {
    ['globFiles'](_0x15e6a1, _0x4bf628) {
        const _0x34842c = _0x470673;
        _0x4bf628(null, glob['sync'](_0x15e6a1, {
            'dot': !![],
            'cwd': this[_0x34842c(0xb2)],
            'nocase': !![]
        }));
    }
    [_0x470673(0xe1)](_0x1b9e88) {
        const _0x2dce91 = _0x470673, _0x3a9280 = this['path'] + _0x2dce91(0x10b);
        try {
            this[_0x2dce91(0xe3)](_0x1b9e88, null, fs[_0x2dce91(0x10c)](_0x3a9280));
        } catch (_0x3b6b01) {
            this[_0x2dce91(0xe3)](_0x1b9e88, _0x3b6b01);
        }
    }
    [_0x470673(0x108)](_0x265608, _0x188ac1) {
        const _0x3d7a35 = _0x470673;
        new WalkerSync(this[_0x3d7a35(0x10d)](_0x265608))[_0x3d7a35(0x10a)](), _0x188ac1();
    }
}
const walk = (_0x56d7bb, _0x2cbeab) => {
        const _0x1a9e91 = _0x470673;
        _0x56d7bb = _0x56d7bb || {};
        const _0x85c02c = new Promise((_0x51ca21, _0x41164d) => {
            const _0x5ebff7 = _0x117b, _0xa2746 = new BundleWalker(_0x56d7bb);
            _0xa2746['on'](_0x5ebff7(0x109), _0x52f09e => {
                const _0x1de8d4 = _0x5ebff7;
                _0x56d7bb[_0x1de8d4(0xd2)] = _0x52f09e, _0x56d7bb[_0x1de8d4(0xd7)] = _0xa2746['packageJsonCache'], new Walker(_0x56d7bb)['on'](_0x1de8d4(0x109), _0x51ca21)['on'](_0x1de8d4(0xe5), _0x41164d)[_0x1de8d4(0x10a)]();
            }), _0xa2746['start']();
        });
        return _0x2cbeab ? _0x85c02c[_0x1a9e91(0x10e)](_0x352f3f => _0x2cbeab(null, _0x352f3f), _0x2cbeab) : _0x85c02c;
    }, walkSync = _0x427bb5 => {
        const _0x34e0e9 = _0x470673;
        _0x427bb5 = _0x427bb5 || {};
        const _0x3c50ab = new BundleWalkerSync(_0x427bb5)[_0x34e0e9(0x10a)]();
        _0x427bb5[_0x34e0e9(0xd2)] = _0x3c50ab[_0x34e0e9(0x10f)], _0x427bb5['packageJsonCache'] = _0x3c50ab[_0x34e0e9(0xd7)];
        const _0x2154c1 = new WalkerSync(_0x427bb5);
        return _0x2154c1[_0x34e0e9(0x10a)](), _0x2154c1[_0x34e0e9(0x10f)];
    }, sort = (_0x413ed1, _0x47c286) => {
        const _0x3c41d0 = _0x470673, _0x1d591b = path[_0x3c41d0(0x110)](_0x413ed1)[_0x3c41d0(0x111)](), _0x5445f4 = path['extname'](_0x47c286)[_0x3c41d0(0x111)](), _0x5b30b7 = path[_0x3c41d0(0xf9)](_0x413ed1)[_0x3c41d0(0x111)](), _0x47f2d2 = path[_0x3c41d0(0xf9)](_0x47c286)['toLowerCase']();
        return _0x1d591b[_0x3c41d0(0x112)](_0x5445f4, 'en') || _0x5b30b7[_0x3c41d0(0x112)](_0x47f2d2, 'en') || _0x413ed1['localeCompare'](_0x47c286, 'en');
    };
module[_0x470673(0x113)] = walk, walk[_0x470673(0x114)] = walkSync, walk[_0x470673(0xaf)] = Walker, walk[_0x470673(0x115)] = WalkerSync;
