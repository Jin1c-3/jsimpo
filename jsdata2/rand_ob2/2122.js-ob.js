const _0x56d6 = [
    'setEdge',
    'newGraph\x20edges\x20',
    'Skipping\x20copy\x20of\x20edge\x20',
    '\x20rootId:\x20',
    'error',
    'removeNode',
    'concat',
    'Edges:\x20',
    '\x20is\x20part\x20of\x20and\x20edge\x20even\x20though\x20it\x20has\x20children',
    'The\x20node\x20',
    'Searching',
    'Searching\x20children\x20of\x20id\x20',
    'This\x20is\x20a\x20valid\x20node',
    '\x20=>\x20',
    'externalConnections',
    'Opting\x20out,\x20no\x20graph\x20',
    'Opting\x20in,\x20graph\x20',
    'Cluster\x20identified',
    '\x20Replacement\x20id\x20in\x20edges:\x20',
    'Edge:\x20',
    '\x20leaves\x20cluster\x20',
    'Not\x20a\x20cluster\x20',
    '\x20->\x20',
    'Edge\x20',
    'stringify',
    'Fix\x20XXX',
    'ids:',
    'Translateing:\x20',
    'Fixing\x20and\x20trixing\x20-\x20removing\x20XXX',
    'Adjusted\x20Graph',
    'json',
    'write',
    'extractor\x20-\x20',
    'Bailing\x20out',
    'Done,\x20no\x20node\x20has\x20children',
    'Nodes\x20=\x20',
    'Extracting\x20node',
    '\x20Depth\x20',
    'Cluster\x20without\x20external\x20connections,\x20without\x20a\x20parent\x20and\x20with\x20children',
    'rankdir',
    'clusterData',
    'dir',
    'Fixing\x20dir',
    'Graph',
    'setGraph',
    'Old\x20graph\x20before\x20copy',
    'labelText',
    'New\x20graph\x20after\x20copy\x20node:\x20(',
    'Old\x20graph\x20after\x20copy',
    'Cluster\x20**\x20',
    '\x20no\x20parent:\x20',
    '\x20children\x20',
    'New\x20list\x20of\x20nodes',
    'clusterNode',
    '479938EyUUlh',
    '2kBgAAt',
    '60443NPmUAH',
    '1240914NuWiqI',
    '371339MOGkMV',
    '35846dIjtze',
    '1RPpREK',
    '674534PhXIAq',
    '2969XPtvox',
    '613rnHgMO',
    'trace',
    'In\x20isDecendant',
    'indexOf',
    'info',
    'Decendants\x20of\x20',
    '\x20is\x20',
    'Edge\x20is\x20',
    'debug',
    'Tilt,\x20',
    ',not\x20in\x20decendants',
    'Here\x20',
    'warn',
    'Copying\x20children\x20of\x20',
    'node',
    'children',
    'push',
    'Copying\x20(nodes)\x20clusterId',
    'nodes',
    'forEach',
    'length',
    'cp\x20',
    '\x20to\x20',
    '\x20with\x20parent\x20',
    'setNode',
    'parent',
    'Setting\x20parent',
    'setParent',
    'In\x20copy\x20',
    'root',
    'Not\x20Setting\x20parent\x20for\x20node=',
    'cluster!==rootId',
    'node!==clusterId',
    'edges',
    'Edge',
    'edge',
    'name',
    'Edge\x20data',
    'Copying\x20as\x20'
];
const _0x146f22 = _0x5a47;
(function (_0x114250, _0x246e9a) {
    const _0x16adb3 = _0x5a47;
    while (!![]) {
        try {
            const _0x175a38 = parseInt(_0x16adb3(0x16d)) + -parseInt(_0x16adb3(0x16e)) * parseInt(_0x16adb3(0x16f)) + -parseInt(_0x16adb3(0x170)) + parseInt(_0x16adb3(0x171)) + parseInt(_0x16adb3(0x172)) * parseInt(_0x16adb3(0x173)) + -parseInt(_0x16adb3(0x174)) + parseInt(_0x16adb3(0x175)) * parseInt(_0x16adb3(0x176));
            if (_0x175a38 === _0x246e9a)
                break;
            else
                _0x114250['push'](_0x114250['shift']());
        } catch (_0xc56ed5) {
            _0x114250['push'](_0x114250['shift']());
        }
    }
}(_0x56d6, 0xa3c42));
import { log } from '../logger';
function _0x5a47(_0x4a4e79, _0x1f6e4b) {
    return _0x5a47 = function (_0x56d6df, _0x5a476c) {
        _0x56d6df = _0x56d6df - 0x16d;
        let _0x279dc6 = _0x56d6[_0x56d6df];
        return _0x279dc6;
    }, _0x5a47(_0x4a4e79, _0x1f6e4b);
}
import _0x25b584 from 'graphlib';
export let clusterDb = {};
let decendants = {}, parents = {};
export const clear = () => {
    decendants = {}, parents = {}, clusterDb = {};
};
const isDecendant = (_0x2ad1c6, _0x159d49) => {
        const _0x3116a1 = _0x5a47;
        log[_0x3116a1(0x177)](_0x3116a1(0x178), _0x159d49, '\x20', _0x2ad1c6, '\x20=\x20', decendants[_0x159d49][_0x3116a1(0x179)](_0x2ad1c6) >= 0x0);
        if (decendants[_0x159d49][_0x3116a1(0x179)](_0x2ad1c6) >= 0x0)
            return !![];
        return ![];
    }, edgeInCluster = (_0x48e06d, _0x1aa3e0) => {
        const _0x1f652b = _0x5a47;
        log[_0x1f652b(0x17a)](_0x1f652b(0x17b), _0x1aa3e0, _0x1f652b(0x17c), decendants[_0x1aa3e0]), log[_0x1f652b(0x17a)](_0x1f652b(0x17d), _0x48e06d);
        if (_0x48e06d['v'] === _0x1aa3e0)
            return ![];
        if (_0x48e06d['w'] === _0x1aa3e0)
            return ![];
        if (!decendants[_0x1aa3e0])
            return log[_0x1f652b(0x17e)](_0x1f652b(0x17f), _0x1aa3e0, _0x1f652b(0x180)), ![];
        log['info'](_0x1f652b(0x181));
        if (decendants[_0x1aa3e0][_0x1f652b(0x179)](_0x48e06d['v']) >= 0x0)
            return !![];
        if (isDecendant(_0x48e06d['v'], _0x1aa3e0))
            return !![];
        if (isDecendant(_0x48e06d['w'], _0x1aa3e0))
            return !![];
        if (decendants[_0x1aa3e0][_0x1f652b(0x179)](_0x48e06d['w']) >= 0x0)
            return !![];
        return ![];
    }, copy = (_0x2a01be, _0x344e99, _0x41e48b, _0x35d027) => {
        const _0x38151e = _0x5a47;
        log[_0x38151e(0x182)](_0x38151e(0x183), _0x2a01be, 'root', _0x35d027, 'data', _0x344e99[_0x38151e(0x184)](_0x2a01be), _0x35d027);
        const _0x586764 = _0x344e99[_0x38151e(0x185)](_0x2a01be) || [];
        _0x2a01be !== _0x35d027 && _0x586764[_0x38151e(0x186)](_0x2a01be), log[_0x38151e(0x182)](_0x38151e(0x187), _0x2a01be, _0x38151e(0x188), _0x586764), _0x586764[_0x38151e(0x189)](_0x59951a => {
            const _0x1fc49d = _0x38151e;
            if (_0x344e99[_0x1fc49d(0x185)](_0x59951a)[_0x1fc49d(0x18a)] > 0x0)
                copy(_0x59951a, _0x344e99, _0x41e48b, _0x35d027);
            else {
                const _0x16dbed = _0x344e99[_0x1fc49d(0x184)](_0x59951a);
                log['info'](_0x1fc49d(0x18b), _0x59951a, _0x1fc49d(0x18c), _0x35d027, _0x1fc49d(0x18d), _0x2a01be), _0x41e48b[_0x1fc49d(0x18e)](_0x59951a, _0x16dbed);
                _0x35d027 !== _0x344e99[_0x1fc49d(0x18f)](_0x59951a) && (log[_0x1fc49d(0x182)](_0x1fc49d(0x190), _0x59951a, _0x344e99[_0x1fc49d(0x18f)](_0x59951a)), _0x41e48b[_0x1fc49d(0x191)](_0x59951a, _0x344e99[_0x1fc49d(0x18f)](_0x59951a)));
                _0x2a01be !== _0x35d027 && _0x59951a !== _0x2a01be ? (log[_0x1fc49d(0x17e)](_0x1fc49d(0x190), _0x59951a, _0x2a01be), _0x41e48b['setParent'](_0x59951a, _0x2a01be)) : (log['info'](_0x1fc49d(0x192), _0x2a01be, _0x1fc49d(0x193), _0x35d027, 'data', _0x344e99[_0x1fc49d(0x184)](_0x2a01be), _0x35d027), log[_0x1fc49d(0x17e)](_0x1fc49d(0x194), _0x59951a, _0x1fc49d(0x195), _0x2a01be !== _0x35d027, _0x1fc49d(0x196), _0x59951a !== _0x2a01be));
                const _0x57767 = _0x344e99[_0x1fc49d(0x197)](_0x59951a);
                log[_0x1fc49d(0x17e)]('Copying\x20Edges', _0x57767), _0x57767[_0x1fc49d(0x189)](_0x26c673 => {
                    const _0x7e48aa = _0x1fc49d;
                    log[_0x7e48aa(0x17a)](_0x7e48aa(0x198), _0x26c673);
                    const _0x2fd2dd = _0x344e99[_0x7e48aa(0x199)](_0x26c673['v'], _0x26c673['w'], _0x26c673[_0x7e48aa(0x19a)]);
                    log[_0x7e48aa(0x17a)](_0x7e48aa(0x19b), _0x2fd2dd, _0x35d027);
                    try {
                        edgeInCluster(_0x26c673, _0x35d027) ? (log['info'](_0x7e48aa(0x19c), _0x26c673['v'], _0x26c673['w'], _0x2fd2dd, _0x26c673[_0x7e48aa(0x19a)]), _0x41e48b[_0x7e48aa(0x19d)](_0x26c673['v'], _0x26c673['w'], _0x2fd2dd, _0x26c673[_0x7e48aa(0x19a)]), log[_0x7e48aa(0x17a)](_0x7e48aa(0x19e), _0x41e48b['edges'](), _0x41e48b[_0x7e48aa(0x199)](_0x41e48b[_0x7e48aa(0x197)]()[0x0]))) : log['info'](_0x7e48aa(0x19f), _0x26c673['v'], '-->', _0x26c673['w'], _0x7e48aa(0x1a0), _0x35d027, '\x20clusterId:', _0x2a01be);
                    } catch (_0x1a14e3) {
                        log[_0x7e48aa(0x1a1)](_0x1a14e3);
                    }
                });
            }
            log[_0x1fc49d(0x17e)]('Removing\x20node', _0x59951a), _0x344e99[_0x1fc49d(0x1a2)](_0x59951a);
        });
    };
export const extractDecendants = (_0x309b47, _0x5a2eb3) => {
    const _0x23bc47 = _0x5a47, _0x26121d = _0x5a2eb3[_0x23bc47(0x185)](_0x309b47);
    let _0x5ed881 = [][_0x23bc47(0x1a3)](_0x26121d);
    for (let _0xcc5108 = 0x0; _0xcc5108 < _0x26121d[_0x23bc47(0x18a)]; _0xcc5108++) {
        parents[_0x26121d[_0xcc5108]] = _0x309b47, _0x5ed881 = _0x5ed881[_0x23bc47(0x1a3)](extractDecendants(_0x26121d[_0xcc5108], _0x5a2eb3));
    }
    return _0x5ed881;
};
export const validate = _0x103e28 => {
    const _0x263a13 = _0x5a47, _0x34d048 = _0x103e28[_0x263a13(0x197)]();
    log[_0x263a13(0x177)](_0x263a13(0x1a4), _0x34d048);
    for (let _0x52afae = 0x0; _0x52afae < _0x34d048[_0x263a13(0x18a)]; _0x52afae++) {
        if (_0x103e28[_0x263a13(0x185)](_0x34d048[_0x52afae]['v'])['length'] > 0x0)
            return log[_0x263a13(0x177)]('The\x20node\x20', _0x34d048[_0x52afae]['v'], _0x263a13(0x1a5)), ![];
        if (_0x103e28[_0x263a13(0x185)](_0x34d048[_0x52afae]['w'])['length'] > 0x0)
            return log[_0x263a13(0x177)](_0x263a13(0x1a6), _0x34d048[_0x52afae]['w'], _0x263a13(0x1a5)), ![];
    }
    return !![];
};
export const findNonClusterChild = (_0x1c144d, _0x34198d) => {
    const _0x3cef7f = _0x5a47;
    log[_0x3cef7f(0x177)](_0x3cef7f(0x1a7), _0x1c144d);
    const _0x13662b = _0x34198d[_0x3cef7f(0x185)](_0x1c144d);
    log['trace'](_0x3cef7f(0x1a8), _0x1c144d, _0x13662b);
    if (_0x13662b[_0x3cef7f(0x18a)] < 0x1)
        return log[_0x3cef7f(0x177)](_0x3cef7f(0x1a9), _0x1c144d), _0x1c144d;
    for (let _0x130d7f = 0x0; _0x130d7f < _0x13662b[_0x3cef7f(0x18a)]; _0x130d7f++) {
        const _0x166c46 = findNonClusterChild(_0x13662b[_0x130d7f], _0x34198d);
        if (_0x166c46)
            return log[_0x3cef7f(0x177)]('Found\x20replacement\x20for', _0x1c144d, _0x3cef7f(0x1aa), _0x166c46), _0x166c46;
    }
};
const getAnchorId = _0x43d563 => {
    const _0x364f81 = _0x5a47;
    if (!clusterDb[_0x43d563])
        return _0x43d563;
    if (!clusterDb[_0x43d563][_0x364f81(0x1ab)])
        return _0x43d563;
    if (clusterDb[_0x43d563])
        return clusterDb[_0x43d563]['id'];
    return _0x43d563;
};
export const adjustClustersAndEdges = (_0x4a86f6, _0x1886c5) => {
    const _0x4ff3b3 = _0x5a47;
    if (!_0x4a86f6 || _0x1886c5 > 0xa) {
        log[_0x4ff3b3(0x17e)](_0x4ff3b3(0x1ac));
        return;
    } else
        log[_0x4ff3b3(0x17e)](_0x4ff3b3(0x1ad));
    _0x4a86f6['nodes']()['forEach'](function (_0x1ae094) {
        const _0x585809 = _0x4ff3b3, _0x44dbe6 = _0x4a86f6[_0x585809(0x185)](_0x1ae094);
        _0x44dbe6[_0x585809(0x18a)] > 0x0 && (log[_0x585809(0x182)](_0x585809(0x1ae), _0x1ae094, _0x585809(0x1af), findNonClusterChild(_0x1ae094, _0x4a86f6)), decendants[_0x1ae094] = extractDecendants(_0x1ae094, _0x4a86f6), clusterDb[_0x1ae094] = {
            'id': findNonClusterChild(_0x1ae094, _0x4a86f6),
            'clusterData': _0x4a86f6[_0x585809(0x184)](_0x1ae094)
        });
    }), _0x4a86f6[_0x4ff3b3(0x188)]()[_0x4ff3b3(0x189)](function (_0x5ac453) {
        const _0xf4bd25 = _0x4ff3b3, _0xddd3 = _0x4a86f6[_0xf4bd25(0x185)](_0x5ac453), _0x54586a = _0x4a86f6[_0xf4bd25(0x197)]();
        _0xddd3[_0xf4bd25(0x18a)] > 0x0 ? (log[_0xf4bd25(0x17e)]('Cluster\x20identified', _0x5ac453, decendants), _0x54586a['forEach'](_0x10b003 => {
            const _0x4d8f6b = _0xf4bd25;
            if (_0x10b003['v'] !== _0x5ac453 && _0x10b003['w'] !== _0x5ac453) {
                const _0x14fc20 = isDecendant(_0x10b003['v'], _0x5ac453), _0x188a01 = isDecendant(_0x10b003['w'], _0x5ac453);
                _0x14fc20 ^ _0x188a01 && (log[_0x4d8f6b(0x182)](_0x4d8f6b(0x1b0), _0x10b003, _0x4d8f6b(0x1b1), _0x5ac453), log[_0x4d8f6b(0x182)]('Decendants\x20of\x20XXX\x20', _0x5ac453, ':\x20', decendants[_0x5ac453]), clusterDb[_0x5ac453]['externalConnections'] = !![]);
            }
        })) : log[_0xf4bd25(0x17e)](_0xf4bd25(0x1b2), _0x5ac453, decendants);
    }), _0x4a86f6[_0x4ff3b3(0x197)]()[_0x4ff3b3(0x189)](function (_0x3f5594) {
        const _0x43f8f3 = _0x4ff3b3, _0x5c0237 = _0x4a86f6[_0x43f8f3(0x199)](_0x3f5594);
        log['warn']('Edge\x20' + _0x3f5594['v'] + _0x43f8f3(0x1b3) + _0x3f5594['w'] + ':\x20' + JSON['stringify'](_0x3f5594)), log[_0x43f8f3(0x182)](_0x43f8f3(0x1b4) + _0x3f5594['v'] + _0x43f8f3(0x1b3) + _0x3f5594['w'] + ':\x20' + JSON[_0x43f8f3(0x1b5)](_0x4a86f6[_0x43f8f3(0x199)](_0x3f5594)));
        let _0x5a44ac = _0x3f5594['v'], _0xe1f4d0 = _0x3f5594['w'];
        log[_0x43f8f3(0x182)](_0x43f8f3(0x1b6), clusterDb, _0x43f8f3(0x1b7), _0x3f5594['v'], _0x3f5594['w'], _0x43f8f3(0x1b8), clusterDb[_0x3f5594['v']], '\x20---\x20', clusterDb[_0x3f5594['w']]);
        if (clusterDb[_0x3f5594['v']] || clusterDb[_0x3f5594['w']]) {
            log[_0x43f8f3(0x182)](_0x43f8f3(0x1b9), _0x3f5594['v'], _0x3f5594['w'], _0x3f5594['name']), _0x5a44ac = getAnchorId(_0x3f5594['v']), _0xe1f4d0 = getAnchorId(_0x3f5594['w']), _0x4a86f6['removeEdge'](_0x3f5594['v'], _0x3f5594['w'], _0x3f5594[_0x43f8f3(0x19a)]);
            if (_0x5a44ac !== _0x3f5594['v'])
                _0x5c0237['fromCluster'] = _0x3f5594['v'];
            if (_0xe1f4d0 !== _0x3f5594['w'])
                _0x5c0237['toCluster'] = _0x3f5594['w'];
            log['warn']('Fix\x20Replacing\x20with\x20XXX', _0x5a44ac, _0xe1f4d0, _0x3f5594[_0x43f8f3(0x19a)]), _0x4a86f6[_0x43f8f3(0x19d)](_0x5a44ac, _0xe1f4d0, _0x5c0237, _0x3f5594[_0x43f8f3(0x19a)]);
        }
    }), log[_0x4ff3b3(0x182)](_0x4ff3b3(0x1ba), _0x25b584[_0x4ff3b3(0x1bb)][_0x4ff3b3(0x1bc)](_0x4a86f6)), extractor(_0x4a86f6, 0x0), log[_0x4ff3b3(0x177)](clusterDb);
};
export const extractor = (_0x3a9e12, _0x9b832d) => {
    const _0x2c1096 = _0x5a47;
    log['warn'](_0x2c1096(0x1bd), _0x9b832d, _0x25b584['json'][_0x2c1096(0x1bc)](_0x3a9e12), _0x3a9e12[_0x2c1096(0x185)]('D'));
    if (_0x9b832d > 0xa) {
        log[_0x2c1096(0x1a1)](_0x2c1096(0x1be));
        return;
    }
    let _0x8aedbd = _0x3a9e12[_0x2c1096(0x188)](), _0x45bb25 = ![];
    for (let _0x80440f = 0x0; _0x80440f < _0x8aedbd['length']; _0x80440f++) {
        const _0x463e20 = _0x8aedbd[_0x80440f], _0x30032e = _0x3a9e12[_0x2c1096(0x185)](_0x463e20);
        _0x45bb25 = _0x45bb25 || _0x30032e['length'] > 0x0;
    }
    if (!_0x45bb25) {
        log[_0x2c1096(0x17e)](_0x2c1096(0x1bf), _0x3a9e12[_0x2c1096(0x188)]());
        return;
    }
    log[_0x2c1096(0x17e)](_0x2c1096(0x1c0), _0x8aedbd, _0x9b832d);
    for (let _0x396e87 = 0x0; _0x396e87 < _0x8aedbd[_0x2c1096(0x18a)]; _0x396e87++) {
        const _0x345c86 = _0x8aedbd[_0x396e87];
        log['debug'](_0x2c1096(0x1c1), _0x345c86, clusterDb, clusterDb[_0x345c86] && !clusterDb[_0x345c86][_0x2c1096(0x1ab)], !_0x3a9e12[_0x2c1096(0x18f)](_0x345c86), _0x3a9e12[_0x2c1096(0x184)](_0x345c86), _0x3a9e12[_0x2c1096(0x185)]('D'), _0x2c1096(0x1c2), _0x9b832d);
        if (!clusterDb[_0x345c86])
            log['debug']('Not\x20a\x20cluster', _0x345c86, _0x9b832d);
        else {
            if (!clusterDb[_0x345c86][_0x2c1096(0x1ab)] && _0x3a9e12[_0x2c1096(0x185)](_0x345c86) && _0x3a9e12[_0x2c1096(0x185)](_0x345c86)[_0x2c1096(0x18a)] > 0x0) {
                log['warn'](_0x2c1096(0x1c3), _0x345c86, _0x9b832d);
                const _0x48dd64 = _0x3a9e12['graph']();
                let _0x83e795 = _0x48dd64[_0x2c1096(0x1c4)] === 'TB' ? 'LR' : 'TB';
                clusterDb[_0x345c86] && (clusterDb[_0x345c86]['clusterData'] && clusterDb[_0x345c86][_0x2c1096(0x1c5)][_0x2c1096(0x1c6)] && (_0x83e795 = clusterDb[_0x345c86][_0x2c1096(0x1c5)][_0x2c1096(0x1c6)], log[_0x2c1096(0x182)](_0x2c1096(0x1c7), clusterDb[_0x345c86][_0x2c1096(0x1c5)][_0x2c1096(0x1c6)], _0x83e795)));
                const _0x4c00ed = new _0x25b584[(_0x2c1096(0x1c8))]({
                    'multigraph': !![],
                    'compound': !![]
                })[_0x2c1096(0x1c9)]({
                    'rankdir': _0x83e795,
                    'nodesep': 0x32,
                    'ranksep': 0x32,
                    'marginx': 0x8,
                    'marginy': 0x8
                })['setDefaultEdgeLabel'](function () {
                    return {};
                });
                log[_0x2c1096(0x182)](_0x2c1096(0x1ca), _0x25b584[_0x2c1096(0x1bb)]['write'](_0x3a9e12)), copy(_0x345c86, _0x3a9e12, _0x4c00ed, _0x345c86), _0x3a9e12[_0x2c1096(0x18e)](_0x345c86, {
                    'clusterNode': !![],
                    'id': _0x345c86,
                    'clusterData': clusterDb[_0x345c86]['clusterData'],
                    'labelText': clusterDb[_0x345c86][_0x2c1096(0x1cb)],
                    'graph': _0x4c00ed
                }), log['warn'](_0x2c1096(0x1cc), _0x345c86, ')', _0x25b584[_0x2c1096(0x1bb)][_0x2c1096(0x1bc)](_0x4c00ed)), log[_0x2c1096(0x17e)](_0x2c1096(0x1cd), _0x25b584['json']['write'](_0x3a9e12));
            } else
                log[_0x2c1096(0x182)](_0x2c1096(0x1ce), _0x345c86, '\x20**not\x20meeting\x20the\x20criteria\x20!externalConnections:', !clusterDb[_0x345c86][_0x2c1096(0x1ab)], _0x2c1096(0x1cf), !_0x3a9e12[_0x2c1096(0x18f)](_0x345c86), _0x2c1096(0x1d0), _0x3a9e12['children'](_0x345c86) && _0x3a9e12[_0x2c1096(0x185)](_0x345c86)['length'] > 0x0, _0x3a9e12[_0x2c1096(0x185)]('D'), _0x9b832d), log[_0x2c1096(0x17e)](clusterDb);
        }
    }
    _0x8aedbd = _0x3a9e12[_0x2c1096(0x188)](), log['warn'](_0x2c1096(0x1d1), _0x8aedbd);
    for (let _0x19b95a = 0x0; _0x19b95a < _0x8aedbd[_0x2c1096(0x18a)]; _0x19b95a++) {
        const _0x2062f3 = _0x8aedbd[_0x19b95a], _0x4fe6c8 = _0x3a9e12[_0x2c1096(0x184)](_0x2062f3);
        log[_0x2c1096(0x182)]('\x20Now\x20next\x20level', _0x2062f3, _0x4fe6c8), _0x4fe6c8[_0x2c1096(0x1d2)] && extractor(_0x4fe6c8['graph'], _0x9b832d + 0x1);
    }
};
const sorter = (_0x3605fe, _0x59f033) => {
    const _0x40c753 = _0x5a47;
    if (_0x59f033[_0x40c753(0x18a)] === 0x0)
        return [];
    let _0x403d13 = Object['assign'](_0x59f033);
    return _0x59f033[_0x40c753(0x189)](_0x19cf37 => {
        const _0x233af1 = _0x40c753, _0x3f9064 = _0x3605fe[_0x233af1(0x185)](_0x19cf37), _0x16eec9 = sorter(_0x3605fe, _0x3f9064);
        _0x403d13 = _0x403d13[_0x233af1(0x1a3)](_0x16eec9);
    }), _0x403d13;
};
export const sortNodesByHierarchy = _0x2dd362 => sorter(_0x2dd362, _0x2dd362[_0x146f22(0x185)]());
