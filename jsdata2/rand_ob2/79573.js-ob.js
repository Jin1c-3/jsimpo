const _0x5522 = [
    '1621muEfMt',
    '10570JKEbCO',
    '1ErCQIl',
    '706600aveusT',
    '729QAxLRI',
    '1vOLUBh',
    '109gxoTkM',
    '22891zsaPLV',
    'replace',
    '^//',
    'test',
    '533750TUcLbg',
    '812228IoZizB',
    '3oBGhYJ'
];
(function (_0x3136cf, _0x529467) {
    const _0x480b3f = _0x3a62;
    while (!![]) {
        try {
            const _0x11623c = -parseInt(_0x480b3f(0x105)) + -parseInt(_0x480b3f(0x106)) + -parseInt(_0x480b3f(0x107)) * -parseInt(_0x480b3f(0x108)) + -parseInt(_0x480b3f(0x109)) * -parseInt(_0x480b3f(0x10a)) + -parseInt(_0x480b3f(0x10b)) + parseInt(_0x480b3f(0x10c)) * parseInt(_0x480b3f(0x10d)) + parseInt(_0x480b3f(0x10e)) * parseInt(_0x480b3f(0x10f));
            if (_0x11623c === _0x529467)
                break;
            else
                _0x3136cf['push'](_0x3136cf['shift']());
        } catch (_0x1b5462) {
            _0x3136cf['push'](_0x3136cf['shift']());
        }
    }
}(_0x5522, 0x6ffcf));
function strNumDiscode(_0x54e993) {
    const _0x3c5931 = _0x3a62;
    return _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&forall;/g, '∀'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&part;/g, '∂'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&exist;/g, '∃'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&empty;/g, '∅'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&nabla;/g, '∇'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&isin;/g, '∈'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&notin;/g, '∉'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&ni;/g, '∋'), _0x54e993 = _0x54e993['replace'](/&prod;/g, '∏'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&sum;/g, '∑'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&minus;/g, '−'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&lowast;/g, '∗'), _0x54e993 = _0x54e993['replace'](/&radic;/g, '√'), _0x54e993 = _0x54e993['replace'](/&prop;/g, '∝'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&infin;/g, '∞'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&ang;/g, '∠'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&and;/g, '∧'), _0x54e993 = _0x54e993['replace'](/&or;/g, '∨'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&cap;/g, '∩'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&cup;/g, '∪'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&int;/g, '∫'), _0x54e993 = _0x54e993['replace'](/&there4;/g, '∴'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&sim;/g, '∼'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&cong;/g, '≅'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&asymp;/g, '≈'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&ne;/g, '≠'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&le;/g, '≤'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&ge;/g, '≥'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&sub;/g, '⊂'), _0x54e993 = _0x54e993['replace'](/&sup;/g, '⊃'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&nsub;/g, '⊄'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&sube;/g, '⊆'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&supe;/g, '⊇'), _0x54e993 = _0x54e993['replace'](/&oplus;/g, '⊕'), _0x54e993 = _0x54e993['replace'](/&otimes;/g, '⊗'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&perp;/g, '⊥'), _0x54e993 = _0x54e993[_0x3c5931(0x110)](/&sdot;/g, '⋅'), _0x54e993;
}
function strGreeceDiscode(_0x564e1d) {
    const _0xdd9b00 = _0x3a62;
    return _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Alpha;/g, 'Α'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Beta;/g, 'Β'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Gamma;/g, 'Γ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Delta;/g, 'Δ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Epsilon;/g, 'Ε'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Zeta;/g, 'Ζ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Eta;/g, 'Η'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Theta;/g, 'Θ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Iota;/g, 'Ι'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Kappa;/g, 'Κ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Lambda;/g, 'Λ'), _0x564e1d = _0x564e1d['replace'](/&Mu;/g, 'Μ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Nu;/g, 'Ν'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Xi;/g, 'Ν'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Omicron;/g, 'Ο'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Pi;/g, 'Π'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Rho;/g, 'Ρ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Sigma;/g, 'Σ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Tau;/g, 'Τ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Upsilon;/g, 'Υ'), _0x564e1d = _0x564e1d['replace'](/&Phi;/g, 'Φ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Chi;/g, 'Χ'), _0x564e1d = _0x564e1d['replace'](/&Psi;/g, 'Ψ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&Omega;/g, 'Ω'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&alpha;/g, 'α'), _0x564e1d = _0x564e1d['replace'](/&beta;/g, 'β'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&gamma;/g, 'γ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&delta;/g, 'δ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&epsilon;/g, 'ε'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&zeta;/g, 'ζ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&eta;/g, 'η'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&theta;/g, 'θ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&iota;/g, 'ι'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&kappa;/g, 'κ'), _0x564e1d = _0x564e1d['replace'](/&lambda;/g, 'λ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&mu;/g, 'μ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&nu;/g, 'ν'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&xi;/g, 'ξ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&omicron;/g, 'ο'), _0x564e1d = _0x564e1d['replace'](/&pi;/g, 'π'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&rho;/g, 'ρ'), _0x564e1d = _0x564e1d['replace'](/&sigmaf;/g, 'ς'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&sigma;/g, 'σ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&tau;/g, 'τ'), _0x564e1d = _0x564e1d['replace'](/&upsilon;/g, 'υ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&phi;/g, 'φ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&chi;/g, 'χ'), _0x564e1d = _0x564e1d['replace'](/&psi;/g, 'ψ'), _0x564e1d = _0x564e1d['replace'](/&omega;/g, 'ω'), _0x564e1d = _0x564e1d['replace'](/&thetasym;/g, 'ϑ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&upsih;/g, 'ϒ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&piv;/g, 'ϖ'), _0x564e1d = _0x564e1d[_0xdd9b00(0x110)](/&middot;/g, '·'), _0x564e1d;
}
function strcharacterDiscode(_0x5f2ddc) {
    const _0x63e09c = _0x3a62;
    return _0x5f2ddc = _0x5f2ddc[_0x63e09c(0x110)](/&nbsp;/g, '\x20'), _0x5f2ddc = _0x5f2ddc[_0x63e09c(0x110)](/&quot;/g, '\x27'), _0x5f2ddc = _0x5f2ddc[_0x63e09c(0x110)](/&amp;/g, '&'), _0x5f2ddc = _0x5f2ddc[_0x63e09c(0x110)](/&lt;/g, '<'), _0x5f2ddc = _0x5f2ddc[_0x63e09c(0x110)](/&gt;/g, '>'), _0x5f2ddc = _0x5f2ddc[_0x63e09c(0x110)](/&#8226;/g, '•'), _0x5f2ddc;
}
function strOtherDiscode(_0x29e285) {
    const _0x107ffe = _0x3a62;
    return _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&OElig;/g, 'Œ'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&oelig;/g, 'œ'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&Scaron;/g, 'Š'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&scaron;/g, 'š'), _0x29e285 = _0x29e285['replace'](/&Yuml;/g, 'Ÿ'), _0x29e285 = _0x29e285['replace'](/&fnof;/g, 'ƒ'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&circ;/g, 'ˆ'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&tilde;/g, '˜'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&ensp;/g, ''), _0x29e285 = _0x29e285['replace'](/&emsp;/g, ''), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&thinsp;/g, ''), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&zwnj;/g, ''), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&zwj;/g, ''), _0x29e285 = _0x29e285['replace'](/&lrm;/g, ''), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&rlm;/g, ''), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&ndash;/g, '–'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&mdash;/g, '—'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&lsquo;/g, '‘'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&rsquo;/g, '’'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&sbquo;/g, '‚'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&ldquo;/g, '“'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&rdquo;/g, '”'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&bdquo;/g, '„'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&dagger;/g, '†'), _0x29e285 = _0x29e285['replace'](/&Dagger;/g, '‡'), _0x29e285 = _0x29e285['replace'](/&bull;/g, '•'), _0x29e285 = _0x29e285['replace'](/&hellip;/g, '…'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&permil;/g, '‰'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&prime;/g, '′'), _0x29e285 = _0x29e285['replace'](/&Prime;/g, '″'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&lsaquo;/g, '‹'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&rsaquo;/g, '›'), _0x29e285 = _0x29e285['replace'](/&oline;/g, '‾'), _0x29e285 = _0x29e285['replace'](/&euro;/g, '€'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&trade;/g, '™'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&larr;/g, '←'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&uarr;/g, '↑'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&rarr;/g, '→'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&darr;/g, '↓'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&harr;/g, '↔'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&crarr;/g, '↵'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&lceil;/g, '⌈'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&rceil;/g, '⌉'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&lfloor;/g, '⌊'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&rfloor;/g, '⌋'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&loz;/g, '◊'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&spades;/g, '♠'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&clubs;/g, '♣'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&hearts;/g, '♥'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&diams;/g, '♦'), _0x29e285 = _0x29e285[_0x107ffe(0x110)](/&#39;/g, '\x27'), _0x29e285;
}
function strDiscode(_0x39aa20) {
    return _0x39aa20 = strNumDiscode(_0x39aa20), _0x39aa20 = strGreeceDiscode(_0x39aa20), _0x39aa20 = strcharacterDiscode(_0x39aa20), _0x39aa20 = strOtherDiscode(_0x39aa20), _0x39aa20;
}
function urlToHttpUrl(_0x233ba0, _0x5406a7) {
    const _0x18885a = _0x3a62, _0x213b24 = new RegExp(_0x18885a(0x111)), _0x25cc88 = _0x213b24[_0x18885a(0x112)](_0x233ba0);
    return _0x25cc88 && (_0x233ba0 = _0x5406a7 + ':' + _0x233ba0), _0x233ba0;
}
function _0x3a62(_0xfc7488, _0x2c251b) {
    return _0x3a62 = function (_0x552279, _0x3a627e) {
        _0x552279 = _0x552279 - 0x105;
        let _0x13df0d = _0x5522[_0x552279];
        return _0x13df0d;
    }, _0x3a62(_0xfc7488, _0x2c251b);
}
export default {
    'strDiscode': strDiscode,
    'urlToHttpUrl': urlToHttpUrl
};
