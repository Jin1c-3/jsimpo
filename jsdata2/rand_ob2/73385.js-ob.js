const _0x1fc7 = [
    'test3',
    'toEqual',
    'test3\x20processed',
    'Worker\x20executor\x20should\x20successfully\x20execute\x203\x20tasks,\x20use\x203\x20workers\x20and\x20terminate\x20each\x20worker',
    'Worker\x20executor\x20should\x20successfully\x20execute\x203\x20tasks\x20in\x20parallel\x20and\x20use\x203\x20workers',
    'Worker\x20executor\x20should\x20reject\x20task',
    'Error\x20on\x20init\x20worker',
    'rejects',
    'Worker\x20executor\x20should\x20emit\x20LOG\x20events',
    'LOG',
    'mock',
    'calls',
    'timeout',
    '/other/location/',
    '/other/location/test.js',
    '13581GPGIHr',
    '22pgqphu',
    '17471BHHfOt',
    '3nFwzNJ',
    '888288FsUhOD',
    '535829LqtgdH',
    '1UmwStY',
    '1313906FiArSL',
    '151429MKvrTl',
    '3eogXqw',
    '714569YYYMwX',
    'Worker',
    'onmessage',
    'contentLoaded',
    'postMessage',
    'terminate',
    'Worker\x20executor\x20should\x20successfully\x20execute\x20one\x20task',
    'not',
    'toBeUndefined',
    'test',
    'done',
    'error',
    'toBe',
    'test\x20processed',
    'toBeCalledWith',
    'toBeCalled',
    '/js/test.js',
    'Worker\x20executor\x20should\x20successfully\x20execute\x20two\x20tasks\x20in\x20parallel',
    'execute',
    'test1',
    'all',
    'resolves',
    'test1\x20processed',
    'test2\x20processed',
    'toBeCalledTimes',
    'Worker\x20executor\x20should\x20successfully\x20execute\x203\x20tasks\x20in\x20parallel\x20and\x20use\x20two\x20workers',
    'test2'
];
function _0xc38f(_0x2b725f, _0x5c6945) {
    return _0xc38f = function (_0x1fc71d, _0xc38f93) {
        _0x1fc71d = _0x1fc71d - 0xcd;
        let _0x1b8e8 = _0x1fc7[_0x1fc71d];
        return _0x1b8e8;
    }, _0xc38f(_0x2b725f, _0x5c6945);
}
const _0x3fc2a8 = _0xc38f;
(function (_0x3d1d11, _0x30888f) {
    const _0x911dd6 = _0xc38f;
    while (!![]) {
        try {
            const _0x392a6c = parseInt(_0x911dd6(0xcd)) * parseInt(_0x911dd6(0xce)) + -parseInt(_0x911dd6(0xcf)) * parseInt(_0x911dd6(0xd0)) + parseInt(_0x911dd6(0xd1)) + -parseInt(_0x911dd6(0xd2)) * parseInt(_0x911dd6(0xd3)) + parseInt(_0x911dd6(0xd4)) + -parseInt(_0x911dd6(0xd5)) * parseInt(_0x911dd6(0xd6)) + -parseInt(_0x911dd6(0xd7));
            if (_0x392a6c === _0x30888f)
                break;
            else
                _0x3d1d11['push'](_0x3d1d11['shift']());
        } catch (_0x3e9de9) {
            _0x3d1d11['push'](_0x3d1d11['shift']());
        }
    }
}(_0x1fc7, 0xb59c6));
import _0x43560f from './worker-executor';
function mockWorker({
    init: _0x4abfc6,
    postMessage: _0x3a3d06,
    terminate: _0x120699
} = {}) {
    const _0x13185a = _0xc38f;
    global[_0x13185a(0xd8)] = jest['fn'](function () {
        const _0x478dc8 = _0x13185a;
        return setImmediate(_0x4abfc6 && _0x4abfc6(this) || (() => this['onmessage'] && this[_0x478dc8(0xd9)]({ 'data': { 'type': _0x478dc8(0xda) } }))), this['onmessage'] = null, this[_0x478dc8(0xdb)] = _0x3a3d06 || function (_0xbda71d) {
            const _0x5dfc81 = _0x478dc8;
            setImmediate(() => this['onmessage'] && this[_0x5dfc81(0xd9)]({ 'data': _0xbda71d + '\x20processed' }));
        }, this[_0x478dc8(0xdc)] = _0x120699 || (() => {
        }), this;
    });
}
afterEach(() => {
    const _0x55705b = _0xc38f;
    delete global[_0x55705b(0xd8)];
}), it(_0x3fc2a8(0xdd), async () => {
    const _0x16ff41 = _0x3fc2a8, _0x5da89c = jest['fn']();
    mockWorker({ 'terminate': _0x5da89c });
    const _0x30ba49 = _0x43560f('test');
    expect(_0x30ba49)[_0x16ff41(0xde)][_0x16ff41(0xdf)]();
    const _0x5df2d4 = _0x30ba49['execute'](_0x16ff41(0xe0));
    expect(_0x5df2d4)[_0x16ff41(0xde)][_0x16ff41(0xdf)](), expect(_0x5df2d4[_0x16ff41(0xe1)])['not'][_0x16ff41(0xdf)]();
    const _0x1666dc = jest['fn']();
    _0x5df2d4['on']('done', _0x1666dc);
    const _0x38128e = jest['fn']();
    _0x5df2d4['on'](_0x16ff41(0xe2), _0x38128e), await expect(_0x5df2d4[_0x16ff41(0xe1)])['resolves'][_0x16ff41(0xe3)](_0x16ff41(0xe4)), expect(_0x1666dc)['toBeCalledTimes'](0x1), expect(_0x1666dc)[_0x16ff41(0xe5)]('test\x20processed'), expect(_0x38128e)[_0x16ff41(0xde)]['toBeCalled'](), expect(_0x5da89c)[_0x16ff41(0xde)][_0x16ff41(0xe6)](), expect(global[_0x16ff41(0xd8)])['toBeCalledTimes'](0x1), expect(global['Worker'])[_0x16ff41(0xe5)](_0x16ff41(0xe7));
}), it(_0x3fc2a8(0xe8), async () => {
    const _0x415f32 = _0x3fc2a8, _0x482953 = jest['fn']();
    mockWorker({ 'terminate': _0x482953 });
    const _0x5a8e1a = _0x43560f(_0x415f32(0xe0)), _0x511ffd = _0x5a8e1a[_0x415f32(0xe9)](_0x415f32(0xea)), _0x31cd77 = jest['fn']();
    _0x511ffd['on'](_0x415f32(0xe1), _0x31cd77);
    const _0x5ccb39 = jest['fn']();
    _0x511ffd['on']('error', _0x5ccb39);
    const _0x73d67b = _0x5a8e1a[_0x415f32(0xe9)]('test2'), _0x24535c = jest['fn']();
    _0x73d67b['on'](_0x415f32(0xe1), _0x24535c);
    const _0x1ae2c9 = jest['fn']();
    _0x73d67b['on']('error', _0x1ae2c9), await expect(Promise[_0x415f32(0xeb)]([
        _0x511ffd[_0x415f32(0xe1)],
        _0x73d67b['done']
    ]))[_0x415f32(0xec)]['toEqual']([
        _0x415f32(0xed),
        'test2\x20processed'
    ]), expect(_0x31cd77)['toBeCalledTimes'](0x1), expect(_0x31cd77)[_0x415f32(0xe5)](_0x415f32(0xed)), expect(_0x5ccb39)[_0x415f32(0xde)][_0x415f32(0xe6)](), expect(_0x24535c)['toBeCalledTimes'](0x1), expect(_0x24535c)[_0x415f32(0xe5)](_0x415f32(0xee)), expect(_0x1ae2c9)['not']['toBeCalled'](), expect(_0x482953)[_0x415f32(0xde)][_0x415f32(0xe6)](), expect(global[_0x415f32(0xd8)])[_0x415f32(0xef)](0x2);
}), it(_0x3fc2a8(0xf0), async () => {
    const _0x57e48c = _0x3fc2a8;
    mockWorker();
    const _0x2520c2 = _0x43560f(_0x57e48c(0xe0)), _0x5533e9 = _0x2520c2[_0x57e48c(0xe9)](_0x57e48c(0xea)), _0x454f7e = _0x2520c2[_0x57e48c(0xe9)](_0x57e48c(0xf1)), _0x2e7456 = _0x2520c2[_0x57e48c(0xe9)](_0x57e48c(0xf2));
    await expect(Promise[_0x57e48c(0xeb)]([
        _0x5533e9[_0x57e48c(0xe1)],
        _0x454f7e[_0x57e48c(0xe1)],
        _0x2e7456['done']
    ]))[_0x57e48c(0xec)][_0x57e48c(0xf3)]([
        _0x57e48c(0xed),
        _0x57e48c(0xee),
        _0x57e48c(0xf4)
    ]), expect(global[_0x57e48c(0xd8)])[_0x57e48c(0xef)](0x2);
}), it(_0x3fc2a8(0xf5), async () => {
    const _0x53d50c = _0x3fc2a8, _0x2fb10d = jest['fn']();
    mockWorker({ 'terminate': _0x2fb10d });
    const _0xb9d6ab = _0x43560f('test', { 'terminateWorker': !![] }), _0x1580d1 = _0xb9d6ab[_0x53d50c(0xe9)](_0x53d50c(0xea)), _0x599ee4 = _0xb9d6ab[_0x53d50c(0xe9)](_0x53d50c(0xf1)), _0x5c74e0 = _0xb9d6ab[_0x53d50c(0xe9)](_0x53d50c(0xf2));
    await expect(Promise[_0x53d50c(0xeb)]([
        _0x1580d1['done'],
        _0x599ee4[_0x53d50c(0xe1)],
        _0x5c74e0['done']
    ]))[_0x53d50c(0xec)][_0x53d50c(0xf3)]([
        'test1\x20processed',
        _0x53d50c(0xee),
        'test3\x20processed'
    ]), expect(_0x2fb10d)['toBeCalledTimes'](0x3), expect(global[_0x53d50c(0xd8)])[_0x53d50c(0xef)](0x3);
}), it(_0x3fc2a8(0xf6), async () => {
    const _0x17a9db = _0x3fc2a8;
    mockWorker();
    const _0x1bd80d = _0x43560f(_0x17a9db(0xe0), { 'concurrency': 0x3 }), _0x4dbb1c = _0x1bd80d[_0x17a9db(0xe9)](_0x17a9db(0xea)), _0x441679 = _0x1bd80d[_0x17a9db(0xe9)](_0x17a9db(0xf1)), _0x9673e6 = _0x1bd80d[_0x17a9db(0xe9)](_0x17a9db(0xf2));
    await expect(Promise[_0x17a9db(0xeb)]([
        _0x4dbb1c[_0x17a9db(0xe1)],
        _0x441679['done'],
        _0x9673e6[_0x17a9db(0xe1)]
    ]))[_0x17a9db(0xec)][_0x17a9db(0xf3)]([
        'test1\x20processed',
        _0x17a9db(0xee),
        _0x17a9db(0xf4)
    ]), expect(global[_0x17a9db(0xd8)])['toBeCalledTimes'](0x3);
}), it('Worker\x20executor\x20should\x20successfully\x20execute\x203\x20tasks\x20and\x20use\x201\x20worker', async () => {
    const _0x44e26f = _0x3fc2a8;
    mockWorker();
    const _0x4fd5cb = _0x43560f('test', { 'concurrency': 0x1 }), _0x4faf5c = _0x4fd5cb['execute'](_0x44e26f(0xea)), _0xbe7628 = _0x4fd5cb[_0x44e26f(0xe9)](_0x44e26f(0xf1)), _0x18e207 = _0x4fd5cb[_0x44e26f(0xe9)](_0x44e26f(0xf2));
    await expect(Promise[_0x44e26f(0xeb)]([
        _0x4faf5c[_0x44e26f(0xe1)],
        _0xbe7628['done'],
        _0x18e207[_0x44e26f(0xe1)]
    ]))[_0x44e26f(0xec)][_0x44e26f(0xf3)]([
        _0x44e26f(0xed),
        _0x44e26f(0xee),
        _0x44e26f(0xf4)
    ]), expect(global[_0x44e26f(0xd8)])[_0x44e26f(0xef)](0x1);
}), it(_0x3fc2a8(0xf7), async () => {
    const _0x35c643 = _0x3fc2a8, _0x37d8a8 = { 'message': _0x35c643(0xf8) };
    mockWorker({
        'init': () => {
            throw _0x37d8a8;
        }
    });
    const _0x120bf1 = _0x43560f('test'), _0x2c0adf = _0x120bf1['execute'](_0x35c643(0xe0)), _0x132a35 = jest['fn']();
    _0x2c0adf['on'](_0x35c643(0xe2), _0x132a35), await expect(_0x2c0adf['done'])[_0x35c643(0xf9)][_0x35c643(0xe3)](_0x37d8a8['message']), expect(_0x132a35)[_0x35c643(0xef)](0x1), expect(_0x132a35)[_0x35c643(0xe5)](_0x37d8a8);
}), it(_0x3fc2a8(0xfa), async () => {
    const _0x13fdc2 = _0x3fc2a8;
    mockWorker({
        'postMessage': function (_0xd36867) {
            setImmediate(() => {
                const _0x5625b8 = _0xc38f;
                for (let _0x5483ae = 0x0; _0x5483ae < 0x3; _0x5483ae++) {
                    this[_0x5625b8(0xd9)] && this[_0x5625b8(0xd9)]({
                        'data': {
                            'type': _0x5625b8(0xfb),
                            'data': _0x5483ae
                        }
                    });
                }
                this[_0x5625b8(0xd9)] && this[_0x5625b8(0xd9)]({ 'data': _0xd36867 + '\x20processed' }), setImmediate(() => this[_0x5625b8(0xd9)] && this[_0x5625b8(0xd9)]({
                    'data': {
                        'type': _0x5625b8(0xfb),
                        'data': 0x3
                    }
                }));
            });
        }
    });
    const _0x33f9b6 = _0x43560f(_0x13fdc2(0xe0)), _0x366361 = _0x33f9b6[_0x13fdc2(0xe9)]('test'), _0x4f9898 = jest['fn']();
    _0x366361['on']('done', _0x4f9898);
    const _0x20223f = jest['fn']();
    _0x366361['on'](_0x13fdc2(0xe2), _0x20223f);
    const _0x2fe2b6 = jest['fn']();
    _0x366361['on'](_0x13fdc2(0xfb), _0x2fe2b6), await expect(_0x366361[_0x13fdc2(0xe1)])[_0x13fdc2(0xec)]['toBe']('test\x20processed'), expect(_0x4f9898)['toBeCalledTimes'](0x1), expect(_0x4f9898)[_0x13fdc2(0xe5)]('test\x20processed'), expect(_0x20223f)[_0x13fdc2(0xde)][_0x13fdc2(0xe6)](), expect(_0x2fe2b6)[_0x13fdc2(0xef)](0x3);
    for (let _0x2503c1 = 0x0; _0x2503c1 < 0x3; _0x2503c1++) {
        expect(_0x2fe2b6[_0x13fdc2(0xfc)][_0x13fdc2(0xfd)][_0x2503c1][0x0])['toBe'](_0x2503c1);
    }
}), it('Worker\x20executor\x20should\x20reject\x20task\x20on\x20timeout', async () => {
    const _0x36c7c1 = _0x3fc2a8, _0x3b8f4b = jest['fn']();
    mockWorker({
        'postMessage': () => {
        },
        'terminate': _0x3b8f4b
    });
    const _0x13d0d4 = _0x43560f(_0x36c7c1(0xe0)), _0x5a81fb = _0x13d0d4[_0x36c7c1(0xe9)]('test', 0x0), _0x47c144 = jest['fn']();
    _0x5a81fb['on'](_0x36c7c1(0xe2), _0x47c144), await expect(_0x5a81fb[_0x36c7c1(0xe1)])[_0x36c7c1(0xf9)][_0x36c7c1(0xe3)](_0x36c7c1(0xfe)), expect(_0x47c144)[_0x36c7c1(0xef)](0x1), expect(_0x47c144[_0x36c7c1(0xfc)][_0x36c7c1(0xfd)][0x0][0x0])['toEqual']({ 'message': _0x36c7c1(0xfe) }), expect(_0x3b8f4b)[_0x36c7c1(0xef)](0x1);
}), it('Worker\x20executor\x20should\x20get\x20worker\x20from\x20specified\x20location', async () => {
    const _0x3014dd = _0x3fc2a8;
    mockWorker();
    const _0x495dfb = _0x43560f(_0x3014dd(0xe0), { 'location': _0x3014dd(0xff) }), _0x3cc0be = _0x495dfb[_0x3014dd(0xe9)](_0x3014dd(0xe0));
    await expect(_0x3cc0be[_0x3014dd(0xe1)])['resolves'][_0x3014dd(0xe3)](_0x3014dd(0xe4)), expect(global[_0x3014dd(0xd8)])['toBeCalledTimes'](0x1), expect(global[_0x3014dd(0xd8)])[_0x3014dd(0xe5)](_0x3014dd(0x100));
});
