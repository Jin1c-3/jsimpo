
var _0x1fe00e = _0x2922;
(function (_0xc11062, _0x33f227) {
    var _0x3a2641 = _0x2922;
    while (!![]) {
        try {
            var _0x4a5657 = parseInt(_0x3a2641(0xd8)) + parseInt(_0x3a2641(0xd9)) + -parseInt(_0x3a2641(0xda)) * parseInt(_0x3a2641(0xdb)) + -parseInt(_0x3a2641(0xdc)) * -parseInt(_0x3a2641(0xdd)) + -parseInt(_0x3a2641(0xde)) * parseInt(_0x3a2641(0xdf)) + -parseInt(_0x3a2641(0xe0)) + parseInt(_0x3a2641(0xe1));
            if (_0x4a5657 === _0x33f227)
                break;
            else
                _0xc11062['push'](_0xc11062['shift']());
        } catch (_0x5252d2) {
            _0xc11062['push'](_0xc11062['shift']());
        }
    }
}(_0x5e17, 0x43c4e * 0x1 + -0x824 + -0x20b72), Debug = debug[_0x1fe00e(0xe2)]);
var break_point_hit_count;
function listener(_0x12a545, _0x2afd56, _0x3e7029, _0x54791a) {
    var _0xc155f1 = _0x1fe00e, _0x552df4 = {
            'emokX': function (_0x5622cb, _0x29b1e3) {
                return _0x5622cb == _0x29b1e3;
            }
        };
    _0x552df4[_0xc155f1(0xe3)](_0x12a545, Debug[_0xc155f1(0xe4)][_0xc155f1(0xe5)]) && break_point_hit_count++;
}
function _0x2922(_0x335a08, _0x262282) {
    return _0x2922 = function (_0xe232e6, _0xb22f1b) {
        _0xe232e6 = _0xe232e6 - (-0x5 * 0x5f5 + -0x8e8 + 0x2789 * 0x1);
        var _0x1487b7 = _0x5e17[_0xe232e6];
        return _0x1487b7;
    }, _0x2922(_0x335a08, _0x262282);
}
;
Debug[_0x1fe00e(0xe6)](listener);
function f() {
    a = 0x1 * -0x233 + -0x169e + 0x18d2, b = 0xf17 + 0x1a8c + -0x1 * 0x29a1;
}
;
function g() {
    f();
}
function h() {
}
break_point_hit_count = 0x2537 + 0x1aa8 + 0x53 * -0xc5, bp1 = Debug[_0x1fe00e(0xe7)](f), f(), assertEquals(-0x2011 + -0x5 * 0x5bc + -0x3cbe * -0x1, break_point_hit_count), assertThrows(() => Debug[_0x1fe00e(0xe7)](f)), f(), assertEquals(0xb * -0x32d + 0x166 + 0x218b, break_point_hit_count), Debug[_0x1fe00e(0xe8)](bp1), f(), assertEquals(-0x5c9 + 0x15f4 * 0x1 + -0x1029, break_point_hit_count), break_point_hit_count = -0x1087 * -0x1 + -0x2cf * -0x5 + -0x1 * 0x1e92, bp1 = Debug['setBreakPoint'](g), g(), assertEquals(-0x462 + -0x1800 + 0xd * 0x22f, break_point_hit_count), assertThrows(() => Debug['setBreakPoint'](g)), g(), assertEquals(-0x2274 + 0x10b * -0x25 + 0x1 * 0x490d, break_point_hit_count), Debug[_0x1fe00e(0xe8)](bp1), g(), assertEquals(0x4 * -0x722 + -0x1f2c + -0x3bb6 * -0x1, break_point_hit_count), test_count = 0x1c81 + -0x2 * 0xc1a + -0x443, break_point_hit_count = -0x25bb + -0x56d + 0x2b28;
for (var i = 0xa7e + -0x2 * 0xe9 + -0x8ac; i < test_count; i++) {
    i == 0x1 * 0x85b + -0x148f + 0x47 * 0x2c ? Debug['setBreakPoint'](h) : assertThrows(() => Debug[_0x1fe00e(0xe7)](h)), h();
}
assertEquals(test_count, break_point_hit_count);
