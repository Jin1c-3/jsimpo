const _0x4a31 = ['@import "other.css"; body { color: "blue"; }', 'test.css', 'import', '@import "custom.css"; body { color: "red"; }', 'jAOvr', 'buZJr', 'mergeCssAsts', 'name', 'IChnw', 'DPHiK', 'minifier-css - hoist imports after comments from merged CSS AST\'s', 'comment', 'ZjVcZ', 'NhoFY', 'OwVDt', 'Fzagc', 'QiLvb', '877807hqwfeg', '1059361ZxGpCz', '1NgTAKj', '319343YmvAAs', '1385SIhnIE', '531IonYFa', '779616jUubxA', '1BapCUR', '1574161gRJwNy', '4QZXOBy', '709666maIZTv', 'add', 'minifier-css - CSS can be parsed properly into an AST', 'root', 'body', '"red"', 'type', 'LByof', 'nodes', 'length', 'rule', 'equal', 'selector', 'value', 'AvOzv', 'minifier-css - CSS AST can be converted back into a string', 'body { color: "red"}', 'stringifyCss', 'isNotNull', 'minifier-css - simple CSS minification', 'a \t\n{ color: red } \n', 'a \t\n{ color: red; margin: 1; } \n', 'a{color:red;margin:1}', 'a , p \t\n{ color: red; } \n', 'a,p{color:red}', 'removing empty rules', '*.my-class { color: #fff; }', 'removing universal selector', 'p+.my-class{color:#fff}', 'removing optional whitespace around "+" in selector', 'a {\n    font:12px \'Helvetica\',"Arial",\'Nautica\';\n    background:url("/some/nice/picture.png");\n}', 'removing quotes in font and url (if possible)', 'a{color:red}', 'minifyCss', 'UlrsB', 'PrKjy', 'only last one loses semicolon', 'LDbsD', 'EIcGz', 'more semicolons than needed', 'FYMkN', 'multiple selectors', 'bLBla', 'PLyRp', '.my-class{color:#fff}', 'bUumD', 'p>.my-class{color:#fff}', 'henYc', 'lMLoP', 'uvwcM', 'qKEEF', 'rNMYS', 'gpVTT', 'LOxUI', 'qoBgR', 'minifier-css - Multiple CSS AST\'s can be merged into a single CSS AST', 'body { color: "blue"; }', 'test2.css', 'ILJeg', 'yVCZW', 'parseCss', 'fFbvp', 'map', 'sources', 'minifier-css - hoist imports from merged CSS AST\'s'];
const _0x43460e = _0x1f88;

function _0x1f88(_0x1bd333, _0x2919f0) {
    return _0x1f88 = function (_0x460b7a, _0x1b9da8) {
        _0x460b7a = _0x460b7a - 236;
        const _0x5793a6 = _0x4a31[_0x460b7a];

        return _0x5793a6;
    }, _0x1f88(_0x1bd333, _0x2919f0);
}
(function (_0x2f8a14, _0x515f9e) {
    const _0x30c688 = _0x1f88;

    while (true) {
        try {
            const _0x330fd6 = parseInt(_0x30c688(0xec)) + -parseInt(_0x30c688(0xed)) * parseInt(_0x30c688(0xee)) + -parseInt(_0x30c688(0xef)) + -parseInt(_0x30c688(0xf0)) * parseInt(_0x30c688(0xf1)) + parseInt(_0x30c688(0xf2)) + parseInt(_0x30c688(0xf3)) * -parseInt(_0x30c688(0xf4)) + parseInt(_0x30c688(0xf5)) * parseInt(_0x30c688(0xf6));

            if (_0x330fd6 === _0x515f9e) break;else _0x2f8a14.push(_0x2f8a14.shift());
        } catch (_0x2d5f0c) {
            _0x2f8a14.push(_0x2f8a14.shift());
        }
    }
})(_0x4a31, 807787);
import { CssTools } from './minifier';
Tinytest[_0x43460e(0xf7)](_0x43460e(0xf8), _0x191cd3 => {
    const _0x265e45 = _0x43460e;
    const _0x368137 = {
        'LByof': _0x265e45(0xf9),
        'hiHZe': _0x265e45(0xfa),
        'IfuJh': 'decl',
        'AvOzv': _0x265e45(0xfb)
    };

    const _0xfc414d = CssTools.parseCss('body { color: "red"}');

    _0x191cd3.equal(_0xfc414d[_0x265e45(0xfc)], _0x368137[_0x265e45(0xfd)]), _0x191cd3.equal(_0xfc414d[_0x265e45(0xfe)][_0x265e45(0xff)], 1);

    const _0x265fcf = _0xfc414d[_0x265e45(0xfe)][0];

    _0x191cd3.equal(_0x265fcf[_0x265e45(0xfc)], _0x265e45(0x100)), _0x191cd3[_0x265e45(0x101)](_0x265fcf[_0x265e45(0x102)], _0x368137.hiHZe), _0x191cd3[_0x265e45(0x101)](_0x265fcf[_0x265e45(0xfe)][_0x265e45(0xff)], 1);

    const _0x75fcb2 = _0x265fcf[_0x265e45(0xfe)][0];

    _0x191cd3.equal(_0x75fcb2[_0x265e45(0xfc)], _0x368137.IfuJh), _0x191cd3[_0x265e45(0x101)](_0x75fcb2.prop, 'color'), _0x191cd3[_0x265e45(0x101)](_0x75fcb2[_0x265e45(0x103)], _0x368137[_0x265e45(0x104)]);
}), Tinytest[_0x43460e(0xf7)](_0x43460e(0x105), _0x13fc32 => {
    const _0x482d99 = _0x43460e;

    const _0x3011bb = _0x482d99(0x106);

    const _0x41d2dd = CssTools.parseCss(_0x3011bb);

    const _0x49c517 = CssTools[_0x482d99(0x107)](_0x41d2dd, { 'sourcemap': true });

    _0x13fc32[_0x482d99(0x101)](_0x3011bb, _0x49c517.code), _0x13fc32[_0x482d99(0x108)](_0x49c517.map);
}), Tinytest[_0x43460e(0xf7)](_0x43460e(0x109), _0x5e7821 => {
    const _0x52a3a7 = _0x43460e;
    const _0x4d54e4 = {
        'UlrsB': _0x52a3a7(0x10a),
        'RLNTE': 'whitespace check',
        'XCmjb': _0x52a3a7(0x10b),
        'PrKjy': _0x52a3a7(0x10c),
        'LDbsD': function (_0x2b5cef, _0x591cdb, _0x158344, _0xb2d578) {
            return _0x2b5cef(_0x591cdb, _0x158344, _0xb2d578);
        },
        'EIcGz': 'a \t\n{ color: red;;; margin: 1;;; } \n',
        'lEoeu': _0x52a3a7(0x10d),
        'FYMkN': _0x52a3a7(0x10e),
        'xwORR': 'body {}',
        'bLBla': _0x52a3a7(0x10f),
        'PLyRp': _0x52a3a7(0x110),
        'ByWqL': _0x52a3a7(0x111),
        'bUumD': 'p > *.my-class { color: #fff; }',
        'henYc': 'removing optional whitespace around ">" in selector',
        'lMLoP': _0x52a3a7(0x112),
        'uvwcM': _0x52a3a7(0x113),
        'qKEEF': _0x52a3a7(0x114),
        'rNMYS': _0x52a3a7(0x115),
        'gpVTT': '/* no comments */ a { color: red; }',
        'LOxUI': _0x52a3a7(0x116),
        'qoBgR': 'remove comments'
    };

    const _0x567dbc = (_0xd94f04, _0x47ffdb, _0x43c8ce) => {
        const _0x30815c = _0x52a3a7;

        _0x5e7821[_0x30815c(0x101)](CssTools[_0x30815c(0x117)](_0xd94f04)[0], _0x47ffdb, _0x43c8ce);
    };

    _0x567dbc(_0x4d54e4[_0x52a3a7(0x118)], _0x52a3a7(0x116), _0x4d54e4.RLNTE), _0x567dbc(_0x4d54e4.XCmjb, _0x4d54e4[_0x52a3a7(0x119)], _0x52a3a7(0x11a)), _0x4d54e4[_0x52a3a7(0x11b)](_0x567dbc, _0x4d54e4[_0x52a3a7(0x11c)], _0x4d54e4.PrKjy, _0x52a3a7(0x11d)), _0x4d54e4[_0x52a3a7(0x11b)](_0x567dbc, _0x4d54e4.lEoeu, _0x4d54e4[_0x52a3a7(0x11e)], _0x52a3a7(0x11f)), _0x567dbc(_0x4d54e4.xwORR, '', _0x4d54e4[_0x52a3a7(0x120)]), _0x567dbc(_0x4d54e4[_0x52a3a7(0x121)], _0x52a3a7(0x122), _0x4d54e4.ByWqL), _0x4d54e4[_0x52a3a7(0x11b)](_0x567dbc, _0x4d54e4[_0x52a3a7(0x123)], _0x52a3a7(0x124), _0x4d54e4[_0x52a3a7(0x125)]), _0x4d54e4.LDbsD(_0x567dbc, 'p +  *.my-class { color: #fff; }', _0x4d54e4[_0x52a3a7(0x126)], _0x4d54e4[_0x52a3a7(0x127)]), _0x4d54e4.LDbsD(_0x567dbc, _0x4d54e4[_0x52a3a7(0x128)], 'a{font:12px Helvetica,Arial,Nautica;background:url(/some/nice/picture.png)}', _0x4d54e4[_0x52a3a7(0x129)]), _0x567dbc(_0x4d54e4[_0x52a3a7(0x12a)], _0x4d54e4[_0x52a3a7(0x12b)], _0x4d54e4[_0x52a3a7(0x12c)]);
}), Tinytest[_0x43460e(0xf7)](_0x43460e(0x12d), _0x11def7 => {
    const _0x42cc08 = _0x43460e;
    const _0x4c3cdd = {
        'yfuci': '@import "custom.css"; body { color: "red"; }',
        'ILJeg': _0x42cc08(0x12e),
        'yVCZW': 'test.css',
        'fFbvp': _0x42cc08(0x12f)
    };
    const _0x3e12b9 = _0x4c3cdd.yfuci;

    const _0x2e2756 = _0x4c3cdd[_0x42cc08(0x130)];

    const _0x1d32aa = CssTools.parseCss(_0x3e12b9, { 'from': _0x4c3cdd[_0x42cc08(0x131)] });

    const _0x154a1d = CssTools[_0x42cc08(0x132)](_0x2e2756, { 'from': _0x4c3cdd[_0x42cc08(0x133)] });

    const _0x242860 = CssTools.mergeCssAsts([CssTools.parseCss(_0x3e12b9, { 'from': _0x4c3cdd[_0x42cc08(0x131)] }), CssTools[_0x42cc08(0x132)](_0x2e2756, { 'from': _0x4c3cdd[_0x42cc08(0x133)] })]);

    const _0x1bf959 = CssTools[_0x42cc08(0x107)](_0x242860, {
        'sourcemap': true,
        'inputSourcemaps': false
    });

    _0x11def7[_0x42cc08(0x101)](_0x242860[_0x42cc08(0xfe)][_0x42cc08(0xff)], 3), _0x11def7[_0x42cc08(0x101)](_0x1bf959[_0x42cc08(0x134)].sources[_0x42cc08(0xff)], 2), _0x11def7[_0x42cc08(0x101)](_0x1bf959.map[_0x42cc08(0x135)][0], _0x4c3cdd[_0x42cc08(0x131)]);
}), Tinytest.add(_0x43460e(0x136), _0x386570 => {
    const _0x4288c2 = _0x43460e;
    const _0x2dfab4 = {
        'jAOvr': _0x4288c2(0x137),
        'wrsWo': _0x4288c2(0x138),
        'buZJr': _0x4288c2(0x12f),
        'IChnw': _0x4288c2(0x139),
        'DPHiK': _0x4288c2(0x100)
    };

    const _0x40c0c8 = _0x4288c2(0x13a);

    const _0x42646f = _0x2dfab4[_0x4288c2(0x13b)];

    const _0x58f411 = CssTools.parseCss(_0x40c0c8, { 'from': _0x2dfab4.wrsWo });

    const _0x38cf9a = CssTools[_0x4288c2(0x132)](_0x42646f, { 'from': _0x2dfab4[_0x4288c2(0x13c)] });

    const _0x25d4a7 = CssTools[_0x4288c2(0x13d)]([CssTools.parseCss(_0x40c0c8, { 'from': _0x2dfab4.wrsWo }), CssTools[_0x4288c2(0x132)](_0x42646f, { 'from': _0x2dfab4[_0x4288c2(0x13c)] })]);

    const _0x1d86e4 = CssTools[_0x4288c2(0x107)](_0x25d4a7, {
        'sourcemap': true,
        'inputSourcemaps': false
    });

    _0x386570[_0x4288c2(0x101)](_0x25d4a7.nodes[_0x4288c2(0xff)], 4), _0x386570[_0x4288c2(0x101)](_0x25d4a7[_0x4288c2(0xfe)][0][_0x4288c2(0x13e)], _0x2dfab4[_0x4288c2(0x13f)]), _0x386570[_0x4288c2(0x101)](_0x25d4a7[_0x4288c2(0xfe)][1][_0x4288c2(0x13e)], _0x4288c2(0x139)), _0x386570[_0x4288c2(0x101)](_0x25d4a7[_0x4288c2(0xfe)][2][_0x4288c2(0xfc)], _0x2dfab4[_0x4288c2(0x140)]), _0x386570[_0x4288c2(0x101)](_0x25d4a7[_0x4288c2(0xfe)][3].type, _0x2dfab4.DPHiK), _0x386570[_0x4288c2(0x101)](_0x1d86e4.map.sources[_0x4288c2(0xff)], 2), _0x386570[_0x4288c2(0x101)](_0x1d86e4.map[_0x4288c2(0x135)][0], _0x4288c2(0x138));
}), Tinytest[_0x43460e(0xf7)](_0x43460e(0x141), _0x52f94b => {
    const _0x5231b2 = _0x43460e;
    const _0xbfa7ce = {
        'VRsUg': '@import "custom.css"; body { color: "red"; }',
        'ZjVcZ': '/* comment */ @import "other.css"; body { color: "blue"; }',
        'NhoFY': _0x5231b2(0x12f),
        'OwVDt': _0x5231b2(0x142),
        'Fzagc': 'rule',
        'QiLvb': 'test.css'
    };
    const _0x85c0c9 = _0xbfa7ce.VRsUg;

    const _0x2b1af5 = _0xbfa7ce[_0x5231b2(0x143)];

    const _0xc010fb = CssTools[_0x5231b2(0x132)](_0x85c0c9, { 'from': _0x5231b2(0x138) });

    const _0x4b40b5 = CssTools[_0x5231b2(0x132)](_0x2b1af5, { 'from': _0xbfa7ce[_0x5231b2(0x144)] });

    const _0x4adde0 = CssTools.mergeCssAsts([CssTools[_0x5231b2(0x132)](_0x85c0c9, { 'from': _0x5231b2(0x138) }), CssTools[_0x5231b2(0x132)](_0x2b1af5, { 'from': _0xbfa7ce[_0x5231b2(0x144)] })]);

    const _0x42833b = CssTools[_0x5231b2(0x107)](_0x4adde0, {
        'sourcemap': true,
        'inputSourcemaps': false
    });

    _0x52f94b[_0x5231b2(0x101)](_0x4adde0[_0x5231b2(0xfe)][_0x5231b2(0xff)], 5), _0x52f94b[_0x5231b2(0x101)](_0x4adde0.nodes[0][_0x5231b2(0x13e)], _0x5231b2(0x139)), _0x52f94b[_0x5231b2(0x101)](_0x4adde0[_0x5231b2(0xfe)][1][_0x5231b2(0xfc)], _0xbfa7ce[_0x5231b2(0x145)]), _0x52f94b[_0x5231b2(0x101)](_0x4adde0[_0x5231b2(0xfe)][2][_0x5231b2(0x13e)], 'import'), _0x52f94b[_0x5231b2(0x101)](_0x4adde0.nodes[3][_0x5231b2(0xfc)], _0xbfa7ce.Fzagc), _0x52f94b[_0x5231b2(0x101)](_0x4adde0.nodes[4].type, _0xbfa7ce[_0x5231b2(0x146)]), _0x52f94b.equal(_0x42833b[_0x5231b2(0x134)][_0x5231b2(0x135)][_0x5231b2(0xff)], 2), _0x52f94b[_0x5231b2(0x101)](_0x42833b[_0x5231b2(0x134)][_0x5231b2(0x135)][0], _0xbfa7ce[_0x5231b2(0x147)]);
});
