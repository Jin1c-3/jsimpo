const source=`function g(a,b,c){return'bye'};class Tree{};class Flower extends Tree{};var f=new Flower();f[Symbol.toStringTag]='Dog';g({},[],f);g(3,2.3,{a:42});`;let{session,contextGroup,Protocol}=InspectorTest.start("Test collecting "+"type profile data with Profiler.takeTypeProfile.");(async function testTypeProfile(){await Protocol.Profiler.enable();await Protocol.Profiler.startTypeProfile();Protocol.Runtime.enable();let{result:{scriptId}}=await Protocol.Runtime.compileScript({expression:source,sourceURL:arguments.callee.name,persistScript:true});Protocol.Runtime.runScript({scriptId});await Protocol.Profiler.startTypeProfile();let typeProfiles=await Protocol.Profiler.takeTypeProfile();await session.logTypeProfile(typeProfiles.result.result[0],source);Protocol.Profiler.stopTypeProfile();Protocol.Profiler.disable();await Protocol.Runtime.disable();InspectorTest.completeTest()})();