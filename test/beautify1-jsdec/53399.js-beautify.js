"use strict";const astUtils=require("./utils/ast-utils");function isCallOrNonVariadicApply(node){const callee=astUtils.skipChainExpression(node.callee);return(callee.type==="MemberExpression"&&callee.property.type==="Identifier"&&callee.computed===false&&((callee.property.name==="call"&&node.arguments.length>=1)||(callee.property.name==="apply"&&node.arguments.length===2&&node.arguments[1].type==="ArrayExpression")))}function isValidThisArg(expectedThis,thisArg,sourceCode){if(!expectedThis){return astUtils.isNullOrUndefined(thisArg)}return astUtils.equalTokens(expectedThis,thisArg,sourceCode)}module.exports={meta:{type:"suggestion",docs:{description:"disallow unnecessary calls to `.call()` and `.apply()`",category:"Best Practices",recommended:false,url:"https://eslint.org/docs/rules/no-useless-call"},schema:[],messages:{unnecessaryCall:"Unnecessary '.{{name}}()'."}},create(context){const sourceCode=context.getSourceCode();return{CallExpression(node){if(!isCallOrNonVariadicApply(node)){return}const callee=astUtils.skipChainExpression(node.callee);const applied=astUtils.skipChainExpression(callee.object);const expectedThis=(applied.type==="MemberExpression")?applied.object:null;const thisArg=node.arguments[0];if(isValidThisArg(expectedThis,thisArg,sourceCode)){context.report({node,messageId:"unnecessaryCall",data:{name:callee.property.name}})}}}}};