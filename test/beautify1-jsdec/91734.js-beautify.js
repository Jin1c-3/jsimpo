const fs=require(`fs-extra`)const path=require(`path`)const{promisifiedSpawn}=require(`../utils/promisified-spawn`)const{registryUrl}=require(`./verdaccio-config`)const NPMRCContent=`${registryUrl.replace(/https?:/g,``)}/:_authToken="gatsby-dev"`const{getMonorepoPackageJsonPath,}=require(`../utils/get-monorepo-package-json-path`)const{registerCleanupTask}=require(`./cleanup-tasks`)const adjustPackageJson=({monoRepoPackageJsonPath,packageName,versionPostFix,packagesToPublish,ignorePackageJSONChanges,root,})=>{const monorepoPKGjsonString=fs.readFileSync(monoRepoPackageJsonPath,`utf-8`)const monorepoPKGjson=JSON.parse(monorepoPKGjsonString)monorepoPKGjson.version=`${monorepoPKGjson.version}-dev-${versionPostFix}`packagesToPublish.forEach(packageThatWillBePublished=>{if(monorepoPKGjson.dependencies&&monorepoPKGjson.dependencies[packageThatWillBePublished]){const currentVersion=JSON.parse(fs.readFileSync(getMonorepoPackageJsonPath({packageName:packageThatWillBePublished,root,}),`utf-8`)).version monorepoPKGjson.dependencies[packageThatWillBePublished]=`${currentVersion}-dev-${versionPostFix}`}})const temporaryMonorepoPKGjsonString=JSON.stringify(monorepoPKGjson)const unignorePackageJSONChanges=ignorePackageJSONChanges(packageName,[monorepoPKGjsonString,temporaryMonorepoPKGjsonString,])fs.outputFileSync(monoRepoPackageJsonPath,temporaryMonorepoPKGjsonString)return{newPackageVersion:monorepoPKGjson.version,unadjustPackageJson:registerCleanupTask(()=>{fs.outputFileSync(monoRepoPackageJsonPath,monorepoPKGjsonString)unignorePackageJSONChanges()}),}}const createTemporaryNPMRC=({pathToPackage})=>{const NPMRCPath=path.join(pathToPackage,`.npmrc`)fs.outputFileSync(NPMRCPath,NPMRCContent)return registerCleanupTask(()=>{fs.removeSync(NPMRCPath)})}const publishPackage=async({packageName,packagesToPublish,root,versionPostFix,ignorePackageJSONChanges,})=>{const monoRepoPackageJsonPath=getMonorepoPackageJsonPath({packageName,root,})const{unadjustPackageJson,newPackageVersion}=adjustPackageJson({monoRepoPackageJsonPath,packageName,root,versionPostFix,packagesToPublish,ignorePackageJSONChanges,})const pathToPackage=path.dirname(monoRepoPackageJsonPath)const uncreateTemporaryNPMRC=createTemporaryNPMRC({pathToPackage})const publishCmd=[`npm`,[`publish`,`--tag`,`gatsby-dev`,`--registry=${registryUrl}`],{cwd:pathToPackage,},]console.log(`Publishing ${packageName}@${newPackageVersion}to local registry`)try{await promisifiedSpawn(publishCmd)console.log(`Published ${packageName}@${newPackageVersion}to local registry`)}catch(e){console.error(`Failed to publish ${packageName}@${newPackageVersion}`,e)process.exit(1)}uncreateTemporaryNPMRC()unadjustPackageJson()return newPackageVersion}exports.publishPackage=publishPackage