var ALIGN_CONST=require('../../display/align/const');var Axes=require('./lib/geometry/Axes');var Bodies=require('./lib/factory/Bodies');var Body=require('./lib/body/Body');var BodyBounds=require('./BodyBounds');var Bounds=require('./lib/geometry/Bounds');var Class=require('../../utils/Class');var Composite=require('./lib/body/Composite');var Composites=require('./lib/factory/Composites');var Constraint=require('./lib/constraint/Constraint');var Detector=require('./lib/collision/Detector');var DistanceBetween=require('../../math/distance/DistanceBetween');var Factory=require('./Factory');var GetFastValue=require('../../utils/object/GetFastValue');var GetValue=require('../../utils/object/GetValue');var Grid=require('./lib/collision/Grid');var MatterAttractors=require('./lib/plugins/MatterAttractors');var MatterCollisionEvents=require('./lib/plugins/MatterCollisionEvents');var MatterLib=require('./lib/core/Matter');var MatterWrap=require('./lib/plugins/MatterWrap');var Merge=require('../../utils/object/Merge');var Pair=require('./lib/collision/Pair');var Pairs=require('./lib/collision/Pairs');var Plugin=require('./lib/core/Plugin');var PluginCache=require('../../plugins/PluginCache');var Query=require('./lib/collision/Query');var Resolver=require('./lib/collision/Resolver');var SAT=require('./lib/collision/SAT');var SceneEvents=require('../../scene/events');var Svg=require('./lib/geometry/Svg');var Vector=require('./lib/geometry/Vector');var Vertices=require('./lib/geometry/Vertices');var World=require('./World');var MatterPhysics=new Class({initialize:function MatterPhysics(scene){this.scene=scene;this.systems=scene.sys;this.config=this.getConfig();this.world;this.add;this.bodyBounds;this.body=Body;this.composite=Composite;this.detector=Detector;this.grid=Grid;this.pair=Pair;this.pairs=Pairs;this.query=Query;this.resolver=Resolver;this.sat=SAT;this.constraint=Constraint;this.bodies=Bodies;this.composites=Composites;this.axes=Axes;this.bounds=Bounds;this.svg=Svg;this.vector=Vector;this.vertices=Vertices;this.verts=Vertices;this._tempVec2=Vector.create();if(GetValue(this.config,'plugins.collisionevents',true)){this.enableCollisionEventsPlugin()}if(GetValue(this.config,'plugins.attractors',false)){this.enableAttractorPlugin()}if(GetValue(this.config,'plugins.wrap',false)){this.enableWrapPlugin()}Resolver._restingThresh=GetValue(this.config,'restingThresh',4);Resolver._restingThreshTangent=GetValue(this.config,'restingThreshTangent',6);Resolver._positionDampen=GetValue(this.config,'positionDampen',0.9);Resolver._positionWarming=GetValue(this.config,'positionWarming',0.8);Resolver._frictionNormalMultiplier=GetValue(this.config,'frictionNormalMultiplier',5);scene.sys.events.once(SceneEvents.BOOT,this.boot,this);scene.sys.events.on(SceneEvents.START,this.start,this)},boot:function(){this.world=new World(this.scene,this.config);this.add=new Factory(this.world);this.bodyBounds=new BodyBounds();this.systems.events.once(SceneEvents.DESTROY,this.destroy,this)},start:function(){if(!this.world){this.world=new World(this.scene,this.config);this.add=new Factory(this.world)}var eventEmitter=this.systems.events;eventEmitter.on(SceneEvents.UPDATE,this.world.update,this.world);eventEmitter.on(SceneEvents.POST_UPDATE,this.world.postUpdate,this.world);eventEmitter.once(SceneEvents.SHUTDOWN,this.shutdown,this)},getConfig:function(){var gameConfig=this.systems.game.config.physics;var sceneConfig=this.systems.settings.physics;var config=Merge(GetFastValue(sceneConfig,'matter',{}),GetFastValue(gameConfig,'matter',{}));return config},enableAttractorPlugin:function(){Plugin.register(MatterAttractors);Plugin.use(MatterLib,MatterAttractors);return this},enableWrapPlugin:function(){Plugin.register(MatterWrap);Plugin.use(MatterLib,MatterWrap);return this},enableCollisionEventsPlugin:function(){Plugin.register(MatterCollisionEvents);Plugin.use(MatterLib,MatterCollisionEvents);return this},pause:function(){return this.world.pause()},resume:function(){return this.world.resume()},set60Hz:function(){this.world.getDelta=this.world.update60Hz;this.world.autoUpdate=true;return this},set30Hz:function(){this.world.getDelta=this.world.update30Hz;this.world.autoUpdate=true;return this},step:function(delta,correction){this.world.step(delta,correction)},containsPoint:function(body,x,y){body=this.getMatterBodies(body);var position=Vector.create(x,y);var result=Query.point(body,position);return(result.length>0)?true:false},intersectPoint:function(x,y,bodies){bodies=this.getMatterBodies(bodies);var position=Vector.create(x,y);var output=[];var result=Query.point(bodies,position);result.forEach(function(body){if(output.indexOf(body)===-1){output.push(body)}});return output},intersectRect:function(x,y,width,height,outside,bodies){if(outside===undefined){outside=false}bodies=this.getMatterBodies(bodies);var bounds={min:{x:x,y:y},max:{x:x+width,y:y+height}};var output=[];var result=Query.region(bodies,bounds,outside);result.forEach(function(body){if(output.indexOf(body)===-1){output.push(body)}});return output},intersectRay:function(x1,y1,x2,y2,rayWidth,bodies){if(rayWidth===undefined){rayWidth=1}bodies=this.getMatterBodies(bodies);var result=[];var collisions=Query.ray(bodies,Vector.create(x1,y1),Vector.create(x2,y2),rayWidth);for(var i=0;i<collisions.length;i++){result.push(collisions[i].body)}return result},intersectBody:function(body,bodies){bodies=this.getMatterBodies(bodies);var result=[];var collisions=Query.collides(body,bodies);for(var i=0;i<collisions.length;i++){var pair=collisions[i];if(pair.bodyA===body){result.push(pair.bodyB)}else{result.push(pair.bodyA)}}return result},overlap:function(target,bodies,overlapCallback,processCallback,callbackContext){if(overlapCallback===undefined){overlapCallback=null}if(processCallback===undefined){processCallback=null}if(callbackContext===undefined){callbackContext=overlapCallback}if(!Array.isArray(target)){target=[target]}target=this.getMatterBodies(target);bodies=this.getMatterBodies(bodies);var match=false;for(var i=0;i<target.length;i++){var entry=target[i];var collisions=Query.collides(entry,bodies);for(var c=0;c<collisions.length;c++){var info=collisions[c];var bodyB=(info.bodyA.id===entry.id)?info.bodyB:info.bodyA;if(!processCallback||processCallback.call(callbackContext,entry,bodyB,info)){match=true;if(overlapCallback){overlapCallback.call(callbackContext,entry,bodyB,info)}else if(!processCallback){return true}}}}return match},setCollisionCategory:function(bodies,value){bodies=this.getMatterBodies(bodies);bodies.forEach(function(body){body.collisionFilter.category=value});return this},setCollisionGroup:function(bodies,value){bodies=this.getMatterBodies(bodies);bodies.forEach(function(body){body.collisionFilter.group=value});return this},setCollidesWith:function(bodies,categories){bodies=this.getMatterBodies(bodies);var flags=0;if(!Array.isArray(categories)){flags=categories}else{for(var i=0;i<categories.length;i++){flags|=categories[i]}}bodies.forEach(function(body){body.collisionFilter.mask=flags});return this},getMatterBodies:function(bodies){if(!bodies){return this.world.getAllBodies()}if(!Array.isArray(bodies)){bodies=[bodies]}var output=[];for(var i=0;i<bodies.length;i++){var body=(bodies[i].hasOwnProperty('body'))?bodies[i].body:bodies[i];output.push(body)}return output},setVelocity:function(bodies,x,y){bodies=this.getMatterBodies(bodies);var vec2=this._tempVec2;vec2.x=x;vec2.y=y;bodies.forEach(function(body){Body.setVelocity(body,vec2)});return this},setVelocityX:function(bodies,x){bodies=this.getMatterBodies(bodies);var vec2=this._tempVec2;vec2.x=x;bodies.forEach(function(body){vec2.y=body.velocity.y;Body.setVelocity(body,vec2)});return this},setVelocityY:function(bodies,y){bodies=this.getMatterBodies(bodies);var vec2=this._tempVec2;vec2.y=y;bodies.forEach(function(body){vec2.x=body.velocity.x;Body.setVelocity(body,vec2)});return this},setAngularVelocity:function(bodies,value){bodies=this.getMatterBodies(bodies);bodies.forEach(function(body){Body.setAngularVelocity(body,value)});return this},applyForce:function(bodies,force){bodies=this.getMatterBodies(bodies);var vec2=this._tempVec2;bodies.forEach(function(body){vec2.x=body.position.x;vec2.y=body.position.y;Body.applyForce(body,vec2,force)});return this},applyForceFromPosition:function(bodies,position,speed,angle){bodies=this.getMatterBodies(bodies);var vec2=this._tempVec2;bodies.forEach(function(body){if(angle===undefined){angle=body.angle}vec2.x=speed*Math.cos(angle);vec2.y=speed*Math.sin(angle);Body.applyForce(body,position,vec2)});return this},applyForceFromAngle:function(bodies,speed,angle){bodies=this.getMatterBodies(bodies);var vec2=this._tempVec2;bodies.forEach(function(body){if(angle===undefined){angle=body.angle}vec2.x=speed*Math.cos(angle);vec2.y=speed*Math.sin(angle);Body.applyForce(body,{x:body.position.x,y:body.position.y},vec2)});return this},getConstraintLength:function(constraint){var aX=constraint.pointA.x;var aY=constraint.pointA.y;var bX=constraint.pointB.x;var bY=constraint.pointB.y;if(constraint.bodyA){aX+=constraint.bodyA.position.x;aY+=constraint.bodyA.position.y}if(constraint.bodyB){bX+=constraint.bodyB.position.x;bY+=constraint.bodyB.position.y}return DistanceBetween(aX,aY,bX,bY)},alignBody:function(body,x,y,align){body=(body.hasOwnProperty('body'))?body.body:body;var pos;switch(align){case ALIGN_CONST.TOP_LEFT:case ALIGN_CONST.LEFT_TOP:pos=this.bodyBounds.getTopLeft(body,x,y);break;case ALIGN_CONST.TOP_CENTER:pos=this.bodyBounds.getTopCenter(body,x,y);break;case ALIGN_CONST.TOP_RIGHT:case ALIGN_CONST.RIGHT_TOP:pos=this.bodyBounds.getTopRight(body,x,y);break;case ALIGN_CONST.LEFT_CENTER:pos=this.bodyBounds.getLeftCenter(body,x,y);break;case ALIGN_CONST.CENTER:pos=this.bodyBounds.getCenter(body,x,y);break;case ALIGN_CONST.RIGHT_CENTER:pos=this.bodyBounds.getRightCenter(body,x,y);break;case ALIGN_CONST.LEFT_BOTTOM:case ALIGN_CONST.BOTTOM_LEFT:pos=this.bodyBounds.getBottomLeft(body,x,y);break;case ALIGN_CONST.BOTTOM_CENTER:pos=this.bodyBounds.getBottomCenter(body,x,y);break;case ALIGN_CONST.BOTTOM_RIGHT:case ALIGN_CONST.RIGHT_BOTTOM:pos=this.bodyBounds.getBottomRight(body,x,y);break}if(pos){Body.setPosition(body,pos)}return this},shutdown:function(){var eventEmitter=this.systems.events;if(this.world){eventEmitter.off(SceneEvents.UPDATE,this.world.update,this.world);eventEmitter.off(SceneEvents.POST_UPDATE,this.world.postUpdate,this.world)}eventEmitter.off(SceneEvents.SHUTDOWN,this.shutdown,this);if(this.add){this.add.destroy()}if(this.world){this.world.destroy()}this.add=null;this.world=null},destroy:function(){this.shutdown();this.scene.sys.events.off(SceneEvents.START,this.start,this);this.scene=null;this.systems=null}});PluginCache.register('MatterPhysics',MatterPhysics,'matterPhysics');module.exports=MatterPhysics;
