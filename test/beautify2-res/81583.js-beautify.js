const _=require('lodash');module.exports=function(Bookshelf){const ParentModel=Bookshelf.Model;Bookshelf.Model=Bookshelf.Model.extend({sync:function sync(){const parentSync=ParentModel.prototype.sync.apply(this,arguments);const originalUpdateSync=parentSync.update;const originalInsertSync=parentSync.insert;const self=this;parentSync.update=function update(attrs){attrs=self.formatOnWrite(_.cloneDeep(attrs));return originalUpdateSync.apply(this,[attrs])};parentSync.insert=function insert(attrs){attrs=self.formatOnWrite(_.cloneDeep(attrs));return originalInsertSync.apply(this,[attrs])};return parentSync},formatOnWrite:function formatOnWrite(attrs){return attrs},format:function format(attrs){return this.fixDatesWhenSave(attrs)},parse:function parse(attrs){return this.fixBools(this.fixDatesWhenFetch(attrs))},toJSON:function toJSON(unfilteredOptions){const options=Bookshelf.Model.filterOptions(unfilteredOptions,'toJSON');options.omitPivot=true;_.each(this.relations,(value,key)=>{if(_.isEmpty(value)){delete this.relations[key]}});if(options.previous){const clonedModel=_.cloneDeep(this);clonedModel.attributes=this._previousAttributes;if(this.relationships){this.relationships.forEach((relation)=>{if(this._previousRelations&&Object.prototype.hasOwnProperty.call(this._previousRelations,relation)){clonedModel.related(relation).models=this._previousRelations[relation].models}})}return ParentModel.prototype.toJSON.call(clonedModel,options)}return ParentModel.prototype.toJSON.call(this,options)}})};
