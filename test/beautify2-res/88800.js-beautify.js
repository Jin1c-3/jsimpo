const fs=Plugin.fs;const path=Plugin.path;const createHash=Npm.require('crypto').createHash;const assert=Npm.require('assert');const LRU=Npm.require('lru-cache');CachingCompilerBase=class CachingCompilerBase{constructor({compilerName,defaultCacheSize,maxParallelism=20,}){this._compilerName=compilerName;this._maxParallelism=maxParallelism;const compilerNameForEnvar=compilerName.toUpperCase().replace('/-/g','_').replace(/[^A-Z0-9_]/g,'');const envVarPrefix='METEOR_'+compilerNameForEnvar+'_CACHE_';const debugEnvVar=envVarPrefix+'DEBUG';this._cacheDebugEnabled=!!process.env[debugEnvVar];const cacheSizeEnvVar=envVarPrefix+'SIZE';this._cacheSize=+process.env[cacheSizeEnvVar]||defaultCacheSize;this._diskCache=null;this._callCount=0;this._afterLinkCallbacks=[]}getCacheKey(inputFile){throw Error('CachingCompiler subclass should implement getCacheKey!')}addCompileResult(inputFile,compileResult){throw Error('CachingCompiler subclass should implement addCompileResult!')}compileResultSize(compileResult){throw Error('CachingCompiler subclass should implement compileResultSize!')}stringifyCompileResult(compileResult){return JSON.stringify(compileResult)}parseCompileResult(stringifiedCompileResult){return this._parseJSONOrNull(stringifiedCompileResult)}_parseJSONOrNull(json){try{return JSON.parse(json)}catch(e){if(e instanceof SyntaxError)return null;throw e}}_cacheDebug(message){if(!this._cacheDebugEnabled)return;console.log(`CACHE(${this._compilerName}):${message}`)}setDiskCacheDirectory(diskCache){if(this._diskCache)throw Error('setDiskCacheDirectory called twice?');this._diskCache=diskCache}sourceMapSize(sm){if(!sm)return 0;return sm.mappings.length+(sm.sourcesContent||[]).reduce(function(soFar,current){return soFar+(current?current.length:0)},0)}afterLink(){this._afterLinkCallbacks.splice(0).forEach(callback=>{callback()})}_deepHash(val){const hash=createHash('sha1');let type=typeof val;if(val===null){type='null'}hash.update(type+'\0');switch(type){case'object':const keys=Object.keys(val);if(!Array.isArray(val)){keys.sort()}keys.forEach((key)=>{if(typeof val[key]==='function'){return}hash.update(key+'\0').update(this._deepHash(val[key]))});break;case'function':assert.ok(false,'cannot hash function objects');break;default:hash.update(''+val);break}return hash.digest('hex')}_writeFile(filename,contents){const tempFilename=filename+'.tmp.'+Random.id();try{fs.writeFileSync(tempFilename,contents);fs.renameSync(tempFilename,filename)}catch(e){this._cacheDebug(e)}}_readFileOrNull(filename){try{return fs.readFileSync(filename,'utf8')}catch(e){if(e&&e.code==='ENOENT')return null;throw e}}}CachingCompiler=class CachingCompiler extends CachingCompilerBase{constructor({compilerName,defaultCacheSize,maxParallelism=20,}){super({compilerName,defaultCacheSize,maxParallelism});this._cache=new LRU({max:this._cacheSize,length:(value)=>this.compileResultSize(value),})}compileOneFile(inputFile){throw Error('CachingCompiler subclass should implement compileOneFile!')}async processFilesForTarget(inputFiles){const cacheMisses=[];const arches=this._cacheDebugEnabled&&Object.create(null);inputFiles.forEach(inputFile=>{if(arches){arches[inputFile.getArch()]=1}const getResult=()=>{const cacheKey=this._deepHash(this.getCacheKey(inputFile));let compileResult=this._cache.get(cacheKey);if(!compileResult){compileResult=this._readCache(cacheKey);if(compileResult){this._cacheDebug(`Loaded ${inputFile.getDisplayPath()}`)}}if(!compileResult){cacheMisses.push(inputFile.getDisplayPath());compileResult=Promise.await(this.compileOneFile(inputFile));if(!compileResult){return}this._cache.set(cacheKey,compileResult);this._writeCacheAsync(cacheKey,compileResult)}return compileResult};if(this.compileOneFileLater&&inputFile.supportsLazyCompilation){this.compileOneFileLater(inputFile,getResult)}else{const result=getResult();if(result){this.addCompileResult(inputFile,result)}}});if(this._cacheDebugEnabled){this._afterLinkCallbacks.push(()=>{cacheMisses.sort();this._cacheDebug(`Ran(#${++this._callCount})on:${JSON.stringify(cacheMisses)}${JSON.stringify(Object.keys(arches).sort())}`)})}}_cacheFilename(cacheKey){if(!/^[a-f0-9]+$/.test(cacheKey)){throw Error('bad cacheKey: '+cacheKey)}return path.join(this._diskCache,cacheKey+'.cache')}_readCache(cacheKey){if(!this._diskCache){return null}const cacheFilename=this._cacheFilename(cacheKey);const compileResult=this._readAndParseCompileResultOrNull(cacheFilename);if(!compileResult){return null}this._cache.set(cacheKey,compileResult);return compileResult}_writeCacheAsync(cacheKey,compileResult){if(!this._diskCache)return;const cacheFilename=this._cacheFilename(cacheKey);const cacheContents=this.stringifyCompileResult(compileResult);this._writeFile(cacheFilename,cacheContents)}_readAndParseCompileResultOrNull(filename){const raw=this._readFileOrNull(filename);return this.parseCompileResult(raw)}}
