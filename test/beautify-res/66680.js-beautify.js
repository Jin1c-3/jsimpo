const fs=require('fs')const path=require('path')const color=require('ansicolors')const{promisify}=require('util')const glob=promisify(require('glob'))const readFile=promisify(fs.readFile)const BaseCommand=require('./base-command.js')class HelpSearch extends BaseCommand{static get description(){return'Search npm help documentation'}static get name(){return'help-search'}static get usage(){return['<text>']}static get params(){return['long']}exec(args,cb){this.helpSearch(args).then(()=>cb()).catch(cb)}async helpSearch(args){if(!args.length)return this.npm.output(this.usage)const docPath=path.resolve(__dirname,'..','docs/content')const files=await glob(`${docPath}(a,b)=>a.found.length>b.found.length?-1:a.found.length<b.found.length?1:a.totalHits>b.totalHits?-1:a.totalHits<b.totalHits?1:a.lines.length>b.lines.length?-1:a.lines.length<b.lines.length?1:0).slice(0,10)}formatResults(args,results){const cols=Math.min(process.stdout.columns||Infinity,80)+1 const out=results.map(res=>{const out=[res.cmd]const r=Object.keys(res.hits).map(k=>`${k}:${res.hits[k]}`).sort((a,b)=>a>b?1:-1).join(' ')out.push(' '.repeat((Math.max(1,cols-out.join(' ').length-r.length-1))))out.push(r)if(!this.npm.config.get('long'))return out.join('')out.unshift('\n\n')out.push('\n')out.push('-'.repeat(cols-1)+'\n')res.lines.forEach((line,i)=>{if(line===null||i>3)return if(!this.npm.color){out.push(line+'\n')return}const hilitLine=[]for(const arg of args){const finder=line.toLowerCase().split(arg.toLowerCase())let p=0 for(const f of finder){hilitLine.push(line.substr(p,f.length))const word=line.substr(p+f.length,arg.length)const hilit=color.bgBlack(color.red(word))hilitLine.push(hilit)p+=f.length+arg.length}}out.push(hilitLine.join('')+'\n')})return out.join('')}).join('\n')const finalOut=results.length&&!this.npm.config.get('long')?'Top hits for '+(args.map(JSON.stringify).join(' '))+'\n'+'—'.repeat(cols-1)+'\n'+out+'\n'+'—'.repeat(cols-1)+'\n'+'(run with -l or --long to see more context)':out return finalOut.trim()}}module.exports=HelpSearch
