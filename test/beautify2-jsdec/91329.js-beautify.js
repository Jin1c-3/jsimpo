export default function findDependencyMatch(resources,resourceWithDependencies){if(!resourceWithDependencies.dependsOn){return[]}else{return resourceWithDependencies.dependsOn.map(dependency=>{const{resourceName,...otherValues}=dependency const keys=Object.keys(otherValues)const match=resources.find(resource=>{if(resourceName!==resource.resourceName){return false}if(!keys.every(key=>Object.keys(resource.resourceDefinitions).indexOf(key)>=0)){return false}if(!keys.every(key=>resource.resourceDefinitions[key]===dependency[key])){return false}return resource})if(match){return match}else{const{mdxType,...resourceDefinition}=resourceWithDependencies.resourceDefinitions return{error:`A resource(${resourceWithDependencies.resourceName}:${JSON.stringify(resourceDefinition)})is missing its dependency on ${JSON.stringify(resourceWithDependencies.dependsOn[0])}`,}}})}}