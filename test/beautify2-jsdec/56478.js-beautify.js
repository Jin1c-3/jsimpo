'use strict';const common=require('../../common');const assert=require('assert');const test_number=require(`./build/${common.buildType}/test_number`);function testNumber(num){assert.strictEqual(num,test_number.Test(num))}testNumber(0);testNumber(-0);testNumber(1);testNumber(-1);testNumber(100);testNumber(2121);testNumber(-1233);testNumber(986583);testNumber(-976675);testNumber(98765432213456789876546896323445679887645323232436587988766545658);testNumber(-4350987086545760976737453646576078997096876957864353245245769809);testNumber(Number.MIN_SAFE_INTEGER);testNumber(Number.MAX_SAFE_INTEGER);testNumber(Number.MAX_SAFE_INTEGER+10);testNumber(Number.MIN_VALUE);testNumber(Number.MAX_VALUE);testNumber(Number.MAX_VALUE+10);testNumber(Number.POSITIVE_INFINITY);testNumber(Number.NEGATIVE_INFINITY);testNumber(Number.NaN);function testUint32(input,expected=input){assert.strictEqual(expected,test_number.TestUint32Truncation(input))}testUint32(0.0,0);testUint32(-0.0,0);testUint32(4294967295);testUint32(4294967296,0);testUint32(4294967297,1);testUint32(17*4294967296+1,1);testUint32(-1,0xffffffff);function testInt32(input,expected=input){assert.strictEqual(expected,test_number.TestInt32Truncation(input))}testInt32(0.0,0);testInt32(-0.0,0);testInt32(-Math.pow(2,31));testInt32(Math.pow(2,31)-1);testInt32(4294967297,1);testInt32(4294967296,0);testInt32(4294967295,-1);testInt32(4294967296*5+3,3);testInt32(Number.MIN_SAFE_INTEGER,1);testInt32(Number.MAX_SAFE_INTEGER,-1);testInt32(-Math.pow(2,63)+(Math.pow(2,9)+1),1024);testInt32(Math.pow(2,63)-(Math.pow(2,9)+1),-1024);testInt32(-Number.MIN_VALUE,0);testInt32(Number.MIN_VALUE,0);testInt32(-Number.MAX_VALUE,0);testInt32(Number.MAX_VALUE,0);testInt32(-Math.pow(2,63)+(Math.pow(2,9)),0);testInt32(Math.pow(2,63)-(Math.pow(2,9)),0);testInt32(Number.POSITIVE_INFINITY,0);testInt32(Number.NEGATIVE_INFINITY,0);testInt32(Number.NaN,0);function testInt64(input,expected=input){assert.strictEqual(expected,test_number.TestInt64Truncation(input))}const RANGEERROR_POSITIVE=Math.pow(2,63);const RANGEERROR_NEGATIVE=-Math.pow(2,63);testInt64(0.0,0);testInt64(-0.0,0);testInt64(Number.MIN_SAFE_INTEGER);testInt64(Number.MAX_SAFE_INTEGER);testInt64(-Math.pow(2,63)+(Math.pow(2,9)+1));testInt64(Math.pow(2,63)-(Math.pow(2,9)+1));testInt64(-Number.MIN_VALUE,0);testInt64(Number.MIN_VALUE,0);testInt64(-Number.MAX_VALUE,RANGEERROR_NEGATIVE);testInt64(Number.MAX_VALUE,RANGEERROR_POSITIVE);testInt64(-Math.pow(2,63)+(Math.pow(2,9)),RANGEERROR_NEGATIVE);testInt64(Math.pow(2,63)-(Math.pow(2,9)),RANGEERROR_POSITIVE);testInt64(Number.POSITIVE_INFINITY,0);testInt64(Number.NEGATIVE_INFINITY,0);testInt64(Number.NaN,0);