const _=require('lodash');const crypto=require('crypto');const debug=require('@tryghost/debug')('frontend:services:settings:index');const SettingsLoader=require('./loader');const ensureSettingsFiles=require('./ensure-settings');const errors=require('@tryghost/errors');const defaultHashes={routes:'3d180d52c663d173a6be791ef411ed01'};const calculateHash=(data)=>{return crypto.createHash('md5').update(data,'binary').digest('hex')};module.exports={init:function(){const knownSettings=this.knownSettings();debug('init settings service for:',knownSettings);return ensureSettingsFiles(knownSettings)},knownSettings:function knownSettings(){return['routes']},get:function get(setting){const knownSettings=this.knownSettings();if(!setting||_.indexOf(knownSettings,setting)<0){throw new errors.IncorrectUsageError({message:`Requested setting is not supported:'${setting}'.`,help:`Please use only the supported settings:${knownSettings}.`})}return SettingsLoader(setting)},getAll:function getAll(){const knownSettings=this.knownSettings();const settingsToReturn={};_.each(knownSettings,function(setting){settingsToReturn[setting]=SettingsLoader(setting)});return settingsToReturn},getDefaulHash:(setting)=>{return defaultHashes[setting]},getCurrentHash:async(setting)=>{const data=await SettingsLoader.loadSettings(setting);return calculateHash(JSON.stringify(data))}};