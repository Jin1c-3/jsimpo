const fs=require(`fs-extra`)const path=require(`path`)const fileType=require(`file-type`)const{createFileNode}=require(`./create-file-node`)const{createFilePath}=require(`./utils`)const{createContentDigest}=require(`gatsby-core-utils`)const cacheId=hash=>`create-file-node-from-buffer-${hash}`const writeBuffer=(filename,buffer)=>new Promise((resolve,reject)=>{fs.writeFile(filename,buffer,err=>(err?reject(err):resolve()))})async function processBufferNode({buffer,hash,cache,createNode,parentNodeId,createNodeId,ext,name,}){const pluginCacheDir=cache.directory let filename=await cache.get(cacheId(hash))if(!filename){if(typeof ext===`undefined`){const filetype=await fileType.fromBuffer(buffer)ext=filetype?`.${filetype.ext}`:`.bin`}filename=createFilePath(path.join(pluginCacheDir,hash),name,ext)await fs.ensureDir(path.dirname(filename))await writeBuffer(filename,buffer)await cache.set(cacheId(hash),filename)}const fileNode=await createFileNode(filename,createNodeId,{})fileNode.internal.description=`File"Buffer<${hash}>"`fileNode.hash=hash fileNode.parent=parentNodeId await createNode(fileNode,{name:`gatsby-source-filesystem`})return fileNode}const processingCache={}module.exports=({buffer,hash,cache,createNode,getCache,parentNodeId=null,createNodeId,ext,name=hash,})=>{if(typeof createNodeId!==`function`){throw new Error(`createNodeId must be a function,was ${typeof createNodeId}`)}if(typeof createNode!==`function`){throw new Error(`createNode must be a function,was ${typeof createNode}`)}if(typeof getCache===`function`){cache=getCache(`gatsby-source-filesystem`)}if(typeof cache!==`object`){throw new Error(`Neither"cache"or"getCache"was passed.getCache must be function that return Gatsby cache,"cache"must be the Gatsby cache,was ${typeof cache}`)}if(!buffer){return Promise.reject(`bad buffer:${buffer}`)}if(!hash){hash=createContentDigest(buffer)}if(processingCache[hash]){return processingCache[hash]}const bufferCachePromise=processBufferNode({buffer,hash,cache,createNode,parentNodeId,createNodeId,ext,name,})processingCache[hash]=bufferCachePromise return processingCache[hash]}