import os, sys

def esoteric(srcPath, dstPath):
    obfuscateMap = {
    'a': ['(([]===[])+/-/)[1]'],
    'b': ['(1+{})[(1<<1)+1]'],
    'c': ['(1+{})[1+11>>>1]','(-{}+{})[-1+1e1-1]'],
    'e': ['([]+![])[1<<1<<1]','([,][~1]+[])[1-~1]'],
    'f': ['([]+/-/[(!!1+[])[1>>1]+(!!1+[])[1<<1^1]+(!1+[])[1|1<<1]+(!!1+[])[1^1]])[1^1]'],
    'i': ['/\\[[^1]+\\]/[([]+![])[1<<1<<1]+(/|/[(1+{})[1+11>>>1]+[[]+{}][+!1][1]+([]+1/[])[1<<1>>1]+([1<1]+[])[1+11>>>1+1]+[[!!1]+1][+[]][1-1]+([]+!!/!/)[1|1]+(/1/[1]+[])[!1%1]+(-{}+{})[-1+1e1-1]+(1+[!!1])[1]+([]+1+{})[1<<1]+[!!/!!/+[]][+[]][1&1]]+/=/)[1e1+(1<<1|1)+(([]+/-/[(!!1+[])[1>>1]+(!!1+[])[1<<1^1]+(!1+[])[1|1<<1]+(!!1+[])[1^1]])[1^1]==+!1)]+(!![]+{})[1|1<<1]+[1+{}+1][!1+!1][(11>>1)+1]](([]+/-/[(!!1+[])[1>>1]+(!!1+[])[1<<1^1]+(!1+[])[1|1<<1]+(!!1+[])[1^1]]))[1&.1][(11>>>1)-1]'],
    'I': ['[[]+1/!1][1^1][1>>1]'],
    'j': ['(1+{})[1<<1+1]'],
    'l': ['([]+!!-[])[1<<1]'],
    'n': ['([]+1/[])[1<<1>>1]'],
    'o': ['[[]+{}][+!1][1]','([]+1+{})[1<<1]','[/~/+{}][+!1][-~1<<1]','[[],[]+{}][1<<1>>>1][1||1]'],
    'O': ['[[]+{}][+!1][(1<<1<<1)+(1<<1<<1)]','[[]+{}][+!1][(1<<1<<1<<1)]'],
    'r': ['([]+!!/!/)[1|1]','[!!/!!/+[]][+[]][1&1]'],
    's': ['([1<1]+[])[1+11>>>1+1]'],
    't': ['[[!!1]+1][+[]][1-1]','(1+[!!1])[1]'],
    'u': ['(/1/[1]+[])[!1%1]','(/[<+>]/[1&1|1]+[1.1])[1/11.1&1.11]'],
    'v': ['/\\[[^1]+\\]/[([]+![])[1<<1<<1]+(/|/[(1+{})[1+11>>>1]+[[]+{}][+!1][1]+([]+1/[])[1<<1>>1]+([1<1]+[])[1+11>>>1+1]+[[!!1]+1][+[]][1-1]+([]+!!/!/)[1|1]+(/1/[1]+[])[!1%1]+(-{}+{})[-1+1e1-1]+(1+[!!1])[1]+([]+1+{})[1<<1]+[!!/!!/+[]][+[]][1&1]]+/=/)[1e1+(1<<1|1)+(([]+/-/[(!!1+[])[1>>1]+(!!1+[])[1<<1^1]+(!1+[])[1|1<<1]+(!!1+[])[1^1]])[1^1]==+!1)]+(!![]+{})[1|1<<1]+[1+{}+1][!1+!1][(11>>1)+1]](([]+/-/[(!!1+[])[1>>1]+(!!1+[])[1<<1^1]+(!1+[])[1|1<<1]+(!!1+[])[1^1]]))[1&.1][11>>>1]'],
    'x': ['[([]+![])[1<<1<<1]+(/|/[(1+{})[1+11>>>1]+[[]+{}][+!1][1]+([]+1/[])[1<<1>>1]+([1<1]+[])[1+11>>>1+1]+[[!!1]+1][+[]][1-1]+([]+!!/!/)[1|1]+(/1/[1]+[])[!1%1]+(-{}+{})[-1+1e1-1]+(1+[!!1])[1]+([]+1+{})[1<<1]+[!!/!!/+[]][+[]][1&1]]+/=/)[1e1+(1<<1|1)+(([]+/-/[(!!1+[])[1>>1]+(!!1+[])[1<<1^1]+(!1+[])[1|1<<1]+(!!1+[])[1^1]])[1^1]==+!1)]+(!![]+{})[1|1<<1]+[1+{}+1][!1+!1][(11>>1)+1]][1>>1][1]'],
    'y': ['(/1/+1/[1<1][1%1])[1^11]'],
    ' ': ['({}+[])[1<<1^11>>1]','[[]+{}][!1.1%1][11111.1%11.1*111e11|!1]'],
}

    try:
        src = open(srcPath, 'r').read()
        res = ""
        for i in range(len(src)):
            if src[i] in obfuscateMap.keys():
                res = res + obfuscateMap[src[i]][0]
            else:
                res = res + src[i]
        dstFile = open(dstPath, 'w')
        dstFile.write(res)
        dstFile.close()
    except:
        return


def jsfk(srcPath, dstPath):
    obfuscationMap = {'false' : '![]', 'true' : '!![]', '0' : '+[]',
    '2' : '!+[]+!+[]', 'Array' : '[]', 'String': '[] + []', 'Function' : '[]["filter"]',
    'eval' : '[]["filter"]["constructor"]( )()', 
    'window': '[]["filter"]["constructor"]("return this")()'}
    try:
        src = open(srcPath, 'r').read()
        for key in obfuscationMap.keys():
            src = src.replace(key, obfuscationMap[key])
        dstFile = open(dstPath, 'w')
        dstFile.write(src)
        dstFile.close()
    except:
        return



def gen():
    srcFiles = os.listdir('../jsdata/rand_origin/')
    for item in srcFiles:
        if not item.endswith('.js'):
            continue
        print(item)
        # esoteric('../jsdata/rand_origin/' + str(item), './esoteric/' + str(item) + '-eso.js')
        jsfk('../jsdata/rand_origin/' + str(item), './fk/' + str(item) + '-fk.js')

def gen2():
    srcFiles = os.listdir('../jsdata2/rand_origin/')
    for item in srcFiles:
        if not item.endswith('.js'):
            continue
        print(item)
        # esoteric('../jsdata2/rand_origin/' + str(item), './esoteric2/' + str(item) + '-eso.js')
        jsfk('../jsdata2/rand_origin/' + str(item), './fk2/' + str(item) + '-fk.js')


if __name__ == '__main__':
    gen()
    # gen2()