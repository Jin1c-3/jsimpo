import{Meteor}from"meteor/meteor";import{Email}from"meteor/email";import{TAPi18n}from"meteor/rocketchat:tap-i18n";import _ from"underscore";import s from"underscore.string";import juice from"juice";import stripHtml from"string-strip-html";import{escapeHTML}from"@rocket.chat/string-helpers";import{settings}from"../../settings/server";import{replaceVariables}from"./utils.js";let contentHeader;let contentFooter;let body;let Settings={get:()=>{}};let lng="en";settings.get("Language",(e,t)=>{lng=t||"en"});export const replacekey=(e,t,r="")=>e.replace(new RegExp(`(\\[${t}\\]|__${t}__)`,"igm"),r);export const translate=e=>replaceVariables(e,(e,t)=>TAPi18n.__(t,{lng:lng}));export const replace=function e(t,r={}){if(!t){return""}const n={Site_Name:Settings.get("Site_Name"),Site_URL:Settings.get("Site_Url"),Site_URL_Slash:Settings.get("Site_Url").replace(/\/?$/,"/"),...r.name&&{fname:s.strLeft(r.name," "),lname:s.strRightBack(r.name," ")},...r};return Object.entries(n).reduce((e,[t,r])=>replacekey(e,t,r),translate(t))};const nonEscapeKeys=["room_path"];export const replaceEscaped=(e,t={})=>replace(e,{Site_Name:escapeHTML(settings.get("Site_Name")),Site_Url:escapeHTML(settings.get("Site_Url")),...Object.entries(t).reduce((e,[t,r])=>{e[t]=nonEscapeKeys.includes(t)?r:escapeHTML(r);return e},{})});export const wrap=(e,t={})=>{if(settings.get("email_plain_text_only")){return replace(e,t)}return replaceEscaped(body.replace("{{body}}",e),t)};export const inlinecss=e=>juice.inlineContent(e,Settings.get("email_style"));export const getTemplate=(e,r,n=true)=>{let o="";Settings.get(e,(e,t)=>{o=t||"";r(n?inlinecss(o):o)});Settings.get("email_style",()=>{r(n?inlinecss(o):o)})};export const getTemplateWrapped=(e,t)=>{let r="";const n=_.debounce(()=>t(wrap(inlinecss(r))),100);Settings.get("Email_Header",()=>r&&n());Settings.get("Email_Footer",()=>r&&n());Settings.get("email_style",()=>r&&n());Settings.get(e,(e,t)=>{r=t||"";return r&&n()})};export const setSettings=e=>{Settings=e;getTemplate("Email_Header",e=>{contentHeader=replace(e||"");body=inlinecss(`${contentHeader} {{body}} ${contentFooter}`)},false);getTemplate("Email_Footer",e=>{contentFooter=replace(e||"");body=inlinecss(`${contentHeader} {{body}} ${contentFooter}`)},false);body=inlinecss(`${contentHeader} {{body}} ${contentFooter}`)};export const rfcMailPatternWithName=/^(?:.*<)?([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)(?:>?)$/;export const checkAddressFormat=e=>rfcMailPatternWithName.test(e);export const sendNoWrap=({to:e,from:t,replyTo:r,subject:n,html:o,text:s,headers:a})=>{if(!checkAddressFormat(e)){return}if(!s){s=stripHtml(o).result}if(settings.get("email_plain_text_only")){o=undefined}Meteor.defer(()=>Email.send({to:e,from:t,replyTo:r,subject:n,html:o,text:s,headers:a}))};export const send=({to:e,from:t,replyTo:r,subject:n,html:o,text:s,data:a,headers:i})=>sendNoWrap({to:e,from:t,replyTo:r,subject:replace(n,a),text:s?replace(s,a):stripHtml(replace(o,a)).result,html:wrap(o,a),headers:i});export const checkAddressFormatAndThrow=(e,t)=>{if(checkAddressFormat(e)){return true}throw new Meteor.Error("error-invalid-from-address","Invalid from address",{function:t})};export const getHeader=()=>contentHeader;export const getFooter=()=>contentFooter;