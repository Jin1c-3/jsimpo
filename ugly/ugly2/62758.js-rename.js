function t(s,u){assertTrue(s.test(u))}function f(s,u){assertFalse(s.test(u))}t(/\p{ASCII}+/u,"abc123");f(/\p{ASCII}+/u,"ⓐⓑⓒ①②③");f(/\p{ASCII}+/u,"🄰🄱🄲①②③");f(/\P{ASCII}+/u,"abcd123");t(/\P{ASCII}+/u,"ⓐⓑⓒ①②③");t(/\P{ASCII}+/u,"🄰🄱🄲①②③");f(/[^\p{ASCII}]+/u,"abc123");f(/[\p{ASCII}]+/u,"ⓐⓑⓒ①②③");f(/[\p{ASCII}]+/u,"🄰🄱🄲①②③");t(/[^\P{ASCII}]+/u,"abcd123");t(/[\P{ASCII}]+/u,"ⓐⓑⓒ①②③");f(/[^\P{ASCII}]+/u,"🄰🄱🄲①②③");t(/\p{Any}+/u,"🄰🄱🄲①②③");assertEquals(["\ud800"],/\p{Any}/u.exec("\ud800\ud801"));assertEquals(["\udc00"],/\p{Any}/u.exec("\udc00\udc01"));assertEquals(["𐀁"],/\p{Any}/u.exec("𐀁"));assertEquals(["\udc01"],/\p{Any}/u.exec("\udc01"));f(/\P{Any}+/u,"123");f(/[\P{Any}]+/u,"123");t(/[\P{Any}\d]+/u,"123");t(/[^\P{Any}]+/u,"123");t(/\p{Assigned}+/u,"123");t(/\p{Assigned}+/u,"🄰🄱🄲");f(/\p{Assigned}+/u,"﷐");f(/\p{Assigned}+/u,"󿿿");f(/\P{Assigned}+/u,"123");f(/\P{Assigned}+/u,"🄰🄱🄲");t(/\P{Assigned}+/u,"﷐");t(/\P{Assigned}+/u,"󿿿");f(/\P{Assigned}/u,"");t(/[^\P{Assigned}]+/u,"123");f(/[\P{Assigned}]+/u,"🄰🄱🄲");f(/[^\P{Assigned}]+/u,"﷐");t(/[\P{Assigned}]+/u,"󿿿");f(/[\P{Assigned}]/u,"");f(/[^\u1234\p{ASCII}]+/u,"ሴ");t(/[x\P{ASCII}]+/u,"x");t(/[\u1234\p{ASCII}]+/u,"ሴ");assertThrows("/\\p{Other_Alphabetic}/u");assertThrows("/\\P{OAlpha}/u");assertThrows("/\\p{Other_Default_Ignorable_Code_Point}/u");assertThrows("/\\P{ODI}/u");assertThrows("/\\p{Other_Grapheme_Extend}/u");assertThrows("/\\P{OGr_Ext}/u");assertThrows("/\\p{Other_ID_Continue}/u");assertThrows("/\\P{OIDC}/u");assertThrows("/\\p{Other_ID_Start}/u");assertThrows("/\\P{OIDS}/u");assertThrows("/\\p{Other_Lowercase}/u");assertThrows("/\\P{OLower}/u");assertThrows("/\\p{Other_Math}/u");assertThrows("/\\P{OMath}/u");assertThrows("/\\p{Other_Uppercase}/u");assertThrows("/\\P{OUpper}/u");