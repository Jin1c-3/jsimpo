const KEYWORDS=new Set(["and","break","continue","do","downto","else","elseif","end","endfor","endfunc","endif","endwhile","eq","exit","for","foreach","func","ge","gt","if","in","infinity","le","lt","nan","ne","not","null","or","return","step","then","this","throw","upto","var","while"]);const TOKEN={and:0,divide:1,dot:2,dotDot:3,dotHash:4,dotStar:5,eq:6,ge:7,gt:8,le:9,leftBracket:10,leftParen:11,lt:12,minus:13,ne:14,not:15,null:16,number:17,or:18,plus:19,rightBracket:20,rightParen:21,string:22,this:23,times:24,identifier:25,break:26,continue:27,do:28,for:29,foreach:30,func:31,if:32,var:33,while:34,assign:35,comma:36,downto:37,else:38,elseif:39,end:40,endif:41,endfor:42,endfunc:43,endwhile:44,eof:45,exit:46,in:47,infinity:48,nan:49,return:50,step:51,then:52,throw:53,upto:54};const hexPattern=/^[uU]([0-9a-fA-F]{4,8})/;const numberPattern=/^[0-9]*(?:\.[0-9]*)?(?:[Ee][+-]?[0-9]+)?/;const dotNumberPattern=/^[0-9]*(?:[Ee][+-]?[0-9]+)?/;const eolPattern=/[\r\n]+/;const identifierPattern=new RegExp("^[\\p{L}_$!][\\p{L}\\p{N}_$]*","u");class Token{constructor(t,e=null){this.id=t;this.value=e}}const Singletons=function(){const t=Object.create(null);const e=new Set(["identifier","string","number","nan","infinity"]);for(const[n,s]of Object.entries(TOKEN)){if(!e.has(n)){t[n]=new Token(s)}}t.nan=new Token(TOKEN.number,NaN);t.infinity=new Token(TOKEN.number,Infinity);return t}();class Lexer{constructor(t){this.data=t;this.pos=0;this.len=t.length;this.strBuf=[]}skipUntilEOL(){const t=this.data.slice(this.pos).match(eolPattern);if(t){this.pos+=t.index+t[0].length}else{this.pos=this.len}}getIdentifier(){this.pos--;const t=this.data.slice(this.pos).match(identifierPattern);if(!t){throw new Error(`Invalid token in FormCalc expression at position ${this.pos}.`)}const e=this.data.slice(this.pos,this.pos+t[0].length);this.pos+=t[0].length;const n=e.toLowerCase();if(!KEYWORDS.has(n)){return new Token(TOKEN.identifier,e)}return Singletons[n]}getString(){const t=this.strBuf;const e=this.data;let n=this.pos;while(this.pos<this.len){const r=e.charCodeAt(this.pos++);if(r===34){if(e.charCodeAt(this.pos)===34){t.push(e.slice(n,this.pos++));n=this.pos;continue}break}if(r===92){const o=e.substring(this.pos,this.pos+10).match(hexPattern);if(!o){continue}t.push(e.slice(n,this.pos-1));const a=o[1];if(a.length===4){t.push(String.fromCharCode(parseInt(a,16)));n=this.pos+=5}else if(a.length!==8){t.push(String.fromCharCode(parseInt(a.slice(0,4),16)));n=this.pos+=5}else{t.push(String.fromCharCode(parseInt(a,16)));n=this.pos+=9}}}const s=e.slice(n,this.pos-1);if(t.length===0){return new Token(TOKEN.string,s)}t.push(s);const i=t.join("");t.length=0;return new Token(TOKEN.string,i)}getNumber(t){const e=this.data.substring(this.pos).match(numberPattern);if(!e){return t-48}const n=parseFloat(this.data.substring(this.pos-1,this.pos+e[0].length));this.pos+=e[0].length;return new Token(TOKEN.number,n)}getCompOperator(t,e){if(this.data.charCodeAt(this.pos)===61){this.pos++;return t}return e}getLower(){const t=this.data.charCodeAt(this.pos);if(t===61){this.pos++;return Singletons.le}if(t===62){this.pos++;return Singletons.ne}return Singletons.lt}getSlash(){if(this.data.charCodeAt(this.pos)===47){this.skipUntilEOL();return false}return true}getDot(){const t=this.data.charCodeAt(this.pos);if(t===46){this.pos++;return Singletons.dotDot}if(t===42){this.pos++;return Singletons.dotStar}if(t===35){this.pos++;return Singletons.dotHash}if(48<=t&&t<=57){this.pos++;const e=this.data.substring(this.pos).match(dotNumberPattern);if(!e){return new Token(TOKEN.number,(t-48)/10)}const n=this.pos+e[0].length;const s=parseFloat(this.data.substring(this.pos-2,n));this.pos=n;return new Token(TOKEN.number,s)}return Singletons.dot}next(){while(this.pos<this.len){const t=this.data.charCodeAt(this.pos++);switch(t){case 9:case 10:case 11:case 12:case 13:case 32:break;case 34:return this.getString();case 38:return Singletons.and;case 40:return Singletons.leftParen;case 41:return Singletons.rightParen;case 42:return Singletons.times;case 43:return Singletons.plus;case 44:return Singletons.comma;case 45:return Singletons.minus;case 46:return this.getDot();case 47:if(this.getSlash()){return Singletons.divide}break;case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.getNumber(t);case 59:this.skipUntilEOL();break;case 60:return this.getLower();case 61:return this.getCompOperator(Singletons.eq,Singletons.assign);case 62:return this.getCompOperator(Singletons.ge,Singletons.gt);case 91:return Singletons.leftBracket;case 93:return Singletons.rightBracket;case 124:return Singletons.or;default:return this.getIdentifier()}}return Singletons.eof}}export{Lexer,Token,TOKEN};