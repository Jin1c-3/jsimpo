import AudioTrack from"../../../src/js/tracks/audio-track.js";import{AudioTrackKind}from"../../../src/js/tracks/track-enums.js";import TrackBaseline from"./track-baseline";QUnit.module("Audio Track");TrackBaseline(AudioTrack,{id:"1",language:"en",label:"English",kind:"main"});QUnit.test("can create an enabled propert on an AudioTrack",function(e){const a=true;const n=new AudioTrack({enabled:a});e.equal(n.enabled,a,"enabled value matches what we passed in")});QUnit.test("defaults when items not provided",function(e){const a=new AudioTrack;e.equal(a.kind,"","kind defaulted to empty string");e.equal(a.enabled,false,"enabled defaulted to true since there is one track");e.equal(a.label,"","label defaults to empty string");e.equal(a.language,"","language defaults to empty string");e.ok(a.id.match(/vjs_track_\d+/),"id defaults to vjs_track_GUID")});QUnit.test("kind can only be one of several options, defaults to empty string",function(e){const a=new AudioTrack({kind:"foo"});e.equal(a.kind,"","the kind is set to empty string, not foo");e.notEqual(a.kind,"foo","the kind is set to empty string, not foo");for(const n in AudioTrackKind){const t=AudioTrackKind[n];const l=new AudioTrack({kind:t});e.equal(l.kind,t,"the kind is set to "+t)}});QUnit.test("enabled can only be instantiated to true or false, defaults to false",function(e){let a=new AudioTrack({enabled:"foo"});e.equal(a.enabled,false,"the enabled value is set to false, not foo");e.notEqual(a.enabled,"foo","the enabled value is not set to foo");a=new AudioTrack({enabled:true});e.equal(a.enabled,true,"the enabled value is set to true");a=new AudioTrack({enabled:false});e.equal(a.enabled,false,"the enabled value is set to false")});QUnit.test("enabled can only be changed to true or false",function(e){const a=new AudioTrack;a.enabled="foo";e.notEqual(a.enabled,"foo","enabled not set to invalid value, foo");e.equal(a.enabled,false,"enabled remains on the old value, false");a.enabled=true;e.equal(a.enabled,true,"enabled was set to true");a.enabled="baz";e.notEqual(a.enabled,"baz","enabled not set to invalid value, baz");e.equal(a.enabled,true,"enabled remains on the old value, true");a.enabled=false;e.equal(a.enabled,false,"enabled was set to false")});QUnit.test("when enabled is changed enabledchange event is fired",function(e){const a=new AudioTrack({tech:this.tech,enabled:false});let n=0;a.addEventListener("enabledchange",()=>{n++});a.enabled=true;a.enabled=false;e.equal(n,2,"two enabled changes");a.enabled=false;a.enabled=false;e.equal(n,2,"still two enabled changes");a.enabled=true;e.equal(n,3,"three enabled changes");a.enabled=true;a.enabled=true;e.equal(n,3,"still three enabled changes");a.off()});