const path=require("path");const CLIEngine=require("eslint").CLIEngine;const plugin=require("..");const _=require("lodash");const ruleName="skip-comment";const pluginName="__plugin__";function execute(e,t={}){const s=_.defaultsDeep(t,{fix:true,config:{parserOptions:{ecmaVersion:2018,sourceType:"module"}}});const n=new CLIEngine({parserOptions:{ecmaVersion:2018,sourceType:"module"},rules:{[`${pluginName}/${ruleName}`]:["error"]},...s,ignore:false,useEslintrc:false,plugins:[pluginName]});n.addPlugin(pluginName,plugin);const o=n.executeOnFiles([path.join(__dirname,e)]).results[0];return o}describe("skip-comment",()=>{it("skip test with comment",async()=>{const e="./fixtures/skip-comment-pass.js";const t=execute(e,{fix:true});expect(t.errorCount).toBe(0)});it("skip test without comment",async()=>{const e="./fixtures/skip-comment-fail.js";const t=execute(e,{fix:true});expect(t.errorCount).toBe(3);expect(t.messages[0].message).toContain("it");expect(t.messages[0].message).toContain("NOTE:");expect(t.messages[0].message).toContain("TODO:");expect(t.messages[1].message).toContain("describe");expect(t.messages[1].message).toContain("NOTE:");expect(t.messages[2].message).toContain("context");expect(t.messages[2].message).toContain("NOTE:");expect(t.output).not.toBeTruthy()});describe("config",()=>{it("skip test without comment",async()=>{const e="./fixtures/skip-comment-config.js";const t=execute(e,{fix:true,rules:{[`${pluginName}/${ruleName}`]:["error",{commentTokens:["FOOBAR:"]}]}});expect(t.errorCount).toBe(1);expect(t.messages[0].message).toContain("it");expect(t.messages[0].message).toContain("FOOBAR:");expect(t.output).not.toBeTruthy()})})});