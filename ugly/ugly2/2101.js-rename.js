import*as configApi from"./config";describe("when working with site config",function(){beforeEach(()=>{configApi.setSiteConfig({})});it("should set site config and config properly",function(){let o={foo:"bar",bar:0};configApi.setSiteConfig(o);let e=configApi.getSiteConfig();let i=configApi.getConfig();expect(e.foo).toEqual(o.foo);expect(e.bar).toEqual(o.bar);expect(e).toEqual(i)});it("should respect secure keys when applying directives",function(){let o={foo:"bar",bar:"cant-be-changed",secure:[...configApi.defaultConfig.secure,"bar"]};configApi.setSiteConfig(o);const e={foo:"baf",bar:"should-not-be-allowed"};const i=configApi.updateCurrentConfig(o,[e]);expect(i.foo).toEqual(e.foo);expect(i.bar).toBe(o.bar)});it("should set reset config properly",function(){let o={foo:"bar",bar:0};configApi.setSiteConfig(o);let e={foo:"baf"};configApi.setConfig(e);let i=configApi.getConfig();expect(i.foo).toEqual(e.foo);configApi.reset();let t=configApi.getConfig();expect(t.foo).toEqual(o.foo);let f=configApi.getSiteConfig();expect(f.foo).toEqual(o.foo)});it("should set global reset config properly",function(){let o={foo:"bar",bar:0};configApi.setSiteConfig(o);let e=configApi.getSiteConfig();expect(e.foo).toEqual(o.foo);let i=configApi.getConfig();expect(i.foo).toEqual(o.foo);configApi.setConfig({foobar:"bar0"});let t=configApi.getConfig();expect(t.foobar).toEqual("bar0");configApi.reset();let f=configApi.getConfig();expect(f.foobar).toBeUndefined()})});