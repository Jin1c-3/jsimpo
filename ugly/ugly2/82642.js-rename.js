const should=require("should");const supertest=require("supertest");const testUtils=require("../../utils");const config=require("../../../core/shared/config");const localUtils=require("./utils");describe("Webhooks API",function(){let a;const s="canary";before(async function(){await testUtils.startGhost();a=supertest.agent(config.get("url"));await localUtils.doAuth(a,"integrations")});it("Can create a webhook",async function(){const e={event:"test.create",target_url:"http://example.com/webhooks/test/extra/1",name:"test",secret:"thisissecret",api_version:s,integration_id:testUtils.DataGenerator.Content.integrations[0].id};const t=await a.post(localUtils.API.getApiQuery("webhooks/")).set("Origin",config.get("url")).send({webhooks:[e]}).expect("Content-Type",/json/).expect("Cache-Control",testUtils.cacheRules.private).expect(201);const o=t.body;should.exist(o.webhooks);localUtils.API.checkResponse(o.webhooks[0],"webhook");o.webhooks[0].event.should.equal(e.event);o.webhooks[0].target_url.should.equal(e.target_url);o.webhooks[0].secret.should.equal(e.secret);o.webhooks[0].name.should.equal(e.name);o.webhooks[0].api_version.should.equal(e.api_version);o.webhooks[0].integration_id.should.equal(e.integration_id);should.not.exist(t.headers.location);await a.post(localUtils.API.getApiQuery("webhooks/")).set("Origin",config.get("url")).send({webhooks:[e]}).expect("Content-Type",/json/).expect("Cache-Control",testUtils.cacheRules.private).expect(422)});it("Fails nicely when creating an orphaned webhook",async function(){const e={event:"test.create",target_url:"http://example.com/webhooks/test/extra/10",name:"test",secret:"thisissecret",api_version:s,integration_id:`fake-integration`};const t=await a.post(localUtils.API.getApiQuery("webhooks/")).set("Origin",config.get("url")).send({webhooks:[e]}).expect("Content-Type",/json/).expect("Cache-Control",testUtils.cacheRules.private).expect(422);const o=t.body;should.exist(o.errors);o.errors[0].type.should.equal("ValidationError");o.errors[0].context.should.equal(`Validation failed for 'integration_id'. 'integration_id' value does not match any existing integration.`)});it("Can edit a webhook",async function(){let e;let t;const o=await a.post(localUtils.API.getApiQuery("integrations/")).set("Origin",config.get("url")).send({integrations:[{name:"Rubbish Integration Name"}]}).expect(201);[e]=o.body.integrations;const s=await a.post(localUtils.API.getApiQuery("webhooks/")).set("Origin",config.get("url")).send({webhooks:[{name:"Testing",event:"site.changed",target_url:"https://example.com/rebuild",integration_id:e.id}]}).expect(201);[t]=s.body.webhooks;const i=await a.put(localUtils.API.getApiQuery(`webhooks/${t.id}/`)).set("Origin",config.get("url")).send({webhooks:[{name:"Edit Test",event:"subscriber.added",target_url:"https://example.com/new-subscriber",integration_id:"ignore_me"}]}).expect(200).expect("Content-Type",/json/).expect("Cache-Control",testUtils.cacheRules.private);const[n]=i.body.webhooks;should.equal(n.id,t.id);should.equal(n.name,"Edit Test");should.equal(n.event,"subscriber.added");should.equal(n.target_url,"https://example.com/new-subscriber");should.equal(n.integration_id,e.id)});it("Can delete a webhook",async function(){const e={event:"test.create",target_url:"http://example.com/webhooks/test/2",integration_id:testUtils.DataGenerator.Content.integrations[0].id};const t=await a.post(localUtils.API.getApiQuery("webhooks/")).set("Origin",config.get("url")).send({webhooks:[e]}).expect("Content-Type",/json/).expect("Cache-Control",testUtils.cacheRules.private).expect(201);const o=t.body;should.exist(o.webhooks);localUtils.API.checkResponse(o.webhooks[0],"webhook");o.webhooks[0].event.should.equal(e.event);o.webhooks[0].target_url.should.equal(e.target_url);const s=await a.del(localUtils.API.getApiQuery("webhooks/"+o.webhooks[0].id+"/")).set("Origin",config.get("url")).expect(204);s.body.should.be.empty()})});