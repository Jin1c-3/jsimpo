import{MILLISECONDS_A_DAY,MILLISECONDS_A_HOUR,MILLISECONDS_A_MINUTE,MILLISECONDS_A_SECOND,MILLISECONDS_A_WEEK,REGEX_FORMAT}from"../../constant";const MILLISECONDS_A_YEAR=MILLISECONDS_A_DAY*365;const MILLISECONDS_A_MONTH=MILLISECONDS_A_DAY*30;const durationRegex=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;const unitToMS={years:MILLISECONDS_A_YEAR,months:MILLISECONDS_A_MONTH,days:MILLISECONDS_A_DAY,hours:MILLISECONDS_A_HOUR,minutes:MILLISECONDS_A_MINUTE,seconds:MILLISECONDS_A_SECOND,milliseconds:1,weeks:MILLISECONDS_A_WEEK};const isDuration=t=>t instanceof Duration;let $d;let $u;const wrapper=(t,s,e)=>new Duration(t,e,s.$l);const prettyUnit=t=>`${$u.p(t)}s`;const isNegative=t=>t<0;const roundNumber=t=>isNegative(t)?Math.ceil(t):Math.floor(t);const absolute=t=>Math.abs(t);const getNumberUnitFormat=(t,s)=>{if(!t){return{negative:false,format:""}}if(isNegative(t)){return{negative:true,format:`${absolute(t)}${s}`}}return{negative:false,format:`${t}${s}`}};class Duration{constructor(s,t,e){this.$d={};this.$l=e;if(s===undefined){this.$ms=0;this.parseFromMilliseconds()}if(t){return wrapper(s*unitToMS[prettyUnit(t)],this)}if(typeof s==="number"){this.$ms=s;this.parseFromMilliseconds();return this}if(typeof s==="object"){Object.keys(s).forEach(t=>{this.$d[prettyUnit(t)]=s[t]});this.calMilliseconds();return this}if(typeof s==="string"){const i=s.match(durationRegex);if(i){const r=i.slice(2);const n=r.map(t=>Number(t));[this.$d.years,this.$d.months,this.$d.weeks,this.$d.days,this.$d.hours,this.$d.minutes,this.$d.seconds]=n;this.calMilliseconds();return this}}return this}calMilliseconds(){this.$ms=Object.keys(this.$d).reduce((t,s)=>t+(this.$d[s]||0)*unitToMS[s],0)}parseFromMilliseconds(){let{$ms:t}=this;this.$d.years=roundNumber(t/MILLISECONDS_A_YEAR);t%=MILLISECONDS_A_YEAR;this.$d.months=roundNumber(t/MILLISECONDS_A_MONTH);t%=MILLISECONDS_A_MONTH;this.$d.days=roundNumber(t/MILLISECONDS_A_DAY);t%=MILLISECONDS_A_DAY;this.$d.hours=roundNumber(t/MILLISECONDS_A_HOUR);t%=MILLISECONDS_A_HOUR;this.$d.minutes=roundNumber(t/MILLISECONDS_A_MINUTE);t%=MILLISECONDS_A_MINUTE;this.$d.seconds=roundNumber(t/MILLISECONDS_A_SECOND);t%=MILLISECONDS_A_SECOND;this.$d.milliseconds=t}toISOString(){const t=getNumberUnitFormat(this.$d.years,"Y");const s=getNumberUnitFormat(this.$d.months,"M");let e=+this.$d.days||0;if(this.$d.weeks){e+=this.$d.weeks*7}const i=getNumberUnitFormat(e,"D");const r=getNumberUnitFormat(this.$d.hours,"H");const n=getNumberUnitFormat(this.$d.minutes,"M");let o=this.$d.seconds||0;if(this.$d.milliseconds){o+=this.$d.milliseconds/1e3}const u=getNumberUnitFormat(o,"S");const a=t.negative||s.negative||i.negative||r.negative||n.negative||u.negative;const h=r.format||n.format||u.format?"T":"";const d=a?"-":"";const m=`${d}P${t.format}${s.format}${i.format}${h}${r.format}${n.format}${u.format}`;return m==="P"||m==="-P"?"P0D":m}toJSON(){return this.toISOString()}format(t){const s=t||"YYYY-MM-DDTHH:mm:ss";const e={Y:this.$d.years,YY:$u.s(this.$d.years,2,"0"),YYYY:$u.s(this.$d.years,4,"0"),M:this.$d.months,MM:$u.s(this.$d.months,2,"0"),D:this.$d.days,DD:$u.s(this.$d.days,2,"0"),H:this.$d.hours,HH:$u.s(this.$d.hours,2,"0"),m:this.$d.minutes,mm:$u.s(this.$d.minutes,2,"0"),s:this.$d.seconds,ss:$u.s(this.$d.seconds,2,"0"),SSS:$u.s(this.$d.milliseconds,3,"0")};return s.replace(REGEX_FORMAT,(t,s)=>s||String(e[t]))}as(t){return this.$ms/unitToMS[prettyUnit(t)]}get(t){let s=this.$ms;const e=prettyUnit(t);if(e==="milliseconds"){s%=1e3}else if(e==="weeks"){s=roundNumber(s/unitToMS[e])}else{s=this.$d[e]}return s===0?0:s}add(t,s,e){let i;if(s){i=t*unitToMS[prettyUnit(s)]}else if(isDuration(t)){i=t.$ms}else{i=wrapper(t,this).$ms}return wrapper(this.$ms+i*(e?-1:1),this)}subtract(t,s){return this.add(t,s,true)}locale(t){const s=this.clone();s.$l=t;return s}clone(){return wrapper(this.$ms,this)}humanize(t){return $d().add(this.$ms,"ms").locale(this.$l).fromNow(!t)}milliseconds(){return this.get("milliseconds")}asMilliseconds(){return this.as("milliseconds")}seconds(){return this.get("seconds")}asSeconds(){return this.as("seconds")}minutes(){return this.get("minutes")}asMinutes(){return this.as("minutes")}hours(){return this.get("hours")}asHours(){return this.as("hours")}days(){return this.get("days")}asDays(){return this.as("days")}weeks(){return this.get("weeks")}asWeeks(){return this.as("weeks")}months(){return this.get("months")}asMonths(){return this.as("months")}years(){return this.get("years")}asYears(){return this.as("years")}}export default(t,s,i)=>{$d=i;$u=i().$utils();i.duration=function(t,s){const e=i.locale();return wrapper(t,{$l:e},s)};i.isDuration=isDuration;const e=s.prototype.add;const r=s.prototype.subtract;s.prototype.add=function(t,s){if(isDuration(t))t=t.asMilliseconds();return e.bind(this)(t,s)};s.prototype.subtract=function(t,s){if(isDuration(t))t=t.asMilliseconds();return r.bind(this)(t,s)}};