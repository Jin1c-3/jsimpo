import LinkedList from"../linked-list/LinkedList";export default class GraphVertex{constructor(e){if(e===undefined){throw new Error("Graph vertex must have a value")}const t=(e,t)=>{if(e.getKey()===t.getKey()){return 0}return e.getKey()<t.getKey()?-1:1};this.value=e;this.edges=new LinkedList(t)}addEdge(e){this.edges.append(e);return this}deleteEdge(e){this.edges.delete(e)}getNeighbors(){const e=this.edges.toArray();const t=e=>{return e.value.startVertex===this?e.value.endVertex:e.value.startVertex};return e.map(t)}getEdges(){return this.edges.toArray().map(e=>e.value)}getDegree(){return this.edges.toArray().length}hasEdge(t){const e=this.edges.find({callback:e=>e===t});return!!e}hasNeighbor(t){const e=this.edges.find({callback:e=>e.startVertex===t||e.endVertex===t});return!!e}findEdge(t){const e=e=>{return e.startVertex===t||e.endVertex===t};const r=this.edges.find({callback:e});return r?r.value:null}getKey(){return this.value}deleteAllEdges(){this.getEdges().forEach(e=>this.deleteEdge(e));return this}toString(e){return e?e(this.value):`${this.value}`}}