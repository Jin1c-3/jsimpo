"use strict";const common=require("../common");const assert=require("assert");const stream=require("stream");{const writable=new stream.Writable;writable._write=(e,t,r)=>{r(new Error("write test error"))};writable.on("finish",common.mustNotCall());writable.on("prefinish",common.mustNotCall());writable.on("error",common.mustCall(e=>{assert.strictEqual(e.message,"write test error")}));writable.end("test")}{const writable=new stream.Writable;writable._write=(e,t,r)=>{setImmediate(r,new Error("write test error"))};writable.on("finish",common.mustNotCall());writable.on("prefinish",common.mustNotCall());writable.on("error",common.mustCall(e=>{assert.strictEqual(e.message,"write test error")}));writable.end("test")}{const writable=new stream.Writable;writable._write=(e,t,r)=>{r(new Error("write test error"))};writable._writev=(e,t)=>{t(new Error("writev test error"))};writable.on("finish",common.mustNotCall());writable.on("prefinish",common.mustNotCall());writable.on("error",common.mustCall(e=>{assert.strictEqual(e.message,"writev test error")}));writable.cork();writable.write("test");setImmediate(function(){writable.end("test")})}{const writable=new stream.Writable;writable._write=(e,t,r)=>{setImmediate(r,new Error("write test error"))};writable._writev=(e,t)=>{setImmediate(t,new Error("writev test error"))};writable.on("finish",common.mustNotCall());writable.on("prefinish",common.mustNotCall());writable.on("error",common.mustCall(e=>{assert.strictEqual(e.message,"writev test error")}));writable.cork();writable.write("test");setImmediate(function(){writable.end("test")})}{const rs=new stream.Readable;rs.push("ok");rs.push(null);rs._read=()=>{};const ws=new stream.Writable;ws.on("finish",common.mustNotCall());ws.on("error",common.mustCall());ws._write=(e,t,r)=>{setImmediate(r,new Error)};rs.pipe(ws)}{const rs=new stream.Readable;rs.push("ok");rs.push(null);rs._read=()=>{};const ws=new stream.Writable;ws.on("finish",common.mustNotCall());ws.on("error",common.mustCall());ws._write=(e,t,r)=>{r(new Error)};rs.pipe(ws)}{const w=new stream.Writable;w._write=(e,t,r)=>{process.nextTick(r)};w.on("error",common.mustCall());w.on("finish",common.mustNotCall());w.on("prefinish",()=>{w.write("shouldn't write in prefinish listener")});w.end()}{const w=new stream.Writable;w._write=(e,t,r)=>{process.nextTick(r)};w.on("error",common.mustCall());w.on("finish",()=>{w.write("shouldn't write in finish listener")});w.end()}