var async=require("../lib");var{expect}=require("chai");var assert=require("assert");describe("queue",function(){this.retries(3);it("basics",e=>{var s=[];var o=[50,10,180,10];var r=async.queue((e,t)=>{setTimeout(()=>{s.push("process "+e);t("error","arg")},o.shift())},2);r.push(1,(e,t)=>{expect(e).to.equal("error");expect(t).to.equal("arg");expect(r.length()).to.equal(1);s.push("callback "+1)});r.push(2,(e,t)=>{expect(e).to.equal("error");expect(t).to.equal("arg");expect(r.length()).to.equal(2);s.push("callback "+2)});r.push(3,(e,t)=>{expect(e).to.equal("error");expect(t).to.equal("arg");expect(r.length()).to.equal(0);s.push("callback "+3)});r.push(4,(e,t)=>{expect(e).to.equal("error");expect(t).to.equal("arg");expect(r.length()).to.equal(0);s.push("callback "+4)});expect(r.length()).to.equal(4);expect(r.concurrency).to.equal(2);r.drain(()=>{expect(s).to.eql(["process 2","callback 2","process 1","callback 1","process 4","callback 4","process 3","callback 3"]);expect(r.concurrency).to.equal(2);expect(r.length()).to.equal(0);e()})});it("default concurrency",e=>{var s=[],o=[50,10,180,10];var r=async.queue((e,t)=>{setTimeout(()=>{s.push("process "+e);t("error","arg")},o.shift())});r.push(1,(e,t)=>{expect(e).to.equal("error");expect(t).to.equal("arg");expect(r.length()).to.equal(3);s.push("callback "+1)});r.push(2,(e,t)=>{expect(e).to.equal("error");expect(t).to.equal("arg");expect(r.length()).to.equal(2);s.push("callback "+2)});r.push(3,(e,t)=>{expect(e).to.equal("error");expect(t).to.equal("arg");expect(r.length()).to.equal(1);s.push("callback "+3)});r.push(4,(e,t)=>{expect(e).to.equal("error");expect(t).to.equal("arg");expect(r.length()).to.equal(0);s.push("callback "+4)});expect(r.length()).to.equal(4);expect(r.concurrency).to.equal(1);r.drain(()=>{expect(s).to.eql(["process 1","callback 1","process 2","callback 2","process 3","callback 3","process 4","callback 4"]);expect(r.concurrency).to.equal(1);expect(r.length()).to.equal(0);e()})});it("zero concurrency",e=>{expect(()=>{async.queue((e,t)=>{t(null,e)},0)}).to.throw();e()});it("error propagation",e=>{var t=[];var s=async.queue((e,t)=>{t(e.name==="foo"?new Error("fooError"):null)},2);s.drain(()=>{expect(t).to.eql(["bar","fooError"]);e()});s.push({name:"bar"},e=>{if(e){t.push("barError");return}t.push("bar")});s.push({name:"foo"},e=>{if(e){t.push("fooError");return}t.push("foo")})});it("pushAsync",e=>{const t=[];var s=async.queue((e,t)=>{if(e===2)return t(new Error("fail"));t()});s.pushAsync(1,()=>{throw new Error("should not be called")}).then(()=>t.push(1));s.pushAsync(2).catch(e=>{expect(e.message).to.equal("fail");t.push(2)});s.pushAsync([3,4]).map(e=>e.then(()=>t.push("arr")));s.drain(()=>setTimeout(()=>{console.log("drain");expect(t).to.eql([1,2,"arr","arr"]);e()}))});it("unshiftAsync",e=>{const t=[];var s=async.queue((e,t)=>{if(e===2)return t(new Error("fail"));t()});s.unshiftAsync(1).then(()=>t.push(1));s.unshiftAsync(2).catch(e=>{expect(e.message).to.equal("fail");t.push(2)});s.unshiftAsync([3,4]).map(e=>e.then(()=>t.push("arr")));s.drain(()=>setTimeout(()=>{console.log("drain");expect(t).to.eql(["arr","arr",2,1]);e()}))});it("global error handler",e=>{var s=[];var t=async.queue((e,t)=>{t(e.name==="foo"?new Error("fooError"):null)},2);t.error((e,t)=>{expect(e).to.exist;expect(e.message).to.equal("fooError");expect(t.name).to.equal("foo");s.push("fooError")});t.drain(()=>{expect(s).to.eql(["fooError","bar"]);e()});t.push({name:"foo"});t.push({name:"bar"},e=>{expect(e).to.not.exist;s.push("bar")})});it("changing concurrency",e=>{var t=async.queue((e,t)=>{setTimeout(()=>{t()},10)},1);for(var s=0;s<50;s++){t.push("")}t.drain(e);setTimeout(()=>{expect(t.concurrency).to.equal(1);t.concurrency=2;setTimeout(()=>{expect(t.running()).to.equal(2);t.concurrency=5;setTimeout(()=>{expect(t.running()).to.equal(5)},40)},40)},40)});it("push without callback",function(e){this.retries(3);var s=[];var o=[50,10,180,10];var r=[];var a=0;var t=async.queue((e,t)=>{a++;r.push(a);setTimeout(()=>{s.push("process "+e);a--;t("error","arg")},o.shift())},2);t.push(1);t.push(2);t.push(3);t.push(4);t.drain(()=>{expect(a).to.eql(0);expect(r).to.eql([1,2,2,2]);expect(s).to.eql(["process 2","process 1","process 4","process 3"]);e()})});it("push with non-function",e=>{var t=async.queue(()=>{},1);expect(()=>{t.push({},1)}).to.throw();e()});it("push with arrays",e=>{const s=[];var t=async.queue((e,t)=>{s.push(e);t()},1);t.push([[1,2,3],[4,5,6]]);t.drain(()=>{expect(s).to.eql([[1,2,3],[4,5,6]]);e()})});it("unshift",e=>{var s=[];var t=async.queue((e,t)=>{s.push(e);t()},1);t.unshift(4);t.unshift(3);t.unshift(2);t.unshift(1);setTimeout(()=>{expect(s).to.eql([1,2,3,4]);e()},100)});it("too many callbacks",s=>{var e=async.queue((e,t)=>{t();expect(()=>{t()}).to.throw();s()},2);e.push(1)});it("bulk task",e=>{var s=[],o=[50,10,180,10];var t=async.queue((e,t)=>{setTimeout(()=>{s.push("process "+e);t("error",e)},o.splice(0,1)[0])},2);t.push([1,2,3,4],(e,t)=>{expect(e).to.equal("error");s.push("callback "+t)});expect(t.length()).to.equal(4);expect(t.concurrency).to.equal(2);t.drain(()=>{expect(s).to.eql(["process 2","callback 2","process 1","callback 1","process 4","callback 4","process 3","callback 3"]);expect(t.concurrency).to.equal(2);expect(t.length()).to.equal(0);e()})});it("idle",e=>{var s=async.queue((e,t)=>{expect(s.idle()).to.equal(false);t()},1);expect(s.idle()).to.equal(true);s.unshift(4);s.unshift(3);s.unshift(2);s.unshift(1);expect(s.idle()).to.equal(false);s.drain(()=>{expect(s.idle()).to.equal(true);e()})});it("pause",e=>{var s=[];var o=0;var r=[];var t=["process 1","process 2","process 3"];var a=async.queue((e,t)=>{o++;s.push("process "+e);r.push(o);setTimeout(()=>{o--;t()},10)},2);a.push(1);a.push(2,u);a.push(3);function u(){a.pause();expect(r).to.eql([1,2,2]);expect(s).to.eql(t);setTimeout(c,5);setTimeout(p,10)}function c(){a.push(4)}function p(){expect(r).to.eql([1,2,2]);expect(s).to.eql(t);a.resume();a.push(5);a.push(6);a.drain(n)}function n(){expect(r).to.eql([1,2,2,1,2,2]);expect(s).to.eql(["process 1","process 2","process 3","process 4","process 5","process 6"]);e()}});it("pause in worker with concurrency",e=>{var s=[];var o=async.queue((e,t)=>{if(e.isLongRunning){o.pause();setTimeout(()=>{s.push(e.id);o.resume();t()},50)}else{s.push(e.id);setTimeout(t,10)}},10);o.push({id:1,isLongRunning:true});o.push({id:2});o.push({id:3});o.push({id:4});o.push({id:5});o.drain(()=>{expect(s).to.eql([1,2,3,4,5]);e()})});it("start paused",e=>{var s=async.queue((e,t)=>{if(e===2){expect(s.length()).to.equal(1);expect(s.running()).to.equal(2)}setTimeout(()=>{t()},40)},2);s.pause();s.push([1,2,3]);setTimeout(()=>{expect(s.running()).to.equal(0);s.resume()},5);s.drain(e)});it("kill",e=>{var t=async.queue(()=>{setTimeout(()=>{throw new Error("Function should never be called")},20)},1);t.drain(()=>{throw new Error("Function should never be called")});t.push(0);t.kill();setTimeout(()=>{expect(t.length()).to.equal(0);e()},40)});it("events",e=>{var s=[];var t=async.queue((e,t)=>{s.push("process "+e);setTimeout(t,10)},3);t.concurrency=3;t.saturated(()=>{assert(t.running()==3,"queue should be saturated now");s.push("saturated")});t.empty(()=>{assert(t.length()===0,"queue should be empty now");s.push("empty")});t.drain(()=>{assert(t.length()===0&&t.running()===0,"queue should be empty now and no more workers should be running");s.push("drain");expect(s).to.eql(["process foo","process bar","saturated","process zoo","foo cb","saturated","process poo","bar cb","empty","saturated","process moo","zoo cb","poo cb","moo cb","drain"]);e()});t.push("foo",()=>{s.push("foo cb")});t.push("bar",()=>{s.push("bar cb")});t.push("zoo",()=>{s.push("zoo cb")});t.push("poo",()=>{s.push("poo cb")});t.push("moo",()=>{s.push("moo cb")})});it("empty",e=>{var s=[];var t=async.queue((e,t)=>{s.push("process "+e);async.setImmediate(t)},3);t.drain(()=>{assert(t.length()===0&&t.running()===0,"queue should be empty now and no more workers should be running");s.push("drain");expect(s).to.eql(["drain"]);e()});t.push([])});it("empty and not idle()",e=>{var s=[];var t=async.queue((e,t)=>{s.push("process "+e);async.setImmediate(t)},1);t.empty(()=>{s.push("empty");assert(t.idle()===false,"tasks should be running when empty is called");expect(t.running()).to.equal(1)});t.drain(()=>{s.push("drain");expect(s).to.eql(["empty","process 1","drain"]);e()});t.push(1)});it("saturated",e=>{var t=false;var s=async.queue((e,t)=>{async.setImmediate(t)},2);s.saturated(()=>{t=true});s.drain(()=>{assert(t,"saturated not called");e()});s.push(["foo","bar","baz","moo"])});it("started",e=>{var t=async.queue((e,t)=>{t(null,e)});expect(t.started).to.equal(false);t.push("a");expect(t.started).to.equal(true);e()});context("q.saturated(): ",()=>{it("should call the saturated callback if tasks length is concurrency",e=>{var s=[];var t=async.queue((e,t)=>{s.push("process "+e);async.setImmediate(t)},4);t.saturated(()=>{s.push("saturated")});t.empty(()=>{expect(s.indexOf("saturated")).to.be.above(-1);setTimeout(()=>{expect(s).eql(["process foo0","process foo1","process foo2","saturated","process foo3","foo0 cb","saturated","process foo4","foo1 cb","foo2 cb","foo3 cb","foo4 cb"]);e()},50)});t.push("foo0",()=>{s.push("foo0 cb")});t.push("foo1",()=>{s.push("foo1 cb")});t.push("foo2",()=>{s.push("foo2 cb")});t.push("foo3",()=>{s.push("foo3 cb")});t.push("foo4",()=>{s.push("foo4 cb")})})});context("q.unsaturated(): ",()=>{it("should have a default buffer property that equals 25% of the concurrenct rate",e=>{var s=[];var t=async.queue((e,t)=>{s.push("process "+e);async.setImmediate(t)},10);expect(t.buffer).to.equal(2.5);e()});it("should allow a user to change the buffer property",e=>{var s=[];var t=async.queue((e,t)=>{s.push("process "+e);async.setImmediate(t)},10);t.buffer=4;expect(t.buffer).to.not.equal(2.5);expect(t.buffer).to.equal(4);e()});it("should call the unsaturated callback if tasks length is less than concurrency minus buffer",e=>{var s=[];var t=async.queue((e,t)=>{s.push("process "+e);async.setImmediate(t)},4);t.unsaturated(()=>{s.push("unsaturated")});t.empty(()=>{expect(s.indexOf("unsaturated")).to.be.above(-1);setTimeout(()=>{expect(s).eql(["process foo0","process foo1","process foo2","process foo3","foo0 cb","unsaturated","process foo4","foo1 cb","unsaturated","foo2 cb","unsaturated","foo3 cb","unsaturated","foo4 cb","unsaturated"]);e()},50)});t.push("foo0",()=>{s.push("foo0 cb")});t.push("foo1",()=>{s.push("foo1 cb")});t.push("foo2",()=>{s.push("foo2 cb")});t.push("foo3",()=>{s.push("foo3 cb")});t.push("foo4",()=>{s.push("foo4 cb")})})});context("workersList",()=>{it("should be the same length as running()",e=>{var s=async.queue((e,t)=>{async.setImmediate(()=>{expect(s.workersList().length).to.equal(s.running());t()})},2);s.drain(()=>{expect(s.workersList().length).to.equal(0);expect(s.running()).to.equal(0);e()});s.push("foo");s.push("bar");s.push("baz")});it("should contain the items being processed",e=>{var s={foo:["foo"],foo_cb:["foo","bar"],bar:["foo","bar"],bar_cb:["bar","baz"],baz:["bar","baz"],baz_cb:["baz"]};function o(e){return e.workersList().map(e=>{return e.data})}var r=async.queue((e,t)=>{expect(o(r)).to.eql(s[e]);expect(r.workersList().length).to.equal(r.running());async.setImmediate(()=>{expect(o(r)).to.eql(s[e+"_cb"]);expect(r.workersList().length).to.equal(r.running());t()})},2);r.drain(()=>{expect(r.workersList()).to.eql([]);expect(r.workersList().length).to.equal(r.running());e()});r.push("foo");r.push("bar");r.push("baz")})});it("remove",e=>{var s=[];var t=async.queue((e,t)=>{s.push(e);async.setImmediate(t)});t.push([1,2,3,4,5]);t.remove(e=>{return e.data===3});t.drain(()=>{expect(s).to.eql([1,2,4,5]);e()})});it("should be iterable",e=>{var s=async.queue((e,t)=>{if(e===3){s.push(6);expect([...s]).to.eql([4,5,6])}async.setImmediate(t)});s.push([1,2,3,4,5]);expect([...s]).to.eql([1,2,3,4,5]);s.drain(()=>{expect([...s]).to.eql([]);e()})});it("should error when re-assigning event methods",()=>{var e=async.queue(()=>{});expect(()=>{e.drain=()=>{}}).to.throw()})});