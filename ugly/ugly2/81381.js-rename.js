const _=require("lodash");const crypto=require("crypto");const debug=require("@tryghost/debug")("frontend:services:settings:index");const SettingsLoader=require("./loader");const ensureSettingsFiles=require("./ensure-settings");const errors=require("@tryghost/errors");const defaultHashes={routes:"3d180d52c663d173a6be791ef411ed01"};const calculateHash=e=>{return crypto.createHash("md5").update(e,"binary").digest("hex")};module.exports={init:function(){const e=this.knownSettings();debug("init settings service for:",e);return ensureSettingsFiles(e)},knownSettings:function e(){return["routes"]},get:function e(t){const s=this.knownSettings();if(!t||_.indexOf(s,t)<0){throw new errors.IncorrectUsageError({message:`Requested setting is not supported: '${t}'.`,help:`Please use only the supported settings: ${s}.`})}return SettingsLoader(t)},getAll:function e(){const t=this.knownSettings();const s={};_.each(t,function(e){s[e]=SettingsLoader(e)});return s},getDefaulHash:e=>{return defaultHashes[e]},getCurrentHash:async e=>{const t=await SettingsLoader.loadSettings(e);return calculateHash(JSON.stringify(t))}};