import Vue from"vue";describe("Options _scopeId",()=>{it("should add scopeId attributes",()=>{const e=new Vue({_scopeId:"foo",template:"<div><p><span></span></p></div>"}).$mount();expect(e.$el.hasAttribute("foo")).toBe(true);expect(e.$el.children[0].hasAttribute("foo")).toBe(true);expect(e.$el.children[0].children[0].hasAttribute("foo")).toBe(true)});it("should add scopedId attributes from both parent and child on child root",()=>{const e=new Vue({_scopeId:"foo",template:"<div><child></child></div>",components:{child:{_scopeId:"bar",template:"<div></div>"}}}).$mount();expect(e.$el.children[0].hasAttribute("foo")).toBe(true);expect(e.$el.children[0].hasAttribute("bar")).toBe(true)});it("should add scopedId attributes from both parent and child on slot contents",()=>{const e=new Vue({_scopeId:"foo",template:"<div><child><p>hi</p></child></div>",components:{child:{_scopeId:"bar",template:"<div><slot></slot></div>"}}}).$mount();expect(e.$el.children[0].children[0].hasAttribute("foo")).toBe(true);expect(e.$el.children[0].children[0].hasAttribute("bar")).toBe(true)});it("should not discard parent scopeId when component root element is replaced",e=>{const t=new Vue({_scopeId:"data-1",template:`<div><child ref="child" /></div>`,components:{child:{_scopeId:"data-2",data:()=>({show:true}),template:'<div v-if="show"></div>'}}}).$mount();const o=t.$refs.child;expect(o.$el.hasAttribute("data-1")).toBe(true);expect(o.$el.hasAttribute("data-2")).toBe(true);o.show=false;waitForUpdate(()=>{o.show=true}).then(()=>{expect(o.$el.hasAttribute("data-1")).toBe(true);expect(o.$el.hasAttribute("data-2")).toBe(true)}).then(e)});it("should work on functional components",()=>{const e={functional:true,_scopeId:"child",render(e){return e("div",{class:"child"},[e("span",{class:"child"},"child")])}};const t=new Vue({_scopeId:"parent",components:{child:e},template:"<div><child></child></div>"}).$mount();expect(t.$el.hasAttribute("parent")).toBe(true);const o=t.$el.querySelectorAll(".child");[].forEach.call(o,e=>{expect(e.hasAttribute("child")).toBe(true);expect(e.hasAttribute("parent")).toBe(false)})})});