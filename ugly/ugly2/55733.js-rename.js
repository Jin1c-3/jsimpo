"use strict";const common=require("../common");const assert=require("assert");const{internalBinding}=require("internal/test/binding");const cares=internalBinding("cares_wrap");const{promisify}=require("util");const originalGetaddrinfo=cares.getaddrinfo;const calls=[];cares.getaddrinfo=common.mustCallAtLeast((...s)=>{calls.push(s);originalGetaddrinfo(...s)},1);const dns=require("dns");const dnsPromises=dns.promises;let verbatim;function allowFailed(s){return s.catch(s=>{})}(async()=>{let a=0;const s=s=>{assert.strictEqual(calls.length,a+1);verbatim=calls[a][4];assert.strictEqual(verbatim,s);a+=1};await allowFailed(promisify(dns.lookup)("example.org"));s(false);await allowFailed(dnsPromises.lookup("example.org"));s(false);await allowFailed(promisify(dns.lookup)("example.org",{}));s(false);await allowFailed(dnsPromises.lookup("example.org",{}));s(false)})().then(common.mustCall());