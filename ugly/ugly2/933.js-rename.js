import Taro from"@tarojs/api";import"whatwg-fetch";import jsonpRetry from"jsonp-retry";import{serializeParams}from"../utils";const{Link}=Taro;function generateRequestUrlWithParams(e,t){t=typeof t==="string"?t:serializeParams(t);if(t){e+=(~e.indexOf("?")?"&":"?")+t}e=e.replace("?&","?");return e}function _request(r){r=r||{};if(typeof r==="string"){r={url:r}}const{success:t,complete:n,fail:o}=r;let e=r.url;const a={};const s={};if(r.jsonp){Object.assign(a,r);a.params=r.data;a.cache=r.jsonpCache;if(typeof r.jsonp==="string"){a.name=r.jsonp}delete a.jsonp;return jsonpRetry(e,a).then(e=>{s.statusCode=200;s.data=e;typeof t==="function"&&t(s);typeof n==="function"&&n(s);return s}).catch(e=>{typeof o==="function"&&o(e);typeof n==="function"&&n(s);return Promise.reject(e)})}a.method=r.method||"GET";const i=a.method.toUpperCase();a.cache=r.cache||"default";if(i==="GET"||i==="HEAD"){e=generateRequestUrlWithParams(e,r.data)}else if(typeof r.data==="object"){r.header=r.header||{};const f=Object.keys(r.header).find(e=>e.toLowerCase()==="content-type");if(!f){r.header["Content-Type"]="application/json"}const c=r.header[f||"Content-Type"];if(c.indexOf("application/json")>=0){a.body=JSON.stringify(r.data)}else if(c.indexOf("application/x-www-form-urlencoded")>=0){a.body=serializeParams(r.data)}else{a.body=r.data}}else{a.body=r.data}if(r.header){a.headers=r.header}if(r.mode){a.mode=r.mode}if(r.signal){a.signal=r.signal}a.credentials=r.credentials;return fetch(e,a).then(e=>{s.statusCode=e.status;s.header={};for(const t of e.headers.keys()){s.header[t]=e.headers.get(t)}if(!e.ok){throw e}if(r.responseType==="arraybuffer"){return e.arrayBuffer()}if(s.statusCode!==204){if(r.dataType==="json"||typeof r.dataType==="undefined"){return e.json()}}if(r.responseType==="text"||r.dataType==="text"){return e.text()}return Promise.resolve(null)}).then(e=>{s.data=e;typeof t==="function"&&t(s);typeof n==="function"&&n(s);return s}).catch(e=>{typeof o==="function"&&o(e);typeof n==="function"&&n(s);return Promise.reject(e)})}function taroInterceptor(e){return _request(e.requestParams)}const link=new Link(taroInterceptor);export const request=link.request.bind(link);export const addInterceptor=link.addInterceptor.bind(link);