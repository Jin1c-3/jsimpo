module.exports={entry(){return Promise.resolve({app:{import:"./app.js",dependOn:["other-vendors"]},page1:{import:"./page1.js",dependOn:["app","react-vendors"]},page2:{import:"./page2.js",dependOn:["app","react-vendors"]},page3:{import:"./page3.js",dependOn:["app"]},"react-vendors":["react","react-dom","prop-types"],"other-vendors":"./other-vendors"})},target:"web",optimization:{runtimeChunk:"single"},output:{filename:"[name].js"},plugins:[function(){const e=p=>{p.hooks.afterSeal.tap("testcase",()=>{const{chunkGraph:e}=p;const o={};for(const t of p.chunks){o[t.name]=new Set;for(const n of e.getChunkModulesIterable(t)){o[t.name].add(n.identifier())}}for(const n of o["other-vendors"]){expect([...o.app]).not.toContain(n)}for(const n of[...o["other-vendors"],...o["react-vendors"],...o["app"]]){expect(o.page1).not.toContain(n);expect(o.page2).not.toContain(n)}for(const n of[...o["other-vendors"],...o["app"]]){expect([...o.page3]).not.toContain(n)}})};this.hooks.compilation.tap("testcase",e)}]};