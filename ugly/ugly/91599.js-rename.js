const jobsManager=require(`../../utils/jobs/manager`);jest.spyOn(jobsManager,`enqueueJob`);jest.spyOn(jobsManager,`removeInProgressJob`);jest.mock(`uuid/v4`,()=>()=>`1234`);import{jobsV2Reducer as jobsReducer}from"../reducers/jobsv2";describe(`Job v2 actions/reducer`,()=>{const c={name:`test-plugin`,version:`1.0.0`,resolve:`/node_modules/test-plugin`};const r=e=>{return{program:{directory:__dirname},jobsV2:jobsReducer(undefined,{}),...e}};beforeEach(()=>{jobsManager.enqueueJob.mockClear();jobsManager.enqueueJob.mockImplementation(()=>Promise.resolve(`myresult`))});const a=e=>{const t=e=>jobsReducer(o().jobsV2,e);const o=()=>e;return e=>e(t,o)};const i=()=>{let o;jest.isolateModules(()=>{const{actions:e,internalActions:t}=require(`../actions`);o={actions:e,internalActions:t}});return o};it(`should enqueueJob`,async()=>{const{actions:e}=i();const t=r();const o=a(t);const s=o(e.createJobV2({name:`TEST_JOB`,inputPaths:[],outputDir:`/public/static`,args:{}},c));expect(t.jobsV2).toMatchSnapshot();expect(t.jobsV2.complete.size).toBe(0);expect(t.jobsV2.incomplete.size).toBe(1);await s;const n=Array.from(t.jobsV2.complete.values());expect(t.jobsV2.complete.size).toBe(1);expect(n[0]).toEqual({result:`myresult`,inputPaths:[]});expect(jobsManager.removeInProgressJob).toHaveBeenCalledTimes(1);expect(jobsManager.enqueueJob).toMatchSnapshot()});it(`should return the result when job already ran`,async()=>{const{actions:e}=i();const t=r();const o=a(t);const s={name:`TEST_JOB`,inputPaths:[],outputDir:`/public/static`,args:{}};await expect(o(e.createJobV2(s,c))).resolves.toBe(`myresult`);await expect(o(e.createJobV2(s,c))).resolves.toBe(`myresult`);expect(jobsManager.enqueueJob).toHaveBeenCalledTimes(1)});it(`should remove a stale job`,async()=>{const{internalActions:e}=i();const{jobsV2:t}=r();t.complete.set(`1234`,{});t.incomplete.set(`12345`,{});jobsReducer(t,e.removeStaleJob(`1234`));expect(t.complete.size).toBe(0);expect(t.incomplete.size).toBe(1);jobsReducer(t,e.removeStaleJob(`12345`));expect(t.complete.size).toBe(0);expect(t.incomplete.size).toBe(0)})});