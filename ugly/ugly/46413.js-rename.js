import cheerio from"cheerio";import"flat-map-polyfill";import{pathExists,readdir,readFile,readJSON,remove}from"fs-extra";import{check,File,findPort,killApp,launchApp,nextBuild,nextStart,renderViaHTTP,waitFor}from"next-test-utils";import webdriver from"next-webdriver";import{join}from"path";jest.setTimeout(1e3*60*2);const fixturesDir=join(__dirname,"../..","css-fixtures");describe("CSS Support",()=>{describe("Basic Global Support",()=>{const o=join(fixturesDir,"single-global");beforeAll(async()=>{await remove(join(o,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(o,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've emitted a single CSS file`,async()=>{const e=join(o,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css$/.test(e));expect(a.length).toBe(1);expect(await readFile(join(e,a[0]),"utf8")).toContain("color:red")})});describe("Basic Global Support with src/ dir",()=>{const o=join(fixturesDir,"single-global-src");beforeAll(async()=>{await remove(join(o,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(o,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've emitted a single CSS file`,async()=>{const e=join(o,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css$/.test(e));expect(a.length).toBe(1);expect(await readFile(join(e,a[0]),"utf8")).toContain("color:red")})});describe("Multi Global Support",()=>{const i=join(fixturesDir,"multi-global");beforeAll(async()=>{await remove(join(i,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(i,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've emitted a single CSS file`,async()=>{const e=join(i,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css$/.test(e));expect(a.length).toBe(1);const o=await readFile(join(e,a[0]),"utf8");expect(o.replace(/\/\*.*?\*\//g,"").trim()).toMatchInlineSnapshot(`".red-text{color:red}.blue-text{color:blue}"`)})});describe("Nested @import() Global Support",()=>{const i=join(fixturesDir,"nested-global");beforeAll(async()=>{await remove(join(i,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(i,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've emitted a single CSS file`,async()=>{const e=join(i,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css$/.test(e));expect(a.length).toBe(1);const o=await readFile(join(e,a[0]),"utf8");expect(o.replace(/\/\*.*?\*\//g,"").trim()).toMatchInlineSnapshot(`".red-text{color:purple;font-weight:bolder;color:red}.blue-text{color:orange;font-weight:bolder;color:blue}"`)})});describe("CSS Compilation and Prefixing",()=>{const c=join(fixturesDir,"compilation-and-prefixing");beforeAll(async()=>{await remove(join(c,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(c,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've compiled and prefixed`,async()=>{const e=join(c,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css$/.test(e));expect(a.length).toBe(1);const o=await readFile(join(e,a[0]),"utf8");expect(o.replace(/\/\*.*?\*\//g,"").trim()).toMatchInlineSnapshot(`"@media (min-width:480px) and (max-width:767px){::-moz-placeholder{color:green}:-ms-input-placeholder{color:green}::placeholder{color:green}}.flex-parsing{flex:0 0 calc(50% - var(--vertical-gutter))}.transform-parsing{transform:translate3d(0,0)}.css-grid-shorthand{grid-column:span 2}.g-docs-sidenav .filter::-webkit-input-placeholder{opacity:80%}"`);expect(o).toMatch(/\/\*#\s*sourceMappingURL=(.+\.map)\s*\*\//)});it(`should've emitted a source map`,async()=>{const e=join(c,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css\.map$/.test(e));expect(a.length).toBe(1);const o=(await readFile(join(e,a[0]),"utf8")).trim();const{version:i,mappings:n,sourcesContent:l}=JSON.parse(o);expect({version:i,mappings:n,sourcesContent:l}).toMatchInlineSnapshot(`
        Object {
          "mappings": "AAAA,+CACE,mBACE,WACF,CAFA,uBACE,WACF,CAFA,cACE,WACF,CACF,CAEA,cACE,2CACF,CAEA,mBACE,0BACF,CAEA,oBACE,kBACF,CAEA,mDACE,WACF",
          "sourcesContent": Array [
            "@media (480px <= width < 768px) {
          ::placeholder {
            color: green;
          }
        }

        .flex-parsing {
          flex: 0 0 calc(50% - var(--vertical-gutter));
        }

        .transform-parsing {
          transform: translate3d(0px, 0px);
        }

        .css-grid-shorthand {
          grid-column: span 2;
        }

        .g-docs-sidenav .filter::-webkit-input-placeholder {
          opacity: 80%;
        }
        ",
          ],
          "version": 3,
        }
      `)})});describe("Multi Global Support (reversed)",()=>{const i=join(fixturesDir,"multi-global-reversed");beforeAll(async()=>{await remove(join(i,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(i,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've emitted a single CSS file`,async()=>{const e=join(i,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css$/.test(e));expect(a.length).toBe(1);const o=await readFile(join(e,a[0]),"utf8");expect(o.replace(/\/\*.*?\*\//g,"").trim()).toMatchInlineSnapshot(`".blue-text{color:blue}.red-text{color:red}"`)})});describe("React Lifecyce Order (dev)",()=>{const e=join(fixturesDir,"transition-react");beforeAll(async()=>{await remove(join(e,".next"))});let a;let t;beforeAll(async()=>{a=await findPort();t=await launchApp(e,a)});afterAll(async()=>{await killApp(t)});it("should have the correct color on mount after navigation",async()=>{let e;try{e=await webdriver(a,"/");await e.waitForElementByCss("#link-other").click();const t=await e.waitForElementByCss("#red-title").text();expect(t).toMatchInlineSnapshot(`"rgb(255, 0, 0)"`)}finally{if(e){await e.close()}}})});describe("React Lifecyce Order (production)",()=>{const e=join(fixturesDir,"transition-react");beforeAll(async()=>{await remove(join(e,".next"))});let a;let t;let o;let i;beforeAll(async()=>{({code:o,stdout:i}=await nextBuild(e,[],{stdout:true}));a=await findPort();t=await nextStart(e,a)});afterAll(async()=>{await killApp(t)});it("should have compiled successfully",()=>{expect(o).toBe(0);expect(i).toMatch(/Compiled successfully/)});it("should have the correct color on mount after navigation",async()=>{let e;try{e=await webdriver(a,"/");await e.waitForElementByCss("#link-other").click();const t=await e.waitForElementByCss("#red-title").text();expect(t).toMatchInlineSnapshot(`"rgb(255, 0, 0)"`)}finally{if(e){await e.close()}}})});describe("Invalid CSS in _document",()=>{const a=join(fixturesDir,"invalid-module-document");beforeAll(async()=>{await remove(join(a,".next"))});it("should fail to build",async()=>{const{code:e,stderr:t}=await nextBuild(a,[],{stderr:true});expect(e).not.toBe(0);expect(t).toContain("Failed to compile");expect(t).toContain("styles.module.css");expect(t).toMatch(/CSS.*cannot.*be imported within.*pages[\\/]_document\.js/);expect(t).toMatch(/Location:.*pages[\\/]_document\.js/)})});describe("Invalid Global CSS",()=>{const a=join(fixturesDir,"invalid-global");beforeAll(async()=>{await remove(join(a,".next"))});it("should fail to build",async()=>{const{code:e,stderr:t}=await nextBuild(a,[],{stderr:true});expect(e).not.toBe(0);expect(t).toContain("Failed to compile");expect(t).toContain("styles/global.css");expect(t).toMatch(/Please move all first-party global CSS imports.*?pages(\/|\\)_app/);expect(t).toMatch(/Location:.*pages[\\/]index\.js/)})});describe("Valid Global CSS from npm",()=>{const i=join(fixturesDir,"import-global-from-module");beforeAll(async()=>{await remove(join(i,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(i,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've emitted a single CSS file`,async()=>{const e=join(i,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css$/.test(e));expect(a.length).toBe(1);const o=await readFile(join(e,a[0]),"utf8");expect(o.replace(/\/\*.*?\*\//g,"").trim()).toMatchInlineSnapshot(`".red-text{color:\\"red\\"}"`)})});describe("Invalid Global CSS with Custom App",()=>{const a=join(fixturesDir,"invalid-global-with-app");beforeAll(async()=>{await remove(join(a,".next"))});it("should fail to build",async()=>{const{code:e,stderr:t}=await nextBuild(a,[],{stderr:true});expect(e).not.toBe(0);expect(t).toContain("Failed to compile");expect(t).toContain("styles/global.css");expect(t).toMatch(/Please move all first-party global CSS imports.*?pages(\/|\\)_app/);expect(t).toMatch(/Location:.*pages[\\/]index\.js/)})});describe("Valid and Invalid Global CSS with Custom App",()=>{const a=join(fixturesDir,"valid-and-invalid-global");beforeAll(async()=>{await remove(join(a,".next"))});it("should fail to build",async()=>{const{code:e,stderr:t}=await nextBuild(a,[],{stderr:true});expect(e).not.toBe(0);expect(t).toContain("Failed to compile");expect(t).toContain("styles/global.css");expect(t).toContain("Please move all first-party global CSS imports");expect(t).toMatch(/Location:.*pages[\\/]index\.js/)})});describe("Can hot reload CSS without losing state",()=>{const i=join(fixturesDir,"multi-page");beforeAll(async()=>{await remove(join(i,".next"))});let n;let e;beforeAll(async()=>{n=await findPort();e=await launchApp(i,n)});afterAll(async()=>{await killApp(e)});it("should update CSS color without remounting <input>",async()=>{let e;try{e=await webdriver(n,"/page1");const t="hello world";await e.elementById("text-input").type(t);expect(await e.elementById("text-input").getValue()).toBe(t);const a=await e.eval(`window.getComputedStyle(document.querySelector('.red-text')).color`);expect(a).toMatchInlineSnapshot(`"rgb(255, 0, 0)"`);const o=new File(join(i,"styles/global1.css"));try{o.replace("color: red","color: purple");await check(()=>e.eval(`window.getComputedStyle(document.querySelector('.red-text')).color`),"rgb(128, 0, 128)");expect(await e.elementById("text-input").getValue()).toBe(t)}finally{o.restore()}}finally{if(e){await e.close()}}})});describe("Has CSS in computed styles in Development",()=>{const e=join(fixturesDir,"multi-page");beforeAll(async()=>{await remove(join(e,".next"))});let a;let t;beforeAll(async()=>{a=await findPort();t=await launchApp(e,a)});afterAll(async()=>{await killApp(t)});it("should have CSS for page",async()=>{let e;try{e=await webdriver(a,"/page2");const t=await e.eval(`window.getComputedStyle(document.querySelector('.blue-text')).color`);expect(t).toMatchInlineSnapshot(`"rgb(0, 0, 255)"`)}finally{if(e){await e.close()}}})});describe("Body is not hidden when unused in Development",()=>{const e=join(fixturesDir,"unused");beforeAll(async()=>{await remove(join(e,".next"))});let a;let t;beforeAll(async()=>{a=await findPort();t=await launchApp(e,a)});afterAll(async()=>{await killApp(t)});it("should have body visible",async()=>{let e;try{e=await webdriver(a,"/");const t=await e.eval(`window.getComputedStyle(document.querySelector('body')).display`);expect(t).toBe("block")}finally{if(e){await e.close()}}})});describe("Body is not hidden when broken in Development",()=>{const o=join(fixturesDir,"unused");let i;let e;beforeAll(async()=>{await remove(join(o,".next"));i=await findPort();e=await launchApp(o,i)});afterAll(async()=>{await killApp(e)});it("should have body visible",async()=>{const e=new File(join(o,"pages/index.js"));let t;try{e.replace("<div />","<div>");await waitFor(2e3);t=await webdriver(i,"/");const a=await t.eval(`window.getComputedStyle(document.querySelector('body')).display`);expect(a).toBe("block")}finally{e.restore();if(t){await t.close()}}})});describe("Has CSS in computed styles in Production",()=>{const e=join(fixturesDir,"multi-page");let l;let t;let a;let o;beforeAll(async()=>{await remove(join(e,".next"));({code:o,stdout:a}=await nextBuild(e,[],{stdout:true}));l=await findPort();t=await nextStart(e,l)});afterAll(async()=>{await killApp(t)});it("should have compiled successfully",()=>{expect(o).toBe(0);expect(a).toMatch(/Compiled successfully/)});it("should have CSS for page",async()=>{const e=await webdriver(l,"/page2");const t=await e.eval(`window.getComputedStyle(document.querySelector('.blue-text')).color`);expect(t).toMatchInlineSnapshot(`"rgb(0, 0, 255)"`)});it(`should've preloaded the CSS file and injected it in <head>`,async()=>{const e=await renderViaHTTP(l,"/page2");const t=cheerio.load(e);const a=t('link[rel="preload"][as="style"]');expect(a.length).toBe(1);expect(a.attr("href")).toMatch(/^\/_next\/static\/css\/.*\.css$/);const o=t('link[rel="stylesheet"]');expect(o.length).toBe(1);expect(o.attr("href")).toMatch(/^\/_next\/static\/css\/.*\.css$/);const i=[].slice.call(t('link[rel="preload"]'));const n=i.flatMap((e,t)=>e.attribs.as==="style"?t:[]);expect(n).toEqual([0])})});describe("CSS URL via `file-loader`",()=>{const l=join(fixturesDir,"url-global");beforeAll(async()=>{await remove(join(l,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(l,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've emitted expected files`,async()=>{const e=join(l,".next/static/css");const t=join(l,".next/static/media");const a=await readdir(e);const o=a.filter(e=>/\.css$/.test(e));expect(o.length).toBe(1);const i=await readFile(join(e,o[0]),"utf8");expect(i.replace(/\/\*.*?\*\//g,"").trim()).toMatch(/^\.red-text\{color:red;background-image:url\(\/_next\/static\/media\/dark\.[a-z0-9]{32}\.svg\) url\(\/_next\/static\/media\/dark2\.[a-z0-9]{32}\.svg\)\}\.blue-text\{color:orange;font-weight:bolder;background-image:url\(\/_next\/static\/media\/light\.[a-z0-9]{32}\.svg\);color:blue\}$/);const n=await readdir(t);expect(n.length).toBe(3);expect(n.map(e=>/^(.+?)\..{32}\.(.+?)$/.exec(e).slice(1).join(".")).sort()).toMatchInlineSnapshot(`
        Array [
          "dark.svg",
          "dark2.svg",
          "light.svg",
        ]
      `)})});describe("CSS URL via `file-loader` and asset prefix (1)",()=>{const l=join(fixturesDir,"url-global-asset-prefix-1");beforeAll(async()=>{await remove(join(l,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(l,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've emitted expected files`,async()=>{const e=join(l,".next/static/css");const t=join(l,".next/static/media");const a=await readdir(e);const o=a.filter(e=>/\.css$/.test(e));expect(o.length).toBe(1);const i=await readFile(join(e,o[0]),"utf8");expect(i.replace(/\/\*.*?\*\//g,"").trim()).toMatch(/^\.red-text\{color:red;background-image:url\(\/foo\/_next\/static\/media\/dark\.[a-z0-9]{32}\.svg\) url\(\/foo\/_next\/static\/media\/dark2\.[a-z0-9]{32}\.svg\)\}\.blue-text\{color:orange;font-weight:bolder;background-image:url\(\/foo\/_next\/static\/media\/light\.[a-z0-9]{32}\.svg\);color:blue\}$/);const n=await readdir(t);expect(n.length).toBe(3);expect(n.map(e=>/^(.+?)\..{32}\.(.+?)$/.exec(e).slice(1).join(".")).sort()).toMatchInlineSnapshot(`
        Array [
          "dark.svg",
          "dark2.svg",
          "light.svg",
        ]
      `)})});describe("CSS URL via `file-loader` and asset prefix (2)",()=>{const l=join(fixturesDir,"url-global-asset-prefix-2");beforeAll(async()=>{await remove(join(l,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(l,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've emitted expected files`,async()=>{const e=join(l,".next/static/css");const t=join(l,".next/static/media");const a=await readdir(e);const o=a.filter(e=>/\.css$/.test(e));expect(o.length).toBe(1);const i=await readFile(join(e,o[0]),"utf8");expect(i.replace(/\/\*.*?\*\//g,"").trim()).toMatch(/^\.red-text\{color:red;background-image:url\(\/foo\/_next\/static\/media\/dark\.[a-z0-9]{32}\.svg\) url\(\/foo\/_next\/static\/media\/dark2\.[a-z0-9]{32}\.svg\)\}\.blue-text\{color:orange;font-weight:bolder;background-image:url\(\/foo\/_next\/static\/media\/light\.[a-z0-9]{32}\.svg\);color:blue\}$/);const n=await readdir(t);expect(n.length).toBe(3);expect(n.map(e=>/^(.+?)\..{32}\.(.+?)$/.exec(e).slice(1).join(".")).sort()).toMatchInlineSnapshot(`
        Array [
          "dark.svg",
          "dark2.svg",
          "light.svg",
        ]
      `)})});describe("Good CSS Import from node_modules",()=>{const i=join(fixturesDir,"npm-import");beforeAll(async()=>{await remove(join(i,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(i,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've emitted a single CSS file`,async()=>{const e=join(i,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css$/.test(e));expect(a.length).toBe(1);const o=await readFile(join(e,a[0]),"utf8");expect(o.replace(/\/\*.*?\*\//g,"").trim()).toMatch(/nprogress/)})});describe("Good Nested CSS Import from node_modules",()=>{const i=join(fixturesDir,"npm-import-nested");beforeAll(async()=>{await remove(join(i,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(i,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've emitted a single CSS file`,async()=>{const e=join(i,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css$/.test(e));expect(a.length).toBe(1);const o=await readFile(join(e,a[0]),"utf8");expect(o.replace(/\/\*.*?\*\//g,"").trim()).toMatchInlineSnapshot(`".other{color:blue}.test{color:red}"`)})});describe("CSS Import from node_modules",()=>{const a=join(fixturesDir,"npm-import-bad");beforeAll(async()=>{await remove(join(a,".next"))});it("should fail the build",async()=>{const{code:e,stderr:t}=await nextBuild(a,[],{stderr:true});expect(e).toBe(0);expect(t).not.toMatch(/Can't resolve '[^']*?nprogress[^']*?'/);expect(t).not.toMatch(/Build error occurred/)})});describe("Ordering with styled-jsx (dev)",()=>{const e=join(fixturesDir,"with-styled-jsx");let a;let t;beforeAll(async()=>{await remove(join(e,".next"));a=await findPort();t=await launchApp(e,a)});afterAll(async()=>{await killApp(t)});it("should have the correct color (css ordering)",async()=>{const e=await webdriver(a,"/");const t=await e.eval(`window.getComputedStyle(document.querySelector('.my-text')).color`);expect(t).toMatchInlineSnapshot(`"rgb(0, 128, 0)"`)})});describe("Ordering with styled-jsx (prod)",()=>{const e=join(fixturesDir,"with-styled-jsx");let a;let t;let o;let i;beforeAll(async()=>{await remove(join(e,".next"));({code:i,stdout:o}=await nextBuild(e,[],{stdout:true}));a=await findPort();t=await nextStart(e,a)});afterAll(async()=>{await killApp(t)});it("should have compiled successfully",()=>{expect(i).toBe(0);expect(o).toMatch(/Compiled successfully/)});it("should have the correct color (css ordering)",async()=>{const e=await webdriver(a,"/");const t=await e.eval(`window.getComputedStyle(document.querySelector('.my-text')).color`);expect(t).toMatchInlineSnapshot(`"rgb(0, 128, 0)"`)})});describe("Ordering with Global CSS and Modules (dev)",()=>{const i=join(fixturesDir,"global-and-module-ordering");let n;let e;beforeAll(async()=>{await remove(join(i,".next"));n=await findPort();e=await launchApp(i,n)});afterAll(async()=>{await killApp(e)});it("should not execute scripts in any order",async()=>{const e=await renderViaHTTP(n,"/");const t=cheerio.load(e);let a=0;let o=0;for(const i of t("script").toArray()){++o;if("async"in i.attribs){++a}}expect(a).toBe(0);expect(o).not.toBe(0)});it("should have the correct color (css ordering)",async()=>{const e=await webdriver(n,"/");const t=await e.eval(`window.getComputedStyle(document.querySelector('#blueText')).color`);expect(t).toMatchInlineSnapshot(`"rgb(0, 0, 255)"`)});it("should have the correct color (css ordering) during hot reloads",async()=>{let e;try{e=await webdriver(n,"/");const t=await e.eval(`window.getComputedStyle(document.querySelector('#blueText')).color`);expect(t).toMatchInlineSnapshot(`"rgb(0, 0, 255)"`);const a=await e.eval(`window.getComputedStyle(document.querySelector('#yellowText')).color`);expect(a).toMatchInlineSnapshot(`"rgb(255, 255, 0)"`);const o=new File(join(i,"pages/index.module.css"));try{o.replace("color: yellow;","color: rgb(1, 1, 1);");await check(()=>e.eval(`window.getComputedStyle(document.querySelector('#yellowText')).color`),"rgb(1, 1, 1)");await check(()=>e.eval(`window.getComputedStyle(document.querySelector('#blueText')).color`),"rgb(0, 0, 255)")}finally{o.restore()}}finally{if(e){await e.close()}}})});describe("Ordering with Global CSS and Modules (prod)",()=>{const e=join(fixturesDir,"global-and-module-ordering");let a;let t;let o;let i;beforeAll(async()=>{await remove(join(e,".next"));({code:i,stdout:o}=await nextBuild(e,[],{stdout:true}));a=await findPort();t=await nextStart(e,a)});afterAll(async()=>{await killApp(t)});it("should have compiled successfully",()=>{expect(i).toBe(0);expect(o).toMatch(/Compiled successfully/)});it("should have the correct color (css ordering)",async()=>{const e=await webdriver(a,"/");const t=await e.eval(`window.getComputedStyle(document.querySelector('#blueText')).color`);expect(t).toMatchInlineSnapshot(`"rgb(0, 0, 255)"`)})});describe("CSS Property Ordering",()=>{const e=join(fixturesDir,"next-issue-15468");let o;let t;let a;let i;beforeAll(async()=>{await remove(join(e,".next"));({code:i,stdout:a}=await nextBuild(e,[],{stdout:true}));o=await findPort();t=await nextStart(e,o)});afterAll(async()=>{await killApp(t)});it("should have compiled successfully",()=>{expect(i).toBe(0);expect(a).toMatch(/Compiled successfully/)});it("should have the border width (property ordering)",async()=>{const e=await webdriver(o,"/");const t=await e.eval(`window.getComputedStyle(document.querySelector('.test1')).borderWidth`);expect(t).toMatchInlineSnapshot(`"0px"`);const a=await e.eval(`window.getComputedStyle(document.querySelector('.test2')).borderWidth`);expect(a).toMatchInlineSnapshot(`"5px"`)})});describe("Basic Tailwind CSS",()=>{const i=join(fixturesDir,"with-tailwindcss");beforeAll(async()=>{await remove(join(i,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(i,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/);expect(t).toContain(".css")});it(`should've compiled and prefixed`,async()=>{const e=join(i,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css$/.test(e));expect(a.length).toBe(1);const o=await readFile(join(e,a[0]),"utf8");expect(o).toMatch(/object-right-bottom/);expect(o).not.toMatch(/tailwind/);expect(o).toMatch(/\/\*#\s*sourceMappingURL=(.+\.map)\s*\*\//)});it(`should've emitted a source map`,async()=>{const e=join(i,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css\.map$/.test(e));expect(a.length).toBe(1)})});describe("Tailwind and Purge CSS",()=>{const i=join(fixturesDir,"with-tailwindcss-and-purgecss");beforeAll(async()=>{await remove(join(i,".next"))});it("should compile successfully",async()=>{const{code:e,stdout:t}=await nextBuild(i,[],{stdout:true});expect(e).toBe(0);expect(t).toMatch(/Compiled successfully/)});it(`should've compiled and prefixed`,async()=>{const e=join(i,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css$/.test(e));expect(a.length).toBe(1);const o=await readFile(join(e,a[0]),"utf8");expect(o).not.toMatch(/object-right-bottom/);expect(o).toMatch(/text-blue-500/);expect(o).not.toMatch(/tailwind/);expect(o).toMatch(/\/\*#\s*sourceMappingURL=(.+\.map)\s*\*\//)});it(`should've emitted a source map`,async()=>{const e=join(i,".next/static/css");const t=await readdir(e);const a=t.filter(e=>/\.css\.map$/.test(e));expect(a.length).toBe(1)})});describe("CSS page transition inject <style> with nonce so it works with CSP header",()=>{const e=join(fixturesDir,"csp-style-src-nonce");let t,r;function a(){async function c(e){await e.waitForElementByCss("#green-title");const t=await e.eval(`window.getComputedStyle(document.querySelector('#green-title')).color`);expect(t).toBe("rgb(0, 128, 0)")}async function s(e){await e.waitForElementByCss("#blue-title");const t=await e.eval(`window.getComputedStyle(document.querySelector('#blue-title')).color`);expect(t).toBe("rgb(0, 0, 255)")}it("should have correct color on index page (on load)",async()=>{const e=await webdriver(r,"/");try{await c(e)}finally{await e.close()}});it("should have correct color on index page (on hover)",async()=>{const e=await webdriver(r,"/");try{await c(e);await e.waitForElementByCss("#link-other").moveTo();await waitFor(2e3);await c(e)}finally{await e.close()}});it("should not change color on hover",async()=>{const e=await webdriver(r,"/");try{await c(e);await e.waitForElementByCss("#link-other").moveTo();await waitFor(2e3);await c(e)}finally{await e.close()}});it("should have correct CSS injection order",async()=>{const e=await webdriver(r,"/");try{await c(e);const t=await e.eval(`document.querySelector('link[rel=stylesheet][data-n-p]').previousSibling.getAttribute('href')`);const a=await e.eval(`document.querySelector('link[rel=stylesheet][data-n-p]').getAttribute('href')`);expect(t).toBeDefined();expect(t).toBe(a);await e.waitForElementByCss("#link-other").click();await s(e);const o=await e.eval(`document.querySelector('style[data-n-href]').previousSibling.getAttribute('data-n-css')`);const i=await e.eval(`document.querySelector('style[data-n-href]').getAttribute('data-n-href')`);expect(o).toBe("VmVyY2Vs");expect(i).toBeDefined();expect(i).not.toBe(a);await e.waitForElementByCss("#link-index").click();await c(e);const n=await e.eval(`document.querySelector('style[data-n-href]').previousSibling.getAttribute('data-n-css')`);const l=await e.eval(`document.querySelector('style[data-n-href]').getAttribute('data-n-href')`);expect(n).toBeTruthy();expect(l).toBeDefined();expect(l).toBe(a)}finally{await e.close()}});it("should have correct color on index page (on nav from index)",async()=>{const e=await webdriver(r,"/");try{await c(e);await e.waitForElementByCss("#link-other").click();await e.waitForElementByCss("#link-index");await s(e);await e.waitForElementByCss("#link-index").click();await c(e)}finally{await e.close()}});it("should have correct color on index page (on nav from other)",async()=>{const e=await webdriver(r,"/other");try{await s(e);await e.waitForElementByCss("#link-index").click();await e.waitForElementByCss("#link-other");await c(e);await e.waitForElementByCss("#link-other").click();await s(e)}finally{await e.close()}})}describe("Production Mode",()=>{beforeAll(async()=>{await remove(join(e,".next"))});beforeAll(async()=>{await nextBuild(e,[],{});r=await findPort();t=await nextStart(e,r)});afterAll(async()=>{await killApp(t)});a()})});describe("CSS Modules Composes Ordering",()=>{const e=join(fixturesDir,"composes-ordering");let t,r;function a(e=false){async function c(e){await e.waitForElementByCss("#black-title");const t=await e.eval(`window.getComputedStyle(document.querySelector('#black-title')).color`);expect(t).toBe("rgb(17, 17, 17)")}async function s(e){await e.waitForElementByCss("#red-title");const t=await e.eval(`window.getComputedStyle(document.querySelector('#red-title')).color`);expect(t).toBe("rgb(255, 0, 0)")}it("should have correct color on index page (on load)",async()=>{const e=await webdriver(r,"/");try{await c(e)}finally{await e.close()}});it("should have correct color on index page (on hover)",async()=>{const e=await webdriver(r,"/");try{await c(e);await e.waitForElementByCss("#link-other").moveTo();await waitFor(2e3);await c(e)}finally{await e.close()}});if(!e){it("should not change color on hover",async()=>{const e=await webdriver(r,"/");try{await c(e);await e.waitForElementByCss("#link-other").moveTo();await waitFor(2e3);await c(e)}finally{await e.close()}});it("should have correct CSS injection order",async()=>{const e=await webdriver(r,"/");try{await c(e);const t=await e.eval(`document.querySelector('link[rel=stylesheet][data-n-p]').previousSibling.getAttribute('href')`);const a=await e.eval(`document.querySelector('link[rel=stylesheet][data-n-p]').getAttribute('href')`);expect(t).toBeDefined();expect(t).toBe(a);await e.waitForElementByCss("#link-other").click();await s(e);const o=await e.eval(`document.querySelector('style[data-n-href]').previousSibling.getAttribute('data-n-css')`);const i=await e.eval(`document.querySelector('style[data-n-href]').getAttribute('data-n-href')`);expect(o).toBe("");expect(i).toBeDefined();expect(i).not.toBe(a);await e.waitForElementByCss("#link-index").click();await c(e);const n=await e.eval(`document.querySelector('style[data-n-href]').previousSibling.getAttribute('data-n-css')`);const l=await e.eval(`document.querySelector('style[data-n-href]').getAttribute('data-n-href')`);expect(n).toBe("");expect(l).toBeDefined();expect(l).toBe(a)}finally{await e.close()}})}it("should have correct color on index page (on nav from index)",async()=>{const e=await webdriver(r,"/");try{await c(e);await e.waitForElementByCss("#link-other").click();await e.waitForElementByCss("#link-index");await s(e);await e.waitForElementByCss("#link-index").click();await c(e)}finally{await e.close()}});it("should have correct color on index page (on nav from other)",async()=>{const e=await webdriver(r,"/other");try{await s(e);await e.waitForElementByCss("#link-index").click();await e.waitForElementByCss("#link-other");await c(e);await e.waitForElementByCss("#link-other").click();await s(e)}finally{await e.close()}})}describe("Development Mode",()=>{beforeAll(async()=>{await remove(join(e,".next"))});beforeAll(async()=>{r=await findPort();t=await launchApp(e,r)});afterAll(async()=>{await killApp(t)});a(true)});describe("Production Mode",()=>{beforeAll(async()=>{await remove(join(e,".next"))});beforeAll(async()=>{await nextBuild(e,[],{});r=await findPort();t=await nextStart(e,r)});afterAll(async()=>{await killApp(t)});a()})});describe("CSS Cleanup on Render Failure",()=>{const e=join(fixturesDir,"transition-cleanup");let t,n;function a(){async function i(e){await e.waitForElementByCss("#black-title");const t=await e.eval(`window.getComputedStyle(document.querySelector('#black-title')).color`);expect(t).toBe("rgb(17, 17, 17)")}it("not have intermediary page styles on error rendering",async()=>{const e=await webdriver(n,"/");try{await i(e);const t=await e.eval(`document.querySelector('link[rel=stylesheet][data-n-p]')`);expect(t).toBeDefined();await e.waitForElementByCss("#link-other").click();await check(()=>e.eval(`document.body.innerText`),"Application error: a client-side exception has occurred (see the browser console for more information).",true);const a=await e.eval(`document.querySelector('link[rel=stylesheet][data-n-p]')`);expect(a).toBeFalsy();const o=await e.eval(`document.querySelector('link[rel=stylesheet]')`);expect(o).toBeFalsy()}finally{await e.close()}})}describe("Production Mode",()=>{beforeAll(async()=>{await remove(join(e,".next"))});beforeAll(async()=>{await nextBuild(e,[],{});n=await findPort();t=await nextStart(e,n)});afterAll(async()=>{await killApp(t)});a()})});describe("Page reload on CSS missing",()=>{const a=join(fixturesDir,"transition-reload");let o,i;function e(){async function a(e){await e.waitForElementByCss("#black-title");const t=await e.eval(`window.getComputedStyle(document.querySelector('#black-title')).color`);expect(t).toBe("rgb(17, 17, 17)")}it("should fall back to server-side transition on missing CSS",async()=>{const e=await webdriver(i,"/");try{await a(e);await e.eval(`window.__priorNavigatePageState = 'OOF';`);await e.waitForElementByCss("#link-other").click();await e.waitForElementByCss("#link-index");const t=await e.eval(`window.__priorNavigatePageState`);expect(t).toBeFalsy()}finally{await e.close()}})}describe("Production Mode",()=>{beforeAll(async()=>{await remove(join(a,".next"))});beforeAll(async()=>{await nextBuild(a,[],{});i=await findPort();o=await nextStart(a,i);const e=await readJSON(join(a,".next","build-manifest.json"));const t=e["pages"]["/other"].filter(e=>e.endsWith(".css"));if(t.length<1)throw new Error;await Promise.all(t.map(e=>remove(join(a,".next",e))))});afterAll(async()=>{await killApp(o)});e()})});describe("Page hydrates with CSS and not waiting on dependencies",()=>{const a=join(fixturesDir,"hydrate-without-deps");let o,i;function e(){async function t(e){await e.waitForElementByCss("#black-title");const t=await e.eval(`window.getComputedStyle(document.querySelector('#black-title')).color`);expect(t).toBe("rgb(17, 17, 17)")}async function a(e){await e.waitForElementByCss("#red-title");const t=await e.eval(`window.getComputedStyle(document.querySelector('#red-title')).color`);expect(t).toBe("rgb(255, 0, 0)")}it("should hydrate black without dependencies manifest",async()=>{const e=await webdriver(i,"/");try{await t(e);await check(()=>e.eval(`document.querySelector('p').innerText`),"mounted")}finally{await e.close()}});it("should hydrate red without dependencies manifest",async()=>{const e=await webdriver(i,"/client");try{await a(e);await check(()=>e.eval(`document.querySelector('p').innerText`),"mounted")}finally{await e.close()}});it("should route from black to red without dependencies",async()=>{const e=await webdriver(i,"/");try{await t(e);await check(()=>e.eval(`document.querySelector('p').innerText`),"mounted");await e.eval(`document.querySelector('#link-client').click()`);await a(e);await check(()=>e.eval(`document.querySelector('p').innerText`),"mounted")}finally{await e.close()}})}describe("Production Mode",()=>{beforeAll(async()=>{await remove(join(a,".next"))});beforeAll(async()=>{await nextBuild(a,[],{});i=await findPort();o=await nextStart(a,i);const e=(await readFile(join(a,".next","BUILD_ID"),"utf8")).trim();const t=join(a,".next/static/",e,"_buildManifest.js");if(!await pathExists(t)){throw new Error("Missing build manifest")}await remove(t)});afterAll(async()=>{await killApp(o)});e()})});describe("Basic CSS Modules Ordering",()=>{const e=join(fixturesDir,"next-issue-12343");let t,o;function a(){async function t(e){await e.waitForElementByCss("#link-other");const t=await e.eval(`window.getComputedStyle(document.querySelector('#link-other')).backgroundColor`);expect(t).toBe("rgb(0, 255, 0)")}async function a(e){await e.waitForElementByCss("#link-index");const t=await e.eval(`window.getComputedStyle(document.querySelector('#link-index')).backgroundColor`);expect(t).toBe("rgb(255, 105, 180)")}it("should have correct color on index page (on load)",async()=>{const e=await webdriver(o,"/");try{await t(e)}finally{await e.close()}});it("should have correct color on index page (on hover)",async()=>{const e=await webdriver(o,"/");try{await t(e);await e.waitForElementByCss("#link-other").moveTo();await waitFor(2e3);await t(e)}finally{await e.close()}});it("should have correct color on index page (on nav)",async()=>{const e=await webdriver(o,"/");try{await t(e);await e.waitForElementByCss("#link-other").click();await e.waitForElementByCss("#link-index");await a(e);await e.waitForElementByCss("#link-index").click();await t(e)}finally{await e.close()}})}describe("Development Mode",()=>{beforeAll(async()=>{await remove(join(e,".next"))});beforeAll(async()=>{o=await findPort();t=await launchApp(e,o)});afterAll(async()=>{await killApp(t)});a()});describe("Production Mode",()=>{beforeAll(async()=>{await remove(join(e,".next"))});beforeAll(async()=>{await nextBuild(e,[],{});o=await findPort();t=await nextStart(e,o)});afterAll(async()=>{await killApp(t)});a()})});describe("should handle unresolved files gracefully",()=>{const i=join(fixturesDir,"unresolved-css-url");it("should build correctly",async()=>{await remove(join(i,".next"));const{code:e}=await nextBuild(i);expect(e).toBe(0)});it("should have correct file references in CSS output",async()=>{const e=await readdir(join(i,".next/static/css"));for(const t of e){if(t.endsWith(".css.map"))continue;const a=await readFile(join(i,".next/static/css",t),"utf8");console.log(t,a);const o=a.includes("p{")||a.includes("p,")?2:1;expect(a.match(/\(\/vercel\.svg/g).length).toBe(o);expect(a.match(/\(\/_next\/static\/media/g).length).toBe(1);expect(a.match(/\(https:\/\//g).length).toBe(o)}})})});