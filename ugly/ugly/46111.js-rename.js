import fs from"fs-extra";import{join}from"path";import{nextBuild,findPort,killApp,initNextServerScript}from"next-test-utils";const appDir=join(__dirname,"../");jest.setTimeout(1e3*60*2);let appPort;let app;let buildId;const nextStart=async(e,t)=>{const a=join(e,"server.js");const r=Object.assign({...process.env},{PORT:`${t}`});return initNextServerScript(a,/ready on/i,r,/ReferenceError: options is not defined/)};describe("Serverless Trace",()=>{beforeAll(async()=>{await nextBuild(appDir);appPort=await findPort();app=await nextStart(appDir,appPort);buildId=await fs.readFile(join(appDir,".next/BUILD_ID"),"utf8")});afterAll(()=>killApp(app));it("should have revalidate page in prerender-manifest with correct interval",async()=>{const e=await fs.readJSON(join(appDir,".next/prerender-manifest.json"));expect(e.routes["/revalidate"]).toEqual({initialRevalidateSeconds:10,dataRoute:`/_next/data/${buildId}/revalidate.json`,srcRoute:null})});it("should set correct Cache-Control header",async()=>{const e=`http://localhost:${appPort}/revalidate`;const t=await fetch(e);expect(t.headers.get("Cache-Control")).toMatch("s-maxage=10, stale-while-revalidate")})});