"use strict";const WebSocket=require("ws");const{expect}=require("chai");const awsRequest=require("@serverless/test/aws-request");const log=require("log").get("serverless:test");const wait=require("timers-ext/promise/sleep");const fixtures=require("../../fixtures/programmatic");const{confirmCloudWatchLogs}=require("../../utils/misc");const{deployService,removeService}=require("../../utils/integration");const{createApi,deleteApi,getRoutes,createStage,deleteStage}=require("../../utils/websocket");describe("AWS - API Gateway Websocket Integration Test",function(){this.timeout(1e3*60*10);let i;let o;let r;let a;let c;const n="dev";before(async()=>{const e=await fixtures.setup("websocket");({servicePath:r,updateConfig:a}=e);o=e.serviceConfig.service;i=`${o}-${n}`;return deployService(r)});after(()=>{if(!c)return null;return removeService(r)});async function e(){const e=await awsRequest("CloudFormation","describeStacks",{StackName:i});const t=e.Stacks[0].Outputs.find(e=>e.OutputKey==="ServiceEndpointWebsocket").OutputValue;return t}describe("Two-Way Setup",()=>{let i;after(()=>clearTimeout(i));it("should expose a websocket route that can reply to a message",async()=>{const r=await e();return new Promise((e,t)=>{const s=new WebSocket(r);t=(t=>e=>{t(e);try{s.close()}catch(e){}})(t);const o=()=>{log.debug("Sending message to 'hello' route");s.send(JSON.stringify({action:"hello",name:"serverless"}));i=setTimeout(o,1e3)};s.on("error",t);s.on("open",o);s.on("close",e);s.on("message",e=>{c=true;clearTimeout(i);try{log.debug(`Received WebSocket message: ${e}`);expect(e).to.equal("Hello, serverless")}finally{s.close()}})}).finally(()=>clearTimeout(i))})});describe("Minimal Setup",()=>{it("should expose an accessible websocket endpoint",async function(){if(!c)this.skip();const r=await e();log.debug(`WebSocket Server URL ${r}`);expect(r).to.match(/wss:\/\/.+\.execute-api\..+\.amazonaws\.com.+/);return new Promise((e,t)=>{const s=new WebSocket(r);let o=false;t=(t=>e=>{o=true;t(e);try{s.close()}catch(e){}})(t);s.on("error",t);s.on("open",()=>{confirmCloudWatchLogs(`/aws/websocket/${i}`,()=>{if(o)throw new Error("Stop propagation");s.send("test message");return wait(500)}).then(e=>{expect(e.length>0).to.equal(true);s.close()},t)});s.on("close",e);s.on("message",e=>{log.debug("Unexpected WebSocket message",e);t(new Error("Unexpected message"))})})});describe("when using an existing websocket API",()=>{let s;before(async function(){if(!c)this.skip();const e=`${n}-${o}-ext-api`;const t=await createApi(e);s=t.ApiId;await createStage(s,"dev");await a({provider:{apiGateway:{websocketApiId:s}}});return deployService(r)});after(async()=>{if(!c)return;await a({provider:{apiGateway:{websocketApiId:null}}});await deleteStage(s,"dev");await deployService(r);log.debug("Deleting external websocket API...");await deleteApi(s)});it("should add the routes to the referenced API",async()=>{const e=await getRoutes(s);expect(e.length).to.equal(4)})})})});