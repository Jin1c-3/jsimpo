"use strict";const{expect}=require("chai");const log=require("log").get("serverless:test");const fixtures=require("../../fixtures/programmatic");const{createKinesisStream,deleteKinesisStream,putKinesisRecord}=require("../../utils/kinesis");const{putDynamoDbItem}=require("../../utils/dynamodb");const{confirmCloudWatchLogs}=require("../../utils/misc");const{deployService,removeService}=require("../../utils/integration");describe("AWS - Stream Integration Test",function(){this.timeout(1e3*60*100);let o;let s;let r;let n;const c="Hello from the Kinesis horizon!";const i="dev";before(async()=>{const e=await fixtures.setup("stream");({servicePath:s}=e);const t=e.serviceConfig.service;r=`${t}-kinesis`;n=`${t}-table`;o=`${t}-${i}`;log.notice(`Creating Kinesis stream "${r}"...`);return createKinesisStream(r).then(()=>putKinesisRecord(r,c)).then(()=>deployService(s))});after(async()=>{await removeService(s);log.notice("Deleting Kinesis stream");return deleteKinesisStream(r)});describe("Kinesis Streams",()=>{it("should invoke on kinesis messages from the trim horizon",()=>{const s="streamKinesis";const i="Hello from Kinesis!";return confirmCloudWatchLogs(`/aws/lambda/${o}-${s}`,()=>putKinesisRecord(r,i),{checkIsComplete:e=>e.reduce((e,t)=>e+t.message,"").includes(i)}).then(e=>{const t=e.reduce((e,t)=>e+t.message,"");expect(t).to.include(s);expect(t).to.include(i);expect(t).to.include(c)})})});describe("DynamoDB Streams",()=>{it("should invoke on dynamodb messages from the latest position",()=>{const s="streamDynamoDb";const i={id:"message"};return confirmCloudWatchLogs(`/aws/lambda/${o}-${s}`,()=>{i.hello=`from dynamo!${Math.random().toString(36).slice(2)}`;return putDynamoDbItem(n,i)},{checkIsComplete:e=>e.reduce((e,t)=>e+t.message,"").includes(s)}).then(e=>{const t=e.reduce((e,t)=>e+t.message,"");expect(t).to.include(s);expect(t).to.include("INSERT");expect(t).to.include(i.id)})})})});