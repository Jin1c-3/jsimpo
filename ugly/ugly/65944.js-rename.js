const pacote=require("pacote");const cacache=require("cacache");const Advisory=require("./advisory.js");const{homedir}=require("os");const jsonParse=require("json-parse-even-better-errors");const _packument=Symbol("packument");const _cachePut=Symbol("cachePut");const _cacheGet=Symbol("cacheGet");const _cacheData=Symbol("cacheData");const _packuments=Symbol("packuments");const _cache=Symbol("cache");const _options=Symbol("options");const _advisories=Symbol("advisories");const _calculate=Symbol("calculate");class Calculator{constructor(t={}){this[_options]={...t};this[_cache]=this[_options].cache||homedir()+"/.npm/_cacache";this[_options].cache=this[_cache];this[_packuments]=new Map;this[_cacheData]=new Map;this[_advisories]=new Map}get cache(){return this[_cache]}get options(){return{...this[_options]}}async calculate(t,e){const c=`security-advisory:${t}:${e.id}`;if(this[_advisories].has(c))return this[_advisories].get(c);const s=this[_calculate](t,e);this[_advisories].set(c,s);return s}async[_calculate](t,e){const c=`security-advisory:${t}:${e.id}`;const s=`metavuln:calculate:${c}`;process.emit("time",s);const a=new Advisory(t,e,this[_options]);const[i,o]=await Promise.all([this[_cacheGet](a),this[_packument](t)]);process.emit("time",`metavuln:load:${c}`);a.load(i,o);process.emit("timeEnd",`metavuln:load:${c}`);if(a.updated)await this[_cachePut](a);this[_advisories].set(c,a);process.emit("timeEnd",s);return a}async[_cachePut](t){const{name:e,id:c}=t;const s=`security-advisory:${e}:${c}`;process.emit("time",`metavuln:cache:put:${s}`);const a=JSON.stringify(t);const i={...this[_options]};this[_cacheData].set(s,jsonParse(a));await cacache.put(this[_cache],s,a,i).catch(()=>{});process.emit("timeEnd",`metavuln:cache:put:${s}`)}async[_cacheGet](t){const{name:e,id:c}=t;const s=`security-advisory:${e}:${c}`;if(this[_cacheData].has(s))return this[_cacheData].get(s);process.emit("time",`metavuln:cache:get:${s}`);const a=cacache.get(this[_cache],s,{...this[_options]}).catch(()=>({data:"{}"})).then(({data:t})=>{t=jsonParse(t);process.emit("timeEnd",`metavuln:cache:get:${s}`);this[_cacheData].set(s,t);return t});this[_cacheData].set(s,a);return a}async[_packument](e){if(this[_packuments].has(e))return this[_packuments].get(e);process.emit("time",`metavuln:packument:${e}`);const t=pacote.packument(e,{...this[_options]}).catch(t=>{return{name:e,versions:{}}}).then(t=>{process.emit("timeEnd",`metavuln:packument:${e}`);this[_packuments].set(e,t);return t});this[_packuments].set(e,t);return t}}module.exports=Calculator;