"use strict";const fs=require("fs");const path=require("path");const{createTestBuilder}=require("../../../../test/helpers/builder");const{createStrapiInstance}=require("../../../../test/helpers/strapi");const{createAuthRequest}=require("../../../../test/helpers/request");let strapi;let rq;let baseRq;const uploadImg=()=>{return baseRq({method:"POST",url:"/upload",formData:{files:fs.createReadStream(path.join(__dirname,"rec.jpg"))}})};const components={singleMedia:{name:"single-media",attributes:{media:{type:"media"}}},multipleMedia:{name:"multiple-media",attributes:{media:{type:"media",multiple:true}}},withNested:{name:"with-nested",attributes:{singleMedia:{type:"component",component:"default.single-media"},multipleMedia:{type:"component",component:"default.multiple-media"}}}};const ct={name:"withdynamiczonemedia",attributes:{field:{type:"dynamiczone",components:["default.single-media","default.multiple-media","default.with-nested"]}}};describe.each([["CONTENT MANAGER","/content-manager/collection-types/application::withdynamiczonemedia.withdynamiczonemedia"],["GENERATED API","/withdynamiczonemedias"]])("[%s] => Not required dynamiczone",(e,t)=>{const a=createTestBuilder();beforeAll(async()=>{await a.addComponent(components.singleMedia).addComponent(components.multipleMedia).addComponent(components.withNested).addContentType(ct).build();strapi=await createStrapiInstance();baseRq=await createAuthRequest({strapi:strapi});rq=await createAuthRequest({strapi:strapi});rq.setURLPrefix(t)});afterAll(async()=>{await strapi.destroy();await a.cleanup()});describe("Contains components with medias",()=>{test("The medias are correctly related to the components on creation",async()=>{const e=await uploadImg();expect(e.statusCode).toBe(200);const t=e.body[0].id;const a=await rq({method:"POST",url:"/",body:{field:[{__component:"default.single-media",media:t},{__component:"default.multiple-media",media:[t,t]}]}});expect(a.statusCode).toBe(200);expect(Array.isArray(a.body.field)).toBe(true);expect(a.body).toMatchObject({field:[{id:expect.anything(),__component:"default.single-media",media:{id:t,url:expect.any(String)}},{id:expect.anything(),__component:"default.multiple-media",media:expect.arrayContaining([expect.objectContaining({id:t,url:expect.any(String)})])}]})});test("The medias are correctly related to the components on edition",async()=>{const e=await uploadImg();expect(e.statusCode).toBe(200);const t=e.body[0].id;const a=await rq({method:"POST",url:"/",body:{field:[{__component:"default.single-media",media:t},{__component:"default.multiple-media",media:[t,t]}]}});expect(a.statusCode).toBe(200);expect(Array.isArray(a.body.field)).toBe(true);const i=await uploadImg();expect(i.statusCode).toBe(200);const n=i.body[0].id;const d=await rq({method:"PUT",url:`/${a.body.id}`,body:{field:[{__component:"default.single-media",media:n},{__component:"default.multiple-media",media:[n,n]}]}});expect(d.body).toMatchObject({field:[{id:expect.anything(),__component:"default.single-media",media:{id:n,url:expect.any(String)}},{id:expect.anything(),__component:"default.multiple-media",media:expect.arrayContaining([expect.objectContaining({id:n,url:expect.any(String)})])}]})});test("The media are populated on the components",async()=>{const e=await uploadImg();expect(e.statusCode).toBe(200);const t=e.body[0].id;const a=await rq({method:"POST",url:"/",body:{field:[{__component:"default.single-media",media:t},{__component:"default.multiple-media",media:[t,t]}]}});expect(a.statusCode).toBe(200);const i=await rq({method:"GET",url:`/${a.body.id}`});expect(i.body).toMatchObject({field:[{id:expect.anything(),__component:"default.single-media",media:{id:t,url:expect.any(String)}},{id:expect.anything(),__component:"default.multiple-media",media:expect.arrayContaining([expect.objectContaining({id:t,url:expect.any(String)})])}]})})});describe("Contains components with nested components having medias",()=>{test("The medias are correctly related to the nested components on creation",async()=>{const e=await uploadImg();expect(e.statusCode).toBe(200);const t=e.body[0].id;const a=await rq({method:"POST",url:"/",body:{field:[{__component:"default.with-nested",singleMedia:{media:t},multipleMedia:{media:[t,t]}}]}});expect(a.statusCode).toBe(200);expect(Array.isArray(a.body.field)).toBe(true);expect(a.body).toMatchObject({field:[{id:expect.anything(),__component:"default.with-nested",singleMedia:{media:{id:t,url:expect.any(String)}},multipleMedia:{media:expect.arrayContaining([expect.objectContaining({id:t,url:expect.any(String)})])}}]})})})});