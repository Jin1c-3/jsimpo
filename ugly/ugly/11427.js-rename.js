"use strict";const _=require("lodash");const yup=require("yup");const{formatYupErrors,nameToSlug}=require("strapi-utils");const pluralize=require("pluralize");const{modelTypes,DEFAULT_TYPES,typeKinds}=require("../../services/constants");const createSchema=require("./model-schema");const{removeEmptyDefaults,removeDeletedUIDTargetFields}=require("./data-transform");const{nestedComponentSchema}=require("./component");const VALID_RELATIONS={[typeKinds.SINGLE_TYPE]:["oneWay","manyWay"],[typeKinds.COLLECTION_TYPE]:["oneWay","manyWay","oneToOne","oneToMany","manyToOne","manyToMany"]};const VALID_TYPES=[...DEFAULT_TYPES,"uid","component","dynamiczone"];const createContentTypeSchema=(e,{isEdition:t=false}={})=>{const n=_.get(e,"contentType.kind",typeKinds.COLLECTION_TYPE);const a=createSchema(VALID_TYPES,VALID_RELATIONS[n]||[],{modelType:modelTypes.CONTENT_TYPE}).shape({name:yup.string().test(hasPluralName).test(alreadyUsedContentTypeName(t)).test(forbiddenContentTypeNameValidator()).min(1).required()});return yup.object({contentType:a.required().noUnknown(),components:nestedComponentSchema}).noUnknown()};const validateContentTypeInput=e=>{return createContentTypeSchema(e).validate(e,{strict:true,abortEarly:false}).catch(e=>Promise.reject(formatYupErrors(e)))};const validateUpdateContentTypeInput=e=>{if(_.has(e,"contentType")){removeEmptyDefaults(e.contentType)}if(_.has(e,"components")&&Array.isArray(e.components)){e.components.forEach(e=>{if(_.has(e,"uid")){removeEmptyDefaults(e)}})}removeDeletedUIDTargetFields(e.contentType);return createContentTypeSchema(e,{isEdition:true}).validate(e,{strict:true,abortEarly:false}).catch(e=>Promise.reject(formatYupErrors(e)))};const forbiddenContentTypeNameValidator=()=>{const t=strapi.plugins["content-type-builder"].services.builder.getReservedNames().models;return{name:"forbiddenContentTypeName",message:`Content Type name cannot be one of ${t.join(", ")}`,test:e=>{if(t.includes(nameToSlug(e))){return false}return true}}};const hasPluralName={name:"hasPluralName",message:"Content Type name `${value}` cannot be pluralized. \nSuggestion: add Item after the name (e.g News -> NewsItem).",test:e=>{if(pluralize.singular(e)===pluralize(e)){return false}return true}};const alreadyUsedContentTypeName=t=>{const n=Object.values(strapi.contentTypes).map(e=>e.modelName);return{name:"nameAlreadyUsed",message:"Content Type name `${value}` is already being used.",test:e=>{if(t)return true;if(n.includes(nameToSlug(e))){return false}return true}}};const validateKind=e=>{return yup.string().oneOf([typeKinds.SINGLE_TYPE,typeKinds.COLLECTION_TYPE]).validate(e).catch(e=>Promise.reject(formatYupErrors(e)))};module.exports={validateContentTypeInput:validateContentTypeInput,validateUpdateContentTypeInput:validateUpdateContentTypeInput,validateKind:validateKind};